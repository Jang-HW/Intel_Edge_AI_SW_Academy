
btbtbt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005554  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  080056f4  080056f4  000066f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005874  08005874  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005874  08005874  00006874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800587c  0800587c  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800587c  0800587c  0000687c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005880  08005880  00006880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005884  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  20000068  080058ec  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000388  080058ec  00007388  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a201  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bf7  00000000  00000000  00011299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c8  00000000  00000000  00012e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006b1  00000000  00000000  00013758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017832  00000000  00000000  00013e09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000af6f  00000000  00000000  0002b63b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000936b6  00000000  00000000  000365aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9c60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f18  00000000  00000000  000c9ca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000ccbbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080056dc 	.word	0x080056dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080056dc 	.word	0x080056dc

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a4:	f000 fe40 	bl	8001228 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a8:	f000 f874 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ac:	f000 f9b4 	bl	8000918 <MX_GPIO_Init>
  MX_DMA_Init();
 80005b0:	f000 f992 	bl	80008d8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005b4:	f000 f93c 	bl	8000830 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80005b8:	f000 f964 	bl	8000884 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80005bc:	f000 f8d4 	bl	8000768 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &rx2char,1);
 80005c0:	2201      	movs	r2, #1
 80005c2:	4925      	ldr	r1, [pc, #148]	@ (8000658 <main+0xb8>)
 80005c4:	4825      	ldr	r0, [pc, #148]	@ (800065c <main+0xbc>)
 80005c6:	f002 fec2 	bl	800334e <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &btchar,1);
 80005ca:	2201      	movs	r2, #1
 80005cc:	4924      	ldr	r1, [pc, #144]	@ (8000660 <main+0xc0>)
 80005ce:	4825      	ldr	r0, [pc, #148]	@ (8000664 <main+0xc4>)
 80005d0:	f002 febd 	bl	800334e <HAL_UART_Receive_IT>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)JoyStick_XY, 2);
 80005d4:	2202      	movs	r2, #2
 80005d6:	4924      	ldr	r1, [pc, #144]	@ (8000668 <main+0xc8>)
 80005d8:	4824      	ldr	r0, [pc, #144]	@ (800066c <main+0xcc>)
 80005da:	f000 fec7 	bl	800136c <HAL_ADC_Start_DMA>

  printf("start main_adc()\r\n");
 80005de:	4824      	ldr	r0, [pc, #144]	@ (8000670 <main+0xd0>)
 80005e0:	f003 ff5a 	bl	8004498 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(rx2Flag)
 80005e4:	4b23      	ldr	r3, [pc, #140]	@ (8000674 <main+0xd4>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d006      	beq.n	80005fc <main+0x5c>
	  {
	  		printf("recv2 : %s\r\n",rx2Data);
 80005ee:	4922      	ldr	r1, [pc, #136]	@ (8000678 <main+0xd8>)
 80005f0:	4822      	ldr	r0, [pc, #136]	@ (800067c <main+0xdc>)
 80005f2:	f003 fee9 	bl	80043c8 <iprintf>
	  		rx2Flag = 0;
 80005f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000674 <main+0xd4>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	701a      	strb	r2, [r3, #0]
	  //    HAL_UART_Transmit(&huart6, (uint8_t *)buf, strlen(buf), 0xFFFF);
	  }
	  if(btFlag)
 80005fc:	4b20      	ldr	r3, [pc, #128]	@ (8000680 <main+0xe0>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	b2db      	uxtb	r3, r3
 8000602:	2b00      	cmp	r3, #0
 8000604:	d008      	beq.n	8000618 <main+0x78>
	  {
		  printf("bt : %s\r\n",btData);
 8000606:	491f      	ldr	r1, [pc, #124]	@ (8000684 <main+0xe4>)
 8000608:	481f      	ldr	r0, [pc, #124]	@ (8000688 <main+0xe8>)
 800060a:	f003 fedd 	bl	80043c8 <iprintf>
		  btFlag = 0;
 800060e:	4b1c      	ldr	r3, [pc, #112]	@ (8000680 <main+0xe0>)
 8000610:	2200      	movs	r2, #0
 8000612:	701a      	strb	r2, [r3, #0]
		  bluetooth_Event();
 8000614:	f000 fa46 	bl	8000aa4 <bluetooth_Event>
	  }
	  if(jsFlag){
 8000618:	4b1c      	ldr	r3, [pc, #112]	@ (800068c <main+0xec>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	b2db      	uxtb	r3, r3
 800061e:	2b00      	cmp	r3, #0
 8000620:	d017      	beq.n	8000652 <main+0xb2>
		  jsFlag = RESET;
 8000622:	4b1a      	ldr	r3, [pc, #104]	@ (800068c <main+0xec>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
		  JoyStick_XY[1] = HAL_ADC_GetValue(&hadc1);
 8000628:	4810      	ldr	r0, [pc, #64]	@ (800066c <main+0xcc>)
 800062a:	f000 ff8f 	bl	800154c <HAL_ADC_GetValue>
 800062e:	4603      	mov	r3, r0
 8000630:	b29a      	uxth	r2, r3
 8000632:	4b0d      	ldr	r3, [pc, #52]	@ (8000668 <main+0xc8>)
 8000634:	805a      	strh	r2, [r3, #2]
		  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)JoyStick_XY, 2);
 8000636:	2202      	movs	r2, #2
 8000638:	490b      	ldr	r1, [pc, #44]	@ (8000668 <main+0xc8>)
 800063a:	480c      	ldr	r0, [pc, #48]	@ (800066c <main+0xcc>)
 800063c:	f000 fe96 	bl	800136c <HAL_ADC_Start_DMA>
		  printf("%d,%d\r\n", JoyStick_XY[0], JoyStick_XY[1]);
 8000640:	4b09      	ldr	r3, [pc, #36]	@ (8000668 <main+0xc8>)
 8000642:	881b      	ldrh	r3, [r3, #0]
 8000644:	4619      	mov	r1, r3
 8000646:	4b08      	ldr	r3, [pc, #32]	@ (8000668 <main+0xc8>)
 8000648:	885b      	ldrh	r3, [r3, #2]
 800064a:	461a      	mov	r2, r3
 800064c:	4810      	ldr	r0, [pc, #64]	@ (8000690 <main+0xf0>)
 800064e:	f003 febb 	bl	80043c8 <iprintf>
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	__NOP();
 8000652:	bf00      	nop
	  if(rx2Flag)
 8000654:	e7c6      	b.n	80005e4 <main+0x44>
 8000656:	bf00      	nop
 8000658:	200001bc 	.word	0x200001bc
 800065c:	2000012c 	.word	0x2000012c
 8000660:	200001f3 	.word	0x200001f3
 8000664:	20000174 	.word	0x20000174
 8000668:	20000228 	.word	0x20000228
 800066c:	20000084 	.word	0x20000084
 8000670:	080056f4 	.word	0x080056f4
 8000674:	200001bd 	.word	0x200001bd
 8000678:	200001c0 	.word	0x200001c0
 800067c:	08005708 	.word	0x08005708
 8000680:	200001f2 	.word	0x200001f2
 8000684:	200001f4 	.word	0x200001f4
 8000688:	08005718 	.word	0x08005718
 800068c:	20000226 	.word	0x20000226
 8000690:	08005724 	.word	0x08005724

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b094      	sub	sp, #80	@ 0x50
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	2230      	movs	r2, #48	@ 0x30
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f003 fff8 	bl	8004698 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	4b28      	ldr	r3, [pc, #160]	@ (8000760 <SystemClock_Config+0xcc>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c0:	4a27      	ldr	r2, [pc, #156]	@ (8000760 <SystemClock_Config+0xcc>)
 80006c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006c8:	4b25      	ldr	r3, [pc, #148]	@ (8000760 <SystemClock_Config+0xcc>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d4:	2300      	movs	r3, #0
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	4b22      	ldr	r3, [pc, #136]	@ (8000764 <SystemClock_Config+0xd0>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a21      	ldr	r2, [pc, #132]	@ (8000764 <SystemClock_Config+0xd0>)
 80006de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006e2:	6013      	str	r3, [r2, #0]
 80006e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000764 <SystemClock_Config+0xd0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f0:	2302      	movs	r3, #2
 80006f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f4:	2301      	movs	r3, #1
 80006f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f8:	2310      	movs	r3, #16
 80006fa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fc:	2302      	movs	r3, #2
 80006fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000700:	2300      	movs	r3, #0
 8000702:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000704:	2310      	movs	r3, #16
 8000706:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000708:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800070c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800070e:	2304      	movs	r3, #4
 8000710:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000712:	2304      	movs	r3, #4
 8000714:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000716:	f107 0320 	add.w	r3, r7, #32
 800071a:	4618      	mov	r0, r3
 800071c:	f002 f8a4 	bl	8002868 <HAL_RCC_OscConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000726:	f000 fafb 	bl	8000d20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072a:	230f      	movs	r3, #15
 800072c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072e:	2302      	movs	r3, #2
 8000730:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000736:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800073a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	2102      	movs	r1, #2
 8000746:	4618      	mov	r0, r3
 8000748:	f002 fb06 	bl	8002d58 <HAL_RCC_ClockConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000752:	f000 fae5 	bl	8000d20 <Error_Handler>
  }
}
 8000756:	bf00      	nop
 8000758:	3750      	adds	r7, #80	@ 0x50
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40023800 	.word	0x40023800
 8000764:	40007000 	.word	0x40007000

08000768 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800076e:	463b      	mov	r3, r7
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800077a:	4b2a      	ldr	r3, [pc, #168]	@ (8000824 <MX_ADC1_Init+0xbc>)
 800077c:	4a2a      	ldr	r2, [pc, #168]	@ (8000828 <MX_ADC1_Init+0xc0>)
 800077e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000780:	4b28      	ldr	r3, [pc, #160]	@ (8000824 <MX_ADC1_Init+0xbc>)
 8000782:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000786:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000788:	4b26      	ldr	r3, [pc, #152]	@ (8000824 <MX_ADC1_Init+0xbc>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800078e:	4b25      	ldr	r3, [pc, #148]	@ (8000824 <MX_ADC1_Init+0xbc>)
 8000790:	2201      	movs	r2, #1
 8000792:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000794:	4b23      	ldr	r3, [pc, #140]	@ (8000824 <MX_ADC1_Init+0xbc>)
 8000796:	2200      	movs	r2, #0
 8000798:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 800079a:	4b22      	ldr	r3, [pc, #136]	@ (8000824 <MX_ADC1_Init+0xbc>)
 800079c:	2201      	movs	r2, #1
 800079e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 2;
 80007a2:	4b20      	ldr	r3, [pc, #128]	@ (8000824 <MX_ADC1_Init+0xbc>)
 80007a4:	2202      	movs	r2, #2
 80007a6:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000824 <MX_ADC1_Init+0xbc>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000824 <MX_ADC1_Init+0xbc>)
 80007b0:	4a1e      	ldr	r2, [pc, #120]	@ (800082c <MX_ADC1_Init+0xc4>)
 80007b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000824 <MX_ADC1_Init+0xbc>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80007ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000824 <MX_ADC1_Init+0xbc>)
 80007bc:	2202      	movs	r2, #2
 80007be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007c0:	4b18      	ldr	r3, [pc, #96]	@ (8000824 <MX_ADC1_Init+0xbc>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80007c8:	4b16      	ldr	r3, [pc, #88]	@ (8000824 <MX_ADC1_Init+0xbc>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ce:	4815      	ldr	r0, [pc, #84]	@ (8000824 <MX_ADC1_Init+0xbc>)
 80007d0:	f000 fd88 	bl	80012e4 <HAL_ADC_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 80007da:	f000 faa1 	bl	8000d20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007de:	2300      	movs	r3, #0
 80007e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007e2:	2301      	movs	r3, #1
 80007e4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80007e6:	2307      	movs	r3, #7
 80007e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ea:	463b      	mov	r3, r7
 80007ec:	4619      	mov	r1, r3
 80007ee:	480d      	ldr	r0, [pc, #52]	@ (8000824 <MX_ADC1_Init+0xbc>)
 80007f0:	f000 fed8 	bl	80015a4 <HAL_ADC_ConfigChannel>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80007fa:	f000 fa91 	bl	8000d20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007fe:	2301      	movs	r3, #1
 8000800:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000802:	2302      	movs	r3, #2
 8000804:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000806:	463b      	mov	r3, r7
 8000808:	4619      	mov	r1, r3
 800080a:	4806      	ldr	r0, [pc, #24]	@ (8000824 <MX_ADC1_Init+0xbc>)
 800080c:	f000 feca 	bl	80015a4 <HAL_ADC_ConfigChannel>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000816:	f000 fa83 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000084 	.word	0x20000084
 8000828:	40012000 	.word	0x40012000
 800082c:	0f000001 	.word	0x0f000001

08000830 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000834:	4b11      	ldr	r3, [pc, #68]	@ (800087c <MX_USART2_UART_Init+0x4c>)
 8000836:	4a12      	ldr	r2, [pc, #72]	@ (8000880 <MX_USART2_UART_Init+0x50>)
 8000838:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800083a:	4b10      	ldr	r3, [pc, #64]	@ (800087c <MX_USART2_UART_Init+0x4c>)
 800083c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000840:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000842:	4b0e      	ldr	r3, [pc, #56]	@ (800087c <MX_USART2_UART_Init+0x4c>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000848:	4b0c      	ldr	r3, [pc, #48]	@ (800087c <MX_USART2_UART_Init+0x4c>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800084e:	4b0b      	ldr	r3, [pc, #44]	@ (800087c <MX_USART2_UART_Init+0x4c>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000854:	4b09      	ldr	r3, [pc, #36]	@ (800087c <MX_USART2_UART_Init+0x4c>)
 8000856:	220c      	movs	r2, #12
 8000858:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085a:	4b08      	ldr	r3, [pc, #32]	@ (800087c <MX_USART2_UART_Init+0x4c>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000860:	4b06      	ldr	r3, [pc, #24]	@ (800087c <MX_USART2_UART_Init+0x4c>)
 8000862:	2200      	movs	r2, #0
 8000864:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000866:	4805      	ldr	r0, [pc, #20]	@ (800087c <MX_USART2_UART_Init+0x4c>)
 8000868:	f002 fc96 	bl	8003198 <HAL_UART_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000872:	f000 fa55 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	2000012c 	.word	0x2000012c
 8000880:	40004400 	.word	0x40004400

08000884 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000888:	4b11      	ldr	r3, [pc, #68]	@ (80008d0 <MX_USART6_UART_Init+0x4c>)
 800088a:	4a12      	ldr	r2, [pc, #72]	@ (80008d4 <MX_USART6_UART_Init+0x50>)
 800088c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800088e:	4b10      	ldr	r3, [pc, #64]	@ (80008d0 <MX_USART6_UART_Init+0x4c>)
 8000890:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000894:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000896:	4b0e      	ldr	r3, [pc, #56]	@ (80008d0 <MX_USART6_UART_Init+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800089c:	4b0c      	ldr	r3, [pc, #48]	@ (80008d0 <MX_USART6_UART_Init+0x4c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	@ (80008d0 <MX_USART6_UART_Init+0x4c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80008a8:	4b09      	ldr	r3, [pc, #36]	@ (80008d0 <MX_USART6_UART_Init+0x4c>)
 80008aa:	220c      	movs	r2, #12
 80008ac:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ae:	4b08      	ldr	r3, [pc, #32]	@ (80008d0 <MX_USART6_UART_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b4:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <MX_USART6_UART_Init+0x4c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80008ba:	4805      	ldr	r0, [pc, #20]	@ (80008d0 <MX_USART6_UART_Init+0x4c>)
 80008bc:	f002 fc6c 	bl	8003198 <HAL_UART_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80008c6:	f000 fa2b 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000174 	.word	0x20000174
 80008d4:	40011400 	.word	0x40011400

080008d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <MX_DMA_Init+0x3c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4a0b      	ldr	r2, [pc, #44]	@ (8000914 <MX_DMA_Init+0x3c>)
 80008e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ee:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <MX_DMA_Init+0x3c>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2100      	movs	r1, #0
 80008fe:	2038      	movs	r0, #56	@ 0x38
 8000900:	f001 f9db 	bl	8001cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000904:	2038      	movs	r0, #56	@ 0x38
 8000906:	f001 f9f4 	bl	8001cf2 <HAL_NVIC_EnableIRQ>

}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40023800 	.word	0x40023800

08000918 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08a      	sub	sp, #40	@ 0x28
 800091c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]
 800092c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
 8000932:	4b34      	ldr	r3, [pc, #208]	@ (8000a04 <MX_GPIO_Init+0xec>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a33      	ldr	r2, [pc, #204]	@ (8000a04 <MX_GPIO_Init+0xec>)
 8000938:	f043 0304 	orr.w	r3, r3, #4
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b31      	ldr	r3, [pc, #196]	@ (8000a04 <MX_GPIO_Init+0xec>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0304 	and.w	r3, r3, #4
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	4b2d      	ldr	r3, [pc, #180]	@ (8000a04 <MX_GPIO_Init+0xec>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	4a2c      	ldr	r2, [pc, #176]	@ (8000a04 <MX_GPIO_Init+0xec>)
 8000954:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000958:	6313      	str	r3, [r2, #48]	@ 0x30
 800095a:	4b2a      	ldr	r3, [pc, #168]	@ (8000a04 <MX_GPIO_Init+0xec>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	4b26      	ldr	r3, [pc, #152]	@ (8000a04 <MX_GPIO_Init+0xec>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	4a25      	ldr	r2, [pc, #148]	@ (8000a04 <MX_GPIO_Init+0xec>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6313      	str	r3, [r2, #48]	@ 0x30
 8000976:	4b23      	ldr	r3, [pc, #140]	@ (8000a04 <MX_GPIO_Init+0xec>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	4b1f      	ldr	r3, [pc, #124]	@ (8000a04 <MX_GPIO_Init+0xec>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	4a1e      	ldr	r2, [pc, #120]	@ (8000a04 <MX_GPIO_Init+0xec>)
 800098c:	f043 0302 	orr.w	r3, r3, #2
 8000990:	6313      	str	r3, [r2, #48]	@ 0x30
 8000992:	4b1c      	ldr	r3, [pc, #112]	@ (8000a04 <MX_GPIO_Init+0xec>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	f003 0302 	and.w	r3, r3, #2
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	2120      	movs	r1, #32
 80009a2:	4819      	ldr	r0, [pc, #100]	@ (8000a08 <MX_GPIO_Init+0xf0>)
 80009a4:	f001 ff46 	bl	8002834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009ae:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	4619      	mov	r1, r3
 80009be:	4813      	ldr	r0, [pc, #76]	@ (8000a0c <MX_GPIO_Init+0xf4>)
 80009c0:	f001 fdb4 	bl	800252c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009c4:	2320      	movs	r3, #32
 80009c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c8:	2301      	movs	r3, #1
 80009ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2300      	movs	r3, #0
 80009d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	4619      	mov	r1, r3
 80009da:	480b      	ldr	r0, [pc, #44]	@ (8000a08 <MX_GPIO_Init+0xf0>)
 80009dc:	f001 fda6 	bl	800252c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	4619      	mov	r1, r3
 80009f4:	4804      	ldr	r0, [pc, #16]	@ (8000a08 <MX_GPIO_Init+0xf0>)
 80009f6:	f001 fd99 	bl	800252c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009fa:	bf00      	nop
 80009fc:	3728      	adds	r7, #40	@ 0x28
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40020000 	.word	0x40020000
 8000a0c:	40020800 	.word	0x40020800

08000a10 <MX_GPIO_LED_ON>:

/* USER CODE BEGIN 4 */
void MX_GPIO_LED_ON(int pin)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_SET);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4803      	ldr	r0, [pc, #12]	@ (8000a30 <MX_GPIO_LED_ON+0x20>)
 8000a22:	f001 ff07 	bl	8002834 <HAL_GPIO_WritePin>
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40020000 	.word	0x40020000

08000a34 <MX_GPIO_LED_OFF>:

void MX_GPIO_LED_OFF(int pin)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_RESET);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	2200      	movs	r2, #0
 8000a42:	4619      	mov	r1, r3
 8000a44:	4803      	ldr	r0, [pc, #12]	@ (8000a54 <MX_GPIO_LED_OFF+0x20>)
 8000a46:	f001 fef5 	bl	8002834 <HAL_GPIO_WritePin>
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40020000 	.word	0x40020000

08000a58 <HAL_IncTick>:

void HAL_IncTick(void) // HAL_getTick()
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
    uwTick += uwTickFreq;
 8000a5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000a94 <HAL_IncTick+0x3c>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b0d      	ldr	r3, [pc, #52]	@ (8000a98 <HAL_IncTick+0x40>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4413      	add	r3, r2
 8000a68:	4a0b      	ldr	r2, [pc, #44]	@ (8000a98 <HAL_IncTick+0x40>)
 8000a6a:	6013      	str	r3, [r2, #0]
    if((uwTick % 50)==0) //100mS tick
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a98 <HAL_IncTick+0x40>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	4b0a      	ldr	r3, [pc, #40]	@ (8000a9c <HAL_IncTick+0x44>)
 8000a72:	fba3 1302 	umull	r1, r3, r3, r2
 8000a76:	091b      	lsrs	r3, r3, #4
 8000a78:	2132      	movs	r1, #50	@ 0x32
 8000a7a:	fb01 f303 	mul.w	r3, r1, r3
 8000a7e:	1ad3      	subs	r3, r2, r3
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d102      	bne.n	8000a8a <HAL_IncTick+0x32>
    {
    	jsFlag = SET;
 8000a84:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <HAL_IncTick+0x48>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	701a      	strb	r2, [r3, #0]
    }
}
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	20000008 	.word	0x20000008
 8000a98:	20000238 	.word	0x20000238
 8000a9c:	51eb851f 	.word	0x51eb851f
 8000aa0:	20000226 	.word	0x20000226

08000aa4 <bluetooth_Event>:

void bluetooth_Event()
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b0a4      	sub	sp, #144	@ 0x90
 8000aa8:	af02      	add	r7, sp, #8

  int i=0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  char * pToken;
  char * pArray[ARR_CNT]={0};
 8000ab0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  char recvBuf[CMD_SIZE]={0};
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000ac4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000ac8:	222e      	movs	r2, #46	@ 0x2e
 8000aca:	2100      	movs	r1, #0
 8000acc:	4618      	mov	r0, r3
 8000ace:	f003 fde3 	bl	8004698 <memset>
  char sendBuf[CMD_SIZE]={0};
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	f107 0308 	add.w	r3, r7, #8
 8000ada:	222e      	movs	r2, #46	@ 0x2e
 8000adc:	2100      	movs	r1, #0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f003 fdda 	bl	8004698 <memset>
  strcpy(recvBuf,btData);
 8000ae4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ae8:	493c      	ldr	r1, [pc, #240]	@ (8000bdc <bluetooth_Event+0x138>)
 8000aea:	4618      	mov	r0, r3
 8000aec:	f003 feab 	bl	8004846 <strcpy>

  printf("btData : %s\r\n",btData);
 8000af0:	493a      	ldr	r1, [pc, #232]	@ (8000bdc <bluetooth_Event+0x138>)
 8000af2:	483b      	ldr	r0, [pc, #236]	@ (8000be0 <bluetooth_Event+0x13c>)
 8000af4:	f003 fc68 	bl	80043c8 <iprintf>

  pToken = strtok(recvBuf,"[@]");
 8000af8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000afc:	4939      	ldr	r1, [pc, #228]	@ (8000be4 <bluetooth_Event+0x140>)
 8000afe:	4618      	mov	r0, r3
 8000b00:	f003 fdd2 	bl	80046a8 <strtok>
 8000b04:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  while(pToken != NULL)
 8000b08:	e017      	b.n	8000b3a <bluetooth_Event+0x96>
  {
    pArray[i] =  pToken;
 8000b0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	3388      	adds	r3, #136	@ 0x88
 8000b12:	443b      	add	r3, r7
 8000b14:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8000b18:	f843 2c1c 	str.w	r2, [r3, #-28]
    if(++i >= ARR_CNT)
 8000b1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000b20:	3301      	adds	r3, #1
 8000b22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000b26:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000b2a:	2b04      	cmp	r3, #4
 8000b2c:	dc0a      	bgt.n	8000b44 <bluetooth_Event+0xa0>
      break;
    pToken = strtok(NULL,"[@]");
 8000b2e:	492d      	ldr	r1, [pc, #180]	@ (8000be4 <bluetooth_Event+0x140>)
 8000b30:	2000      	movs	r0, #0
 8000b32:	f003 fdb9 	bl	80046a8 <strtok>
 8000b36:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  while(pToken != NULL)
 8000b3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d1e3      	bne.n	8000b0a <bluetooth_Event+0x66>
 8000b42:	e000      	b.n	8000b46 <bluetooth_Event+0xa2>
      break;
 8000b44:	bf00      	nop
  }
//  printf("pArray[0] : %s\r\n",pArray[0]);
//  printf("pArray[1] : %s\r\n",pArray[1]);
//  printf("pArray[2] : %s\r\n",pArray[2]);

  if(!strcmp(pArray[1],"LED"))
 8000b46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000b48:	4927      	ldr	r1, [pc, #156]	@ (8000be8 <bluetooth_Event+0x144>)
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff fb48 	bl	80001e0 <strcmp>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d117      	bne.n	8000b86 <bluetooth_Event+0xe2>
  {
		if(!strcmp(pArray[2],"ON"))
 8000b56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000b58:	4924      	ldr	r1, [pc, #144]	@ (8000bec <bluetooth_Event+0x148>)
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff fb40 	bl	80001e0 <strcmp>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d103      	bne.n	8000b6e <bluetooth_Event+0xca>
		{
			MX_GPIO_LED_ON(LD2_Pin);
 8000b66:	2020      	movs	r0, #32
 8000b68:	f7ff ff52 	bl	8000a10 <MX_GPIO_LED_ON>
 8000b6c:	e01b      	b.n	8000ba6 <bluetooth_Event+0x102>
		}
		else if(!strcmp(pArray[2],"OFF"))
 8000b6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000b70:	491f      	ldr	r1, [pc, #124]	@ (8000bf0 <bluetooth_Event+0x14c>)
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff fb34 	bl	80001e0 <strcmp>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d113      	bne.n	8000ba6 <bluetooth_Event+0x102>
		{
			MX_GPIO_LED_OFF(LD2_Pin);
 8000b7e:	2020      	movs	r0, #32
 8000b80:	f7ff ff58 	bl	8000a34 <MX_GPIO_LED_OFF>
 8000b84:	e00f      	b.n	8000ba6 <bluetooth_Event+0x102>
		}
  }
  else if(!strncmp(pArray[1]," New conn",sizeof(" New conn")))
 8000b86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000b88:	491a      	ldr	r1, [pc, #104]	@ (8000bf4 <bluetooth_Event+0x150>)
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff fb28 	bl	80001e0 <strcmp>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d01d      	beq.n	8000bd2 <bluetooth_Event+0x12e>
  {
      return;
  }
  else if(!strncmp(pArray[1]," Already log",sizeof(" Already log")))
 8000b96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000b98:	4917      	ldr	r1, [pc, #92]	@ (8000bf8 <bluetooth_Event+0x154>)
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff fb20 	bl	80001e0 <strcmp>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
  {
      return;
  }
  else
      return;
 8000ba4:	e016      	b.n	8000bd4 <bluetooth_Event+0x130>

  sprintf(sendBuf,"[%s]%s@%s\n",pArray[0],pArray[1],pArray[2]);
 8000ba6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000ba8:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8000baa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000bac:	1d38      	adds	r0, r7, #4
 8000bae:	9300      	str	r3, [sp, #0]
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	4912      	ldr	r1, [pc, #72]	@ (8000bfc <bluetooth_Event+0x158>)
 8000bb4:	f003 fc78 	bl	80044a8 <siprintf>
  HAL_UART_Transmit(&huart6, (uint8_t *)sendBuf, strlen(sendBuf), 0xFFFF);
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fb1a 	bl	80001f4 <strlen>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	b29a      	uxth	r2, r3
 8000bc4:	1d39      	adds	r1, r7, #4
 8000bc6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000bca:	480d      	ldr	r0, [pc, #52]	@ (8000c00 <bluetooth_Event+0x15c>)
 8000bcc:	f002 fb34 	bl	8003238 <HAL_UART_Transmit>
 8000bd0:	e000      	b.n	8000bd4 <bluetooth_Event+0x130>
      return;
 8000bd2:	bf00      	nop

}
 8000bd4:	3788      	adds	r7, #136	@ 0x88
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200001f4 	.word	0x200001f4
 8000be0:	0800572c 	.word	0x0800572c
 8000be4:	0800573c 	.word	0x0800573c
 8000be8:	08005740 	.word	0x08005740
 8000bec:	08005744 	.word	0x08005744
 8000bf0:	08005748 	.word	0x08005748
 8000bf4:	0800574c 	.word	0x0800574c
 8000bf8:	08005758 	.word	0x08005758
 8000bfc:	08005768 	.word	0x08005768
 8000c00:	20000174 	.word	0x20000174

08000c04 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART6 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000c0c:	1d39      	adds	r1, r7, #4
 8000c0e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c12:	2201      	movs	r2, #1
 8000c14:	4803      	ldr	r0, [pc, #12]	@ (8000c24 <__io_putchar+0x20>)
 8000c16:	f002 fb0f 	bl	8003238 <HAL_UART_Transmit>

  return ch;
 8000c1a:	687b      	ldr	r3, [r7, #4]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	2000012c 	.word	0x2000012c

08000c28 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART2)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a2e      	ldr	r2, [pc, #184]	@ (8000cf0 <HAL_UART_RxCpltCallback+0xc8>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d128      	bne.n	8000c8c <HAL_UART_RxCpltCallback+0x64>
    {
    	static int i=0;
    	rx2Data[i] = rx2char;
 8000c3a:	4b2e      	ldr	r3, [pc, #184]	@ (8000cf4 <HAL_UART_RxCpltCallback+0xcc>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a2e      	ldr	r2, [pc, #184]	@ (8000cf8 <HAL_UART_RxCpltCallback+0xd0>)
 8000c40:	7811      	ldrb	r1, [r2, #0]
 8000c42:	4a2e      	ldr	r2, [pc, #184]	@ (8000cfc <HAL_UART_RxCpltCallback+0xd4>)
 8000c44:	54d1      	strb	r1, [r2, r3]
    	if((rx2Data[i] == '\r')||(btData[i] == '\n'))
 8000c46:	4b2b      	ldr	r3, [pc, #172]	@ (8000cf4 <HAL_UART_RxCpltCallback+0xcc>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a2c      	ldr	r2, [pc, #176]	@ (8000cfc <HAL_UART_RxCpltCallback+0xd4>)
 8000c4c:	5cd3      	ldrb	r3, [r2, r3]
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	2b0d      	cmp	r3, #13
 8000c52:	d005      	beq.n	8000c60 <HAL_UART_RxCpltCallback+0x38>
 8000c54:	4b27      	ldr	r3, [pc, #156]	@ (8000cf4 <HAL_UART_RxCpltCallback+0xcc>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a29      	ldr	r2, [pc, #164]	@ (8000d00 <HAL_UART_RxCpltCallback+0xd8>)
 8000c5a:	5cd3      	ldrb	r3, [r2, r3]
 8000c5c:	2b0a      	cmp	r3, #10
 8000c5e:	d10b      	bne.n	8000c78 <HAL_UART_RxCpltCallback+0x50>
    	{
    		rx2Data[i] = '\0';
 8000c60:	4b24      	ldr	r3, [pc, #144]	@ (8000cf4 <HAL_UART_RxCpltCallback+0xcc>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a25      	ldr	r2, [pc, #148]	@ (8000cfc <HAL_UART_RxCpltCallback+0xd4>)
 8000c66:	2100      	movs	r1, #0
 8000c68:	54d1      	strb	r1, [r2, r3]
    		rx2Flag = 1;
 8000c6a:	4b26      	ldr	r3, [pc, #152]	@ (8000d04 <HAL_UART_RxCpltCallback+0xdc>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	701a      	strb	r2, [r3, #0]
    		i = 0;
 8000c70:	4b20      	ldr	r3, [pc, #128]	@ (8000cf4 <HAL_UART_RxCpltCallback+0xcc>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	e004      	b.n	8000c82 <HAL_UART_RxCpltCallback+0x5a>
    	}
    	else
    	{
    		i++;
 8000c78:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf4 <HAL_UART_RxCpltCallback+0xcc>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	4a1d      	ldr	r2, [pc, #116]	@ (8000cf4 <HAL_UART_RxCpltCallback+0xcc>)
 8000c80:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(&huart2, &rx2char,1);
 8000c82:	2201      	movs	r2, #1
 8000c84:	491c      	ldr	r1, [pc, #112]	@ (8000cf8 <HAL_UART_RxCpltCallback+0xd0>)
 8000c86:	4820      	ldr	r0, [pc, #128]	@ (8000d08 <HAL_UART_RxCpltCallback+0xe0>)
 8000c88:	f002 fb61 	bl	800334e <HAL_UART_Receive_IT>
    }
    if(huart->Instance == USART6)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a1e      	ldr	r2, [pc, #120]	@ (8000d0c <HAL_UART_RxCpltCallback+0xe4>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d127      	bne.n	8000ce6 <HAL_UART_RxCpltCallback+0xbe>
    {
    	static int i=0;
    	btData[i] = btchar;
 8000c96:	4b1e      	ldr	r3, [pc, #120]	@ (8000d10 <HAL_UART_RxCpltCallback+0xe8>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a1e      	ldr	r2, [pc, #120]	@ (8000d14 <HAL_UART_RxCpltCallback+0xec>)
 8000c9c:	7811      	ldrb	r1, [r2, #0]
 8000c9e:	4a18      	ldr	r2, [pc, #96]	@ (8000d00 <HAL_UART_RxCpltCallback+0xd8>)
 8000ca0:	54d1      	strb	r1, [r2, r3]
    	if((btData[i] == '\n') || btData[i] == '\r')
 8000ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d10 <HAL_UART_RxCpltCallback+0xe8>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a16      	ldr	r2, [pc, #88]	@ (8000d00 <HAL_UART_RxCpltCallback+0xd8>)
 8000ca8:	5cd3      	ldrb	r3, [r2, r3]
 8000caa:	2b0a      	cmp	r3, #10
 8000cac:	d005      	beq.n	8000cba <HAL_UART_RxCpltCallback+0x92>
 8000cae:	4b18      	ldr	r3, [pc, #96]	@ (8000d10 <HAL_UART_RxCpltCallback+0xe8>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a13      	ldr	r2, [pc, #76]	@ (8000d00 <HAL_UART_RxCpltCallback+0xd8>)
 8000cb4:	5cd3      	ldrb	r3, [r2, r3]
 8000cb6:	2b0d      	cmp	r3, #13
 8000cb8:	d10b      	bne.n	8000cd2 <HAL_UART_RxCpltCallback+0xaa>
    	{
    		btData[i] = '\0';
 8000cba:	4b15      	ldr	r3, [pc, #84]	@ (8000d10 <HAL_UART_RxCpltCallback+0xe8>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a10      	ldr	r2, [pc, #64]	@ (8000d00 <HAL_UART_RxCpltCallback+0xd8>)
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	54d1      	strb	r1, [r2, r3]
    		btFlag = 1;
 8000cc4:	4b14      	ldr	r3, [pc, #80]	@ (8000d18 <HAL_UART_RxCpltCallback+0xf0>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	701a      	strb	r2, [r3, #0]
    		i = 0;
 8000cca:	4b11      	ldr	r3, [pc, #68]	@ (8000d10 <HAL_UART_RxCpltCallback+0xe8>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	e004      	b.n	8000cdc <HAL_UART_RxCpltCallback+0xb4>
    	}
    	else
    	{
    		i++;
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d10 <HAL_UART_RxCpltCallback+0xe8>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d10 <HAL_UART_RxCpltCallback+0xe8>)
 8000cda:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(&huart6, &btchar,1);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	490d      	ldr	r1, [pc, #52]	@ (8000d14 <HAL_UART_RxCpltCallback+0xec>)
 8000ce0:	480e      	ldr	r0, [pc, #56]	@ (8000d1c <HAL_UART_RxCpltCallback+0xf4>)
 8000ce2:	f002 fb34 	bl	800334e <HAL_UART_Receive_IT>
    }
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40004400 	.word	0x40004400
 8000cf4:	2000022c 	.word	0x2000022c
 8000cf8:	200001bc 	.word	0x200001bc
 8000cfc:	200001c0 	.word	0x200001c0
 8000d00:	200001f4 	.word	0x200001f4
 8000d04:	200001bd 	.word	0x200001bd
 8000d08:	2000012c 	.word	0x2000012c
 8000d0c:	40011400 	.word	0x40011400
 8000d10:	20000230 	.word	0x20000230
 8000d14:	200001f3 	.word	0x200001f3
 8000d18:	200001f2 	.word	0x200001f2
 8000d1c:	20000174 	.word	0x20000174

08000d20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d24:	b672      	cpsid	i
}
 8000d26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <Error_Handler+0x8>

08000d2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	607b      	str	r3, [r7, #4]
 8000d36:	4b10      	ldr	r3, [pc, #64]	@ (8000d78 <HAL_MspInit+0x4c>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d3a:	4a0f      	ldr	r2, [pc, #60]	@ (8000d78 <HAL_MspInit+0x4c>)
 8000d3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d40:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d42:	4b0d      	ldr	r3, [pc, #52]	@ (8000d78 <HAL_MspInit+0x4c>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	603b      	str	r3, [r7, #0]
 8000d52:	4b09      	ldr	r3, [pc, #36]	@ (8000d78 <HAL_MspInit+0x4c>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d56:	4a08      	ldr	r2, [pc, #32]	@ (8000d78 <HAL_MspInit+0x4c>)
 8000d58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d5e:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <HAL_MspInit+0x4c>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d66:	603b      	str	r3, [r7, #0]
 8000d68:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d6a:	2007      	movs	r0, #7
 8000d6c:	f000 ff9a 	bl	8001ca4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40023800 	.word	0x40023800

08000d7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08a      	sub	sp, #40	@ 0x28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a2f      	ldr	r2, [pc, #188]	@ (8000e58 <HAL_ADC_MspInit+0xdc>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d157      	bne.n	8000e4e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	4b2e      	ldr	r3, [pc, #184]	@ (8000e5c <HAL_ADC_MspInit+0xe0>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000da6:	4a2d      	ldr	r2, [pc, #180]	@ (8000e5c <HAL_ADC_MspInit+0xe0>)
 8000da8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dae:	4b2b      	ldr	r3, [pc, #172]	@ (8000e5c <HAL_ADC_MspInit+0xe0>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000db2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	4b27      	ldr	r3, [pc, #156]	@ (8000e5c <HAL_ADC_MspInit+0xe0>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	4a26      	ldr	r2, [pc, #152]	@ (8000e5c <HAL_ADC_MspInit+0xe0>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dca:	4b24      	ldr	r3, [pc, #144]	@ (8000e5c <HAL_ADC_MspInit+0xe0>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	4619      	mov	r1, r3
 8000de8:	481d      	ldr	r0, [pc, #116]	@ (8000e60 <HAL_ADC_MspInit+0xe4>)
 8000dea:	f001 fb9f 	bl	800252c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000dee:	4b1d      	ldr	r3, [pc, #116]	@ (8000e64 <HAL_ADC_MspInit+0xe8>)
 8000df0:	4a1d      	ldr	r2, [pc, #116]	@ (8000e68 <HAL_ADC_MspInit+0xec>)
 8000df2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000df4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e64 <HAL_ADC_MspInit+0xe8>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dfa:	4b1a      	ldr	r3, [pc, #104]	@ (8000e64 <HAL_ADC_MspInit+0xe8>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e00:	4b18      	ldr	r3, [pc, #96]	@ (8000e64 <HAL_ADC_MspInit+0xe8>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e06:	4b17      	ldr	r3, [pc, #92]	@ (8000e64 <HAL_ADC_MspInit+0xe8>)
 8000e08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e0c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e0e:	4b15      	ldr	r3, [pc, #84]	@ (8000e64 <HAL_ADC_MspInit+0xe8>)
 8000e10:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e14:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e16:	4b13      	ldr	r3, [pc, #76]	@ (8000e64 <HAL_ADC_MspInit+0xe8>)
 8000e18:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e1c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e1e:	4b11      	ldr	r3, [pc, #68]	@ (8000e64 <HAL_ADC_MspInit+0xe8>)
 8000e20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e24:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e26:	4b0f      	ldr	r3, [pc, #60]	@ (8000e64 <HAL_ADC_MspInit+0xe8>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e2c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e64 <HAL_ADC_MspInit+0xe8>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e32:	480c      	ldr	r0, [pc, #48]	@ (8000e64 <HAL_ADC_MspInit+0xe8>)
 8000e34:	f000 ff78 	bl	8001d28 <HAL_DMA_Init>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000e3e:	f7ff ff6f 	bl	8000d20 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a07      	ldr	r2, [pc, #28]	@ (8000e64 <HAL_ADC_MspInit+0xe8>)
 8000e46:	639a      	str	r2, [r3, #56]	@ 0x38
 8000e48:	4a06      	ldr	r2, [pc, #24]	@ (8000e64 <HAL_ADC_MspInit+0xe8>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e4e:	bf00      	nop
 8000e50:	3728      	adds	r7, #40	@ 0x28
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40012000 	.word	0x40012000
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40020000 	.word	0x40020000
 8000e64:	200000cc 	.word	0x200000cc
 8000e68:	40026410 	.word	0x40026410

08000e6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08c      	sub	sp, #48	@ 0x30
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 031c 	add.w	r3, r7, #28
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a3a      	ldr	r2, [pc, #232]	@ (8000f74 <HAL_UART_MspInit+0x108>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d134      	bne.n	8000ef8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61bb      	str	r3, [r7, #24]
 8000e92:	4b39      	ldr	r3, [pc, #228]	@ (8000f78 <HAL_UART_MspInit+0x10c>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e96:	4a38      	ldr	r2, [pc, #224]	@ (8000f78 <HAL_UART_MspInit+0x10c>)
 8000e98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e9e:	4b36      	ldr	r3, [pc, #216]	@ (8000f78 <HAL_UART_MspInit+0x10c>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ea6:	61bb      	str	r3, [r7, #24]
 8000ea8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
 8000eae:	4b32      	ldr	r3, [pc, #200]	@ (8000f78 <HAL_UART_MspInit+0x10c>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb2:	4a31      	ldr	r2, [pc, #196]	@ (8000f78 <HAL_UART_MspInit+0x10c>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eba:	4b2f      	ldr	r3, [pc, #188]	@ (8000f78 <HAL_UART_MspInit+0x10c>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	617b      	str	r3, [r7, #20]
 8000ec4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ec6:	230c      	movs	r3, #12
 8000ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ed6:	2307      	movs	r3, #7
 8000ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eda:	f107 031c 	add.w	r3, r7, #28
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4826      	ldr	r0, [pc, #152]	@ (8000f7c <HAL_UART_MspInit+0x110>)
 8000ee2:	f001 fb23 	bl	800252c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2100      	movs	r1, #0
 8000eea:	2026      	movs	r0, #38	@ 0x26
 8000eec:	f000 fee5 	bl	8001cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ef0:	2026      	movs	r0, #38	@ 0x26
 8000ef2:	f000 fefe 	bl	8001cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000ef6:	e038      	b.n	8000f6a <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a20      	ldr	r2, [pc, #128]	@ (8000f80 <HAL_UART_MspInit+0x114>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d133      	bne.n	8000f6a <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	4b1c      	ldr	r3, [pc, #112]	@ (8000f78 <HAL_UART_MspInit+0x10c>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0a:	4a1b      	ldr	r2, [pc, #108]	@ (8000f78 <HAL_UART_MspInit+0x10c>)
 8000f0c:	f043 0320 	orr.w	r3, r3, #32
 8000f10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f12:	4b19      	ldr	r3, [pc, #100]	@ (8000f78 <HAL_UART_MspInit+0x10c>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f16:	f003 0320 	and.w	r3, r3, #32
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	4b15      	ldr	r3, [pc, #84]	@ (8000f78 <HAL_UART_MspInit+0x10c>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f26:	4a14      	ldr	r2, [pc, #80]	@ (8000f78 <HAL_UART_MspInit+0x10c>)
 8000f28:	f043 0304 	orr.w	r3, r3, #4
 8000f2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f2e:	4b12      	ldr	r3, [pc, #72]	@ (8000f78 <HAL_UART_MspInit+0x10c>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f32:	f003 0304 	and.w	r3, r3, #4
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f3a:	23c0      	movs	r3, #192	@ 0xc0
 8000f3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f46:	2303      	movs	r3, #3
 8000f48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000f4a:	2308      	movs	r3, #8
 8000f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f4e:	f107 031c 	add.w	r3, r7, #28
 8000f52:	4619      	mov	r1, r3
 8000f54:	480b      	ldr	r0, [pc, #44]	@ (8000f84 <HAL_UART_MspInit+0x118>)
 8000f56:	f001 fae9 	bl	800252c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	2047      	movs	r0, #71	@ 0x47
 8000f60:	f000 feab 	bl	8001cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000f64:	2047      	movs	r0, #71	@ 0x47
 8000f66:	f000 fec4 	bl	8001cf2 <HAL_NVIC_EnableIRQ>
}
 8000f6a:	bf00      	nop
 8000f6c:	3730      	adds	r7, #48	@ 0x30
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40004400 	.word	0x40004400
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40020000 	.word	0x40020000
 8000f80:	40011400 	.word	0x40011400
 8000f84:	40020800 	.word	0x40020800

08000f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f8c:	bf00      	nop
 8000f8e:	e7fd      	b.n	8000f8c <NMI_Handler+0x4>

08000f90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f94:	bf00      	nop
 8000f96:	e7fd      	b.n	8000f94 <HardFault_Handler+0x4>

08000f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f9c:	bf00      	nop
 8000f9e:	e7fd      	b.n	8000f9c <MemManage_Handler+0x4>

08000fa0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa4:	bf00      	nop
 8000fa6:	e7fd      	b.n	8000fa4 <BusFault_Handler+0x4>

08000fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <UsageFault_Handler+0x4>

08000fb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fde:	f7ff fd3b 	bl	8000a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
	...

08000fe8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fec:	4802      	ldr	r0, [pc, #8]	@ (8000ff8 <USART2_IRQHandler+0x10>)
 8000fee:	f002 f9d3 	bl	8003398 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	2000012c 	.word	0x2000012c

08000ffc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001000:	4802      	ldr	r0, [pc, #8]	@ (800100c <DMA2_Stream0_IRQHandler+0x10>)
 8001002:	f001 f829 	bl	8002058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200000cc 	.word	0x200000cc

08001010 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001014:	4802      	ldr	r0, [pc, #8]	@ (8001020 <USART6_IRQHandler+0x10>)
 8001016:	f002 f9bf 	bl	8003398 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000174 	.word	0x20000174

08001024 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return 1;
 8001028:	2301      	movs	r3, #1
}
 800102a:	4618      	mov	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <_kill>:

int _kill(int pid, int sig)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800103e:	f003 fbd5 	bl	80047ec <__errno>
 8001042:	4603      	mov	r3, r0
 8001044:	2216      	movs	r2, #22
 8001046:	601a      	str	r2, [r3, #0]
  return -1;
 8001048:	f04f 33ff 	mov.w	r3, #4294967295
}
 800104c:	4618      	mov	r0, r3
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <_exit>:

void _exit (int status)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800105c:	f04f 31ff 	mov.w	r1, #4294967295
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff ffe7 	bl	8001034 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001066:	bf00      	nop
 8001068:	e7fd      	b.n	8001066 <_exit+0x12>

0800106a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b086      	sub	sp, #24
 800106e:	af00      	add	r7, sp, #0
 8001070:	60f8      	str	r0, [r7, #12]
 8001072:	60b9      	str	r1, [r7, #8]
 8001074:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
 800107a:	e00a      	b.n	8001092 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800107c:	f3af 8000 	nop.w
 8001080:	4601      	mov	r1, r0
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	1c5a      	adds	r2, r3, #1
 8001086:	60ba      	str	r2, [r7, #8]
 8001088:	b2ca      	uxtb	r2, r1
 800108a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	3301      	adds	r3, #1
 8001090:	617b      	str	r3, [r7, #20]
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	429a      	cmp	r2, r3
 8001098:	dbf0      	blt.n	800107c <_read+0x12>
  }

  return len;
 800109a:	687b      	ldr	r3, [r7, #4]
}
 800109c:	4618      	mov	r0, r3
 800109e:	3718      	adds	r7, #24
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
 80010b4:	e009      	b.n	80010ca <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	1c5a      	adds	r2, r3, #1
 80010ba:	60ba      	str	r2, [r7, #8]
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fda0 	bl	8000c04 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	3301      	adds	r3, #1
 80010c8:	617b      	str	r3, [r7, #20]
 80010ca:	697a      	ldr	r2, [r7, #20]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	dbf1      	blt.n	80010b6 <_write+0x12>
  }
  return len;
 80010d2:	687b      	ldr	r3, [r7, #4]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3718      	adds	r7, #24
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <_close>:

int _close(int file)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001104:	605a      	str	r2, [r3, #4]
  return 0;
 8001106:	2300      	movs	r3, #0
}
 8001108:	4618      	mov	r0, r3
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <_isatty>:

int _isatty(int file)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800111c:	2301      	movs	r3, #1
}
 800111e:	4618      	mov	r0, r3
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800112a:	b480      	push	{r7}
 800112c:	b085      	sub	sp, #20
 800112e:	af00      	add	r7, sp, #0
 8001130:	60f8      	str	r0, [r7, #12]
 8001132:	60b9      	str	r1, [r7, #8]
 8001134:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001136:	2300      	movs	r3, #0
}
 8001138:	4618      	mov	r0, r3
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800114c:	4a14      	ldr	r2, [pc, #80]	@ (80011a0 <_sbrk+0x5c>)
 800114e:	4b15      	ldr	r3, [pc, #84]	@ (80011a4 <_sbrk+0x60>)
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001158:	4b13      	ldr	r3, [pc, #76]	@ (80011a8 <_sbrk+0x64>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d102      	bne.n	8001166 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001160:	4b11      	ldr	r3, [pc, #68]	@ (80011a8 <_sbrk+0x64>)
 8001162:	4a12      	ldr	r2, [pc, #72]	@ (80011ac <_sbrk+0x68>)
 8001164:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001166:	4b10      	ldr	r3, [pc, #64]	@ (80011a8 <_sbrk+0x64>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4413      	add	r3, r2
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	429a      	cmp	r2, r3
 8001172:	d207      	bcs.n	8001184 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001174:	f003 fb3a 	bl	80047ec <__errno>
 8001178:	4603      	mov	r3, r0
 800117a:	220c      	movs	r2, #12
 800117c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800117e:	f04f 33ff 	mov.w	r3, #4294967295
 8001182:	e009      	b.n	8001198 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001184:	4b08      	ldr	r3, [pc, #32]	@ (80011a8 <_sbrk+0x64>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800118a:	4b07      	ldr	r3, [pc, #28]	@ (80011a8 <_sbrk+0x64>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4413      	add	r3, r2
 8001192:	4a05      	ldr	r2, [pc, #20]	@ (80011a8 <_sbrk+0x64>)
 8001194:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001196:	68fb      	ldr	r3, [r7, #12]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20020000 	.word	0x20020000
 80011a4:	00000400 	.word	0x00000400
 80011a8:	20000234 	.word	0x20000234
 80011ac:	20000388 	.word	0x20000388

080011b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011b4:	4b06      	ldr	r3, [pc, #24]	@ (80011d0 <SystemInit+0x20>)
 80011b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011ba:	4a05      	ldr	r2, [pc, #20]	@ (80011d0 <SystemInit+0x20>)
 80011bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800120c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011d8:	f7ff ffea 	bl	80011b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011dc:	480c      	ldr	r0, [pc, #48]	@ (8001210 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011de:	490d      	ldr	r1, [pc, #52]	@ (8001214 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001218 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e4:	e002      	b.n	80011ec <LoopCopyDataInit>

080011e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ea:	3304      	adds	r3, #4

080011ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f0:	d3f9      	bcc.n	80011e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011f2:	4a0a      	ldr	r2, [pc, #40]	@ (800121c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001220 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f8:	e001      	b.n	80011fe <LoopFillZerobss>

080011fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011fc:	3204      	adds	r2, #4

080011fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001200:	d3fb      	bcc.n	80011fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001202:	f003 faf9 	bl	80047f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001206:	f7ff f9cb 	bl	80005a0 <main>
  bx  lr    
 800120a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800120c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001210:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001214:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001218:	08005884 	.word	0x08005884
  ldr r2, =_sbss
 800121c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001220:	20000388 	.word	0x20000388

08001224 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001224:	e7fe      	b.n	8001224 <ADC_IRQHandler>
	...

08001228 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800122c:	4b0e      	ldr	r3, [pc, #56]	@ (8001268 <HAL_Init+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0d      	ldr	r2, [pc, #52]	@ (8001268 <HAL_Init+0x40>)
 8001232:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001236:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001238:	4b0b      	ldr	r3, [pc, #44]	@ (8001268 <HAL_Init+0x40>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a0a      	ldr	r2, [pc, #40]	@ (8001268 <HAL_Init+0x40>)
 800123e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001242:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001244:	4b08      	ldr	r3, [pc, #32]	@ (8001268 <HAL_Init+0x40>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a07      	ldr	r2, [pc, #28]	@ (8001268 <HAL_Init+0x40>)
 800124a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800124e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001250:	2003      	movs	r0, #3
 8001252:	f000 fd27 	bl	8001ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001256:	2000      	movs	r0, #0
 8001258:	f000 f808 	bl	800126c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800125c:	f7ff fd66 	bl	8000d2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40023c00 	.word	0x40023c00

0800126c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001274:	4b12      	ldr	r3, [pc, #72]	@ (80012c0 <HAL_InitTick+0x54>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b12      	ldr	r3, [pc, #72]	@ (80012c4 <HAL_InitTick+0x58>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	4619      	mov	r1, r3
 800127e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001282:	fbb3 f3f1 	udiv	r3, r3, r1
 8001286:	fbb2 f3f3 	udiv	r3, r2, r3
 800128a:	4618      	mov	r0, r3
 800128c:	f000 fd3f 	bl	8001d0e <HAL_SYSTICK_Config>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e00e      	b.n	80012b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2b0f      	cmp	r3, #15
 800129e:	d80a      	bhi.n	80012b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a0:	2200      	movs	r2, #0
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	f04f 30ff 	mov.w	r0, #4294967295
 80012a8:	f000 fd07 	bl	8001cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012ac:	4a06      	ldr	r2, [pc, #24]	@ (80012c8 <HAL_InitTick+0x5c>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	e000      	b.n	80012b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000000 	.word	0x20000000
 80012c4:	20000008 	.word	0x20000008
 80012c8:	20000004 	.word	0x20000004

080012cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return uwTick;
 80012d0:	4b03      	ldr	r3, [pc, #12]	@ (80012e0 <HAL_GetTick+0x14>)
 80012d2:	681b      	ldr	r3, [r3, #0]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000238 	.word	0x20000238

080012e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012ec:	2300      	movs	r3, #0
 80012ee:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e033      	b.n	8001362 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d109      	bne.n	8001316 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff fd3a 	bl	8000d7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131a:	f003 0310 	and.w	r3, r3, #16
 800131e:	2b00      	cmp	r3, #0
 8001320:	d118      	bne.n	8001354 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001326:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800132a:	f023 0302 	bic.w	r3, r3, #2
 800132e:	f043 0202 	orr.w	r2, r3, #2
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f000 fa66 	bl	8001808 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001346:	f023 0303 	bic.w	r3, r3, #3
 800134a:	f043 0201 	orr.w	r2, r3, #1
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	641a      	str	r2, [r3, #64]	@ 0x40
 8001352:	e001      	b.n	8001358 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001360:	7bfb      	ldrb	r3, [r7, #15]
}
 8001362:	4618      	mov	r0, r3
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
	...

0800136c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001378:	2300      	movs	r3, #0
 800137a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001382:	2b01      	cmp	r3, #1
 8001384:	d101      	bne.n	800138a <HAL_ADC_Start_DMA+0x1e>
 8001386:	2302      	movs	r3, #2
 8001388:	e0ce      	b.n	8001528 <HAL_ADC_Start_DMA+0x1bc>
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	2201      	movs	r2, #1
 800138e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	2b01      	cmp	r3, #1
 800139e:	d018      	beq.n	80013d2 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	689a      	ldr	r2, [r3, #8]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f042 0201 	orr.w	r2, r2, #1
 80013ae:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013b0:	4b5f      	ldr	r3, [pc, #380]	@ (8001530 <HAL_ADC_Start_DMA+0x1c4>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a5f      	ldr	r2, [pc, #380]	@ (8001534 <HAL_ADC_Start_DMA+0x1c8>)
 80013b6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ba:	0c9a      	lsrs	r2, r3, #18
 80013bc:	4613      	mov	r3, r2
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	4413      	add	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80013c4:	e002      	b.n	80013cc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	3b01      	subs	r3, #1
 80013ca:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1f9      	bne.n	80013c6 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80013e0:	d107      	bne.n	80013f2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	689a      	ldr	r2, [r3, #8]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80013f0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	f040 8086 	bne.w	800150e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001406:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800140a:	f023 0301 	bic.w	r3, r3, #1
 800140e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001420:	2b00      	cmp	r3, #0
 8001422:	d007      	beq.n	8001434 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001428:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800142c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001438:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800143c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001440:	d106      	bne.n	8001450 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001446:	f023 0206 	bic.w	r2, r3, #6
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	645a      	str	r2, [r3, #68]	@ 0x44
 800144e:	e002      	b.n	8001456 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2200      	movs	r2, #0
 8001454:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800145e:	4b36      	ldr	r3, [pc, #216]	@ (8001538 <HAL_ADC_Start_DMA+0x1cc>)
 8001460:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001466:	4a35      	ldr	r2, [pc, #212]	@ (800153c <HAL_ADC_Start_DMA+0x1d0>)
 8001468:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800146e:	4a34      	ldr	r2, [pc, #208]	@ (8001540 <HAL_ADC_Start_DMA+0x1d4>)
 8001470:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001476:	4a33      	ldr	r2, [pc, #204]	@ (8001544 <HAL_ADC_Start_DMA+0x1d8>)
 8001478:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001482:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	685a      	ldr	r2, [r3, #4]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001492:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80014a2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	334c      	adds	r3, #76	@ 0x4c
 80014ae:	4619      	mov	r1, r3
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f000 fce6 	bl	8001e84 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 031f 	and.w	r3, r3, #31
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d10f      	bne.n	80014e4 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d129      	bne.n	8001526 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	e020      	b.n	8001526 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a17      	ldr	r2, [pc, #92]	@ (8001548 <HAL_ADC_Start_DMA+0x1dc>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d11b      	bne.n	8001526 <HAL_ADC_Start_DMA+0x1ba>
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d114      	bne.n	8001526 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	689a      	ldr	r2, [r3, #8]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	e00b      	b.n	8001526 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001512:	f043 0210 	orr.w	r2, r3, #16
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800151e:	f043 0201 	orr.w	r2, r3, #1
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	3718      	adds	r7, #24
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000000 	.word	0x20000000
 8001534:	431bde83 	.word	0x431bde83
 8001538:	40012300 	.word	0x40012300
 800153c:	08001a01 	.word	0x08001a01
 8001540:	08001abb 	.word	0x08001abb
 8001544:	08001ad7 	.word	0x08001ad7
 8001548:	40012000 	.word	0x40012000

0800154c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800155a:	4618      	mov	r0, r3
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001566:	b480      	push	{r7}
 8001568:	b083      	sub	sp, #12
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800157a:	b480      	push	{r7}
 800157c:	b083      	sub	sp, #12
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800158e:	b480      	push	{r7}
 8001590:	b083      	sub	sp, #12
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
	...

080015a4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015ae:	2300      	movs	r3, #0
 80015b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d101      	bne.n	80015c0 <HAL_ADC_ConfigChannel+0x1c>
 80015bc:	2302      	movs	r3, #2
 80015be:	e113      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x244>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b09      	cmp	r3, #9
 80015ce:	d925      	bls.n	800161c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	68d9      	ldr	r1, [r3, #12]
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	b29b      	uxth	r3, r3
 80015dc:	461a      	mov	r2, r3
 80015de:	4613      	mov	r3, r2
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	4413      	add	r3, r2
 80015e4:	3b1e      	subs	r3, #30
 80015e6:	2207      	movs	r2, #7
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43da      	mvns	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	400a      	ands	r2, r1
 80015f4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	68d9      	ldr	r1, [r3, #12]
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	b29b      	uxth	r3, r3
 8001606:	4618      	mov	r0, r3
 8001608:	4603      	mov	r3, r0
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	4403      	add	r3, r0
 800160e:	3b1e      	subs	r3, #30
 8001610:	409a      	lsls	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	430a      	orrs	r2, r1
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	e022      	b.n	8001662 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6919      	ldr	r1, [r3, #16]
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	b29b      	uxth	r3, r3
 8001628:	461a      	mov	r2, r3
 800162a:	4613      	mov	r3, r2
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	4413      	add	r3, r2
 8001630:	2207      	movs	r2, #7
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43da      	mvns	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	400a      	ands	r2, r1
 800163e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6919      	ldr	r1, [r3, #16]
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	689a      	ldr	r2, [r3, #8]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	b29b      	uxth	r3, r3
 8001650:	4618      	mov	r0, r3
 8001652:	4603      	mov	r3, r0
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	4403      	add	r3, r0
 8001658:	409a      	lsls	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	430a      	orrs	r2, r1
 8001660:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	2b06      	cmp	r3, #6
 8001668:	d824      	bhi.n	80016b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685a      	ldr	r2, [r3, #4]
 8001674:	4613      	mov	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4413      	add	r3, r2
 800167a:	3b05      	subs	r3, #5
 800167c:	221f      	movs	r2, #31
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43da      	mvns	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	400a      	ands	r2, r1
 800168a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	b29b      	uxth	r3, r3
 8001698:	4618      	mov	r0, r3
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	4613      	mov	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	3b05      	subs	r3, #5
 80016a6:	fa00 f203 	lsl.w	r2, r0, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	430a      	orrs	r2, r1
 80016b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80016b2:	e04c      	b.n	800174e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	2b0c      	cmp	r3, #12
 80016ba:	d824      	bhi.n	8001706 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	3b23      	subs	r3, #35	@ 0x23
 80016ce:	221f      	movs	r2, #31
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43da      	mvns	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	400a      	ands	r2, r1
 80016dc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	4618      	mov	r0, r3
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	4613      	mov	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	3b23      	subs	r3, #35	@ 0x23
 80016f8:	fa00 f203 	lsl.w	r2, r0, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	430a      	orrs	r2, r1
 8001702:	631a      	str	r2, [r3, #48]	@ 0x30
 8001704:	e023      	b.n	800174e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	4613      	mov	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	3b41      	subs	r3, #65	@ 0x41
 8001718:	221f      	movs	r2, #31
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43da      	mvns	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	400a      	ands	r2, r1
 8001726:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	b29b      	uxth	r3, r3
 8001734:	4618      	mov	r0, r3
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	3b41      	subs	r3, #65	@ 0x41
 8001742:	fa00 f203 	lsl.w	r2, r0, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	430a      	orrs	r2, r1
 800174c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800174e:	4b29      	ldr	r3, [pc, #164]	@ (80017f4 <HAL_ADC_ConfigChannel+0x250>)
 8001750:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a28      	ldr	r2, [pc, #160]	@ (80017f8 <HAL_ADC_ConfigChannel+0x254>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d10f      	bne.n	800177c <HAL_ADC_ConfigChannel+0x1d8>
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b12      	cmp	r3, #18
 8001762:	d10b      	bne.n	800177c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a1d      	ldr	r2, [pc, #116]	@ (80017f8 <HAL_ADC_ConfigChannel+0x254>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d12b      	bne.n	80017de <HAL_ADC_ConfigChannel+0x23a>
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a1c      	ldr	r2, [pc, #112]	@ (80017fc <HAL_ADC_ConfigChannel+0x258>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d003      	beq.n	8001798 <HAL_ADC_ConfigChannel+0x1f4>
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b11      	cmp	r3, #17
 8001796:	d122      	bne.n	80017de <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a11      	ldr	r2, [pc, #68]	@ (80017fc <HAL_ADC_ConfigChannel+0x258>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d111      	bne.n	80017de <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017ba:	4b11      	ldr	r3, [pc, #68]	@ (8001800 <HAL_ADC_ConfigChannel+0x25c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a11      	ldr	r2, [pc, #68]	@ (8001804 <HAL_ADC_ConfigChannel+0x260>)
 80017c0:	fba2 2303 	umull	r2, r3, r2, r3
 80017c4:	0c9a      	lsrs	r2, r3, #18
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80017d0:	e002      	b.n	80017d8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	3b01      	subs	r3, #1
 80017d6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f9      	bne.n	80017d2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	40012300 	.word	0x40012300
 80017f8:	40012000 	.word	0x40012000
 80017fc:	10000012 	.word	0x10000012
 8001800:	20000000 	.word	0x20000000
 8001804:	431bde83 	.word	0x431bde83

08001808 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001810:	4b79      	ldr	r3, [pc, #484]	@ (80019f8 <ADC_Init+0x1f0>)
 8001812:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	431a      	orrs	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800183c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6859      	ldr	r1, [r3, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	021a      	lsls	r2, r3, #8
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	430a      	orrs	r2, r1
 8001850:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001860:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6859      	ldr	r1, [r3, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689a      	ldr	r2, [r3, #8]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	430a      	orrs	r2, r1
 8001872:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689a      	ldr	r2, [r3, #8]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001882:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6899      	ldr	r1, [r3, #8]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	68da      	ldr	r2, [r3, #12]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	430a      	orrs	r2, r1
 8001894:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800189a:	4a58      	ldr	r2, [pc, #352]	@ (80019fc <ADC_Init+0x1f4>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d022      	beq.n	80018e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	689a      	ldr	r2, [r3, #8]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80018ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6899      	ldr	r1, [r3, #8]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	430a      	orrs	r2, r1
 80018c0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80018d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6899      	ldr	r1, [r3, #8]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	430a      	orrs	r2, r1
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	e00f      	b.n	8001906 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80018f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001904:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 0202 	bic.w	r2, r2, #2
 8001914:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6899      	ldr	r1, [r3, #8]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	7e1b      	ldrb	r3, [r3, #24]
 8001920:	005a      	lsls	r2, r3, #1
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	430a      	orrs	r2, r1
 8001928:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d01b      	beq.n	800196c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001942:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001952:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6859      	ldr	r1, [r3, #4]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800195e:	3b01      	subs	r3, #1
 8001960:	035a      	lsls	r2, r3, #13
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	430a      	orrs	r2, r1
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	e007      	b.n	800197c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800197a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800198a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	3b01      	subs	r3, #1
 8001998:	051a      	lsls	r2, r3, #20
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	430a      	orrs	r2, r1
 80019a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80019b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6899      	ldr	r1, [r3, #8]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80019be:	025a      	lsls	r2, r3, #9
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	689a      	ldr	r2, [r3, #8]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6899      	ldr	r1, [r3, #8]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	029a      	lsls	r2, r3, #10
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	609a      	str	r2, [r3, #8]
}
 80019ec:	bf00      	nop
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	40012300 	.word	0x40012300
 80019fc:	0f000001 	.word	0x0f000001

08001a00 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a0c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a12:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d13c      	bne.n	8001a94 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d12b      	bne.n	8001a8c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d127      	bne.n	8001a8c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a42:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d006      	beq.n	8001a58 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d119      	bne.n	8001a8c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	685a      	ldr	r2, [r3, #4]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f022 0220 	bic.w	r2, r2, #32
 8001a66:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d105      	bne.n	8001a8c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a84:	f043 0201 	orr.w	r2, r3, #1
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a8c:	68f8      	ldr	r0, [r7, #12]
 8001a8e:	f7ff fd6a 	bl	8001566 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001a92:	e00e      	b.n	8001ab2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a98:	f003 0310 	and.w	r3, r3, #16
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d003      	beq.n	8001aa8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f7ff fd74 	bl	800158e <HAL_ADC_ErrorCallback>
}
 8001aa6:	e004      	b.n	8001ab2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	4798      	blx	r3
}
 8001ab2:	bf00      	nop
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b084      	sub	sp, #16
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ac6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ac8:	68f8      	ldr	r0, [r7, #12]
 8001aca:	f7ff fd56 	bl	800157a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ace:	bf00      	nop
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b084      	sub	sp, #16
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ae2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2240      	movs	r2, #64	@ 0x40
 8001ae8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aee:	f043 0204 	orr.w	r2, r3, #4
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001af6:	68f8      	ldr	r0, [r7, #12]
 8001af8:	f7ff fd49 	bl	800158e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001afc:	bf00      	nop
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b14:	4b0c      	ldr	r3, [pc, #48]	@ (8001b48 <__NVIC_SetPriorityGrouping+0x44>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b1a:	68ba      	ldr	r2, [r7, #8]
 8001b1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b20:	4013      	ands	r3, r2
 8001b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b36:	4a04      	ldr	r2, [pc, #16]	@ (8001b48 <__NVIC_SetPriorityGrouping+0x44>)
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	60d3      	str	r3, [r2, #12]
}
 8001b3c:	bf00      	nop
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b50:	4b04      	ldr	r3, [pc, #16]	@ (8001b64 <__NVIC_GetPriorityGrouping+0x18>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	0a1b      	lsrs	r3, r3, #8
 8001b56:	f003 0307 	and.w	r3, r3, #7
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	db0b      	blt.n	8001b92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	f003 021f 	and.w	r2, r3, #31
 8001b80:	4907      	ldr	r1, [pc, #28]	@ (8001ba0 <__NVIC_EnableIRQ+0x38>)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	095b      	lsrs	r3, r3, #5
 8001b88:	2001      	movs	r0, #1
 8001b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	e000e100 	.word	0xe000e100

08001ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	6039      	str	r1, [r7, #0]
 8001bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	db0a      	blt.n	8001bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	490c      	ldr	r1, [pc, #48]	@ (8001bf0 <__NVIC_SetPriority+0x4c>)
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	0112      	lsls	r2, r2, #4
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	440b      	add	r3, r1
 8001bc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bcc:	e00a      	b.n	8001be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	4908      	ldr	r1, [pc, #32]	@ (8001bf4 <__NVIC_SetPriority+0x50>)
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	3b04      	subs	r3, #4
 8001bdc:	0112      	lsls	r2, r2, #4
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	440b      	add	r3, r1
 8001be2:	761a      	strb	r2, [r3, #24]
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	e000e100 	.word	0xe000e100
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b089      	sub	sp, #36	@ 0x24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f1c3 0307 	rsb	r3, r3, #7
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	bf28      	it	cs
 8001c16:	2304      	movcs	r3, #4
 8001c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	2b06      	cmp	r3, #6
 8001c20:	d902      	bls.n	8001c28 <NVIC_EncodePriority+0x30>
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3b03      	subs	r3, #3
 8001c26:	e000      	b.n	8001c2a <NVIC_EncodePriority+0x32>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43da      	mvns	r2, r3
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	401a      	ands	r2, r3
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c40:	f04f 31ff 	mov.w	r1, #4294967295
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4a:	43d9      	mvns	r1, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	4313      	orrs	r3, r2
         );
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3724      	adds	r7, #36	@ 0x24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
	...

08001c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c70:	d301      	bcc.n	8001c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c72:	2301      	movs	r3, #1
 8001c74:	e00f      	b.n	8001c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c76:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca0 <SysTick_Config+0x40>)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c7e:	210f      	movs	r1, #15
 8001c80:	f04f 30ff 	mov.w	r0, #4294967295
 8001c84:	f7ff ff8e 	bl	8001ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c88:	4b05      	ldr	r3, [pc, #20]	@ (8001ca0 <SysTick_Config+0x40>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c8e:	4b04      	ldr	r3, [pc, #16]	@ (8001ca0 <SysTick_Config+0x40>)
 8001c90:	2207      	movs	r2, #7
 8001c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	e000e010 	.word	0xe000e010

08001ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f7ff ff29 	bl	8001b04 <__NVIC_SetPriorityGrouping>
}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b086      	sub	sp, #24
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	607a      	str	r2, [r7, #4]
 8001cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ccc:	f7ff ff3e 	bl	8001b4c <__NVIC_GetPriorityGrouping>
 8001cd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	68b9      	ldr	r1, [r7, #8]
 8001cd6:	6978      	ldr	r0, [r7, #20]
 8001cd8:	f7ff ff8e 	bl	8001bf8 <NVIC_EncodePriority>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ce2:	4611      	mov	r1, r2
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff ff5d 	bl	8001ba4 <__NVIC_SetPriority>
}
 8001cea:	bf00      	nop
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff ff31 	bl	8001b68 <__NVIC_EnableIRQ>
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7ff ffa2 	bl	8001c60 <SysTick_Config>
 8001d1c:	4603      	mov	r3, r0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
	...

08001d28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d34:	f7ff faca 	bl	80012cc <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d101      	bne.n	8001d44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e099      	b.n	8001e78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2202      	movs	r2, #2
 8001d48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 0201 	bic.w	r2, r2, #1
 8001d62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d64:	e00f      	b.n	8001d86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d66:	f7ff fab1 	bl	80012cc <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b05      	cmp	r3, #5
 8001d72:	d908      	bls.n	8001d86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2220      	movs	r2, #32
 8001d78:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2203      	movs	r2, #3
 8001d7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e078      	b.n	8001e78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1e8      	bne.n	8001d66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	4b38      	ldr	r3, [pc, #224]	@ (8001e80 <HAL_DMA_Init+0x158>)
 8001da0:	4013      	ands	r3, r2
 8001da2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001db2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ddc:	2b04      	cmp	r3, #4
 8001dde:	d107      	bne.n	8001df0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de8:	4313      	orrs	r3, r2
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	697a      	ldr	r2, [r7, #20]
 8001df6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	f023 0307 	bic.w	r3, r3, #7
 8001e06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0c:	697a      	ldr	r2, [r7, #20]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d117      	bne.n	8001e4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d00e      	beq.n	8001e4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 fb01 	bl	8002434 <DMA_CheckFifoParam>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d008      	beq.n	8001e4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2240      	movs	r2, #64	@ 0x40
 8001e3c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001e46:	2301      	movs	r3, #1
 8001e48:	e016      	b.n	8001e78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	697a      	ldr	r2, [r7, #20]
 8001e50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 fab8 	bl	80023c8 <DMA_CalcBaseAndBitshift>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e60:	223f      	movs	r2, #63	@ 0x3f
 8001e62:	409a      	lsls	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	f010803f 	.word	0xf010803f

08001e84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
 8001e90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e92:	2300      	movs	r3, #0
 8001e94:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e9a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d101      	bne.n	8001eaa <HAL_DMA_Start_IT+0x26>
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	e040      	b.n	8001f2c <HAL_DMA_Start_IT+0xa8>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d12f      	bne.n	8001f1e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	68b9      	ldr	r1, [r7, #8]
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f000 fa4a 	bl	800236c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001edc:	223f      	movs	r2, #63	@ 0x3f
 8001ede:	409a      	lsls	r2, r3
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 0216 	orr.w	r2, r2, #22
 8001ef2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d007      	beq.n	8001f0c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f042 0208 	orr.w	r2, r2, #8
 8001f0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0201 	orr.w	r2, r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	e005      	b.n	8001f2a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f26:	2302      	movs	r3, #2
 8001f28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f40:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f42:	f7ff f9c3 	bl	80012cc <HAL_GetTick>
 8001f46:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d008      	beq.n	8001f66 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2280      	movs	r2, #128	@ 0x80
 8001f58:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e052      	b.n	800200c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 0216 	bic.w	r2, r2, #22
 8001f74:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	695a      	ldr	r2, [r3, #20]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f84:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d103      	bne.n	8001f96 <HAL_DMA_Abort+0x62>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d007      	beq.n	8001fa6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0208 	bic.w	r2, r2, #8
 8001fa4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 0201 	bic.w	r2, r2, #1
 8001fb4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fb6:	e013      	b.n	8001fe0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fb8:	f7ff f988 	bl	80012cc <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b05      	cmp	r3, #5
 8001fc4:	d90c      	bls.n	8001fe0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2220      	movs	r2, #32
 8001fca:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2203      	movs	r2, #3
 8001fd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e015      	b.n	800200c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1e4      	bne.n	8001fb8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff2:	223f      	movs	r2, #63	@ 0x3f
 8001ff4:	409a      	lsls	r2, r3
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d004      	beq.n	8002032 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2280      	movs	r2, #128	@ 0x80
 800202c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e00c      	b.n	800204c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2205      	movs	r2, #5
 8002036:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 0201 	bic.w	r2, r2, #1
 8002048:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002060:	2300      	movs	r3, #0
 8002062:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002064:	4b8e      	ldr	r3, [pc, #568]	@ (80022a0 <HAL_DMA_IRQHandler+0x248>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a8e      	ldr	r2, [pc, #568]	@ (80022a4 <HAL_DMA_IRQHandler+0x24c>)
 800206a:	fba2 2303 	umull	r2, r3, r2, r3
 800206e:	0a9b      	lsrs	r3, r3, #10
 8002070:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002076:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002082:	2208      	movs	r2, #8
 8002084:	409a      	lsls	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	4013      	ands	r3, r2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d01a      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	d013      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0204 	bic.w	r2, r2, #4
 80020aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b0:	2208      	movs	r2, #8
 80020b2:	409a      	lsls	r2, r3
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020bc:	f043 0201 	orr.w	r2, r3, #1
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c8:	2201      	movs	r2, #1
 80020ca:	409a      	lsls	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d012      	beq.n	80020fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00b      	beq.n	80020fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020e6:	2201      	movs	r2, #1
 80020e8:	409a      	lsls	r2, r3
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020f2:	f043 0202 	orr.w	r2, r3, #2
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020fe:	2204      	movs	r2, #4
 8002100:	409a      	lsls	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	4013      	ands	r3, r2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d012      	beq.n	8002130 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00b      	beq.n	8002130 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800211c:	2204      	movs	r2, #4
 800211e:	409a      	lsls	r2, r3
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002128:	f043 0204 	orr.w	r2, r3, #4
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002134:	2210      	movs	r2, #16
 8002136:	409a      	lsls	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	4013      	ands	r3, r2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d043      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	2b00      	cmp	r3, #0
 800214c:	d03c      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002152:	2210      	movs	r2, #16
 8002154:	409a      	lsls	r2, r3
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d018      	beq.n	800219a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d108      	bne.n	8002188 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217a:	2b00      	cmp	r3, #0
 800217c:	d024      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	4798      	blx	r3
 8002186:	e01f      	b.n	80021c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800218c:	2b00      	cmp	r3, #0
 800218e:	d01b      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	4798      	blx	r3
 8002198:	e016      	b.n	80021c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d107      	bne.n	80021b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0208 	bic.w	r2, r2, #8
 80021b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d003      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021cc:	2220      	movs	r2, #32
 80021ce:	409a      	lsls	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 808f 	beq.w	80022f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0310 	and.w	r3, r3, #16
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f000 8087 	beq.w	80022f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ee:	2220      	movs	r2, #32
 80021f0:	409a      	lsls	r2, r3
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b05      	cmp	r3, #5
 8002200:	d136      	bne.n	8002270 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 0216 	bic.w	r2, r2, #22
 8002210:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	695a      	ldr	r2, [r3, #20]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002220:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002226:	2b00      	cmp	r3, #0
 8002228:	d103      	bne.n	8002232 <HAL_DMA_IRQHandler+0x1da>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800222e:	2b00      	cmp	r3, #0
 8002230:	d007      	beq.n	8002242 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 0208 	bic.w	r2, r2, #8
 8002240:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002246:	223f      	movs	r2, #63	@ 0x3f
 8002248:	409a      	lsls	r2, r3
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002262:	2b00      	cmp	r3, #0
 8002264:	d07e      	beq.n	8002364 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	4798      	blx	r3
        }
        return;
 800226e:	e079      	b.n	8002364 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d01d      	beq.n	80022ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d10d      	bne.n	80022a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002290:	2b00      	cmp	r3, #0
 8002292:	d031      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	4798      	blx	r3
 800229c:	e02c      	b.n	80022f8 <HAL_DMA_IRQHandler+0x2a0>
 800229e:	bf00      	nop
 80022a0:	20000000 	.word	0x20000000
 80022a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d023      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	4798      	blx	r3
 80022b8:	e01e      	b.n	80022f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d10f      	bne.n	80022e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0210 	bic.w	r2, r2, #16
 80022d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d003      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d032      	beq.n	8002366 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	2b00      	cmp	r3, #0
 800230a:	d022      	beq.n	8002352 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2205      	movs	r2, #5
 8002310:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 0201 	bic.w	r2, r2, #1
 8002322:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	3301      	adds	r3, #1
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	429a      	cmp	r2, r3
 800232e:	d307      	bcc.n	8002340 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f2      	bne.n	8002324 <HAL_DMA_IRQHandler+0x2cc>
 800233e:	e000      	b.n	8002342 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002340:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002356:	2b00      	cmp	r3, #0
 8002358:	d005      	beq.n	8002366 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	4798      	blx	r3
 8002362:	e000      	b.n	8002366 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002364:	bf00      	nop
    }
  }
}
 8002366:	3718      	adds	r7, #24
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
 8002378:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002388:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	2b40      	cmp	r3, #64	@ 0x40
 8002398:	d108      	bne.n	80023ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80023aa:	e007      	b.n	80023bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	60da      	str	r2, [r3, #12]
}
 80023bc:	bf00      	nop
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	3b10      	subs	r3, #16
 80023d8:	4a14      	ldr	r2, [pc, #80]	@ (800242c <DMA_CalcBaseAndBitshift+0x64>)
 80023da:	fba2 2303 	umull	r2, r3, r2, r3
 80023de:	091b      	lsrs	r3, r3, #4
 80023e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023e2:	4a13      	ldr	r2, [pc, #76]	@ (8002430 <DMA_CalcBaseAndBitshift+0x68>)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4413      	add	r3, r2
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	461a      	mov	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2b03      	cmp	r3, #3
 80023f4:	d909      	bls.n	800240a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80023fe:	f023 0303 	bic.w	r3, r3, #3
 8002402:	1d1a      	adds	r2, r3, #4
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	659a      	str	r2, [r3, #88]	@ 0x58
 8002408:	e007      	b.n	800241a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002412:	f023 0303 	bic.w	r3, r3, #3
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800241e:	4618      	mov	r0, r3
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	aaaaaaab 	.word	0xaaaaaaab
 8002430:	0800578c 	.word	0x0800578c

08002434 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800243c:	2300      	movs	r3, #0
 800243e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002444:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d11f      	bne.n	800248e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	2b03      	cmp	r3, #3
 8002452:	d856      	bhi.n	8002502 <DMA_CheckFifoParam+0xce>
 8002454:	a201      	add	r2, pc, #4	@ (adr r2, 800245c <DMA_CheckFifoParam+0x28>)
 8002456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245a:	bf00      	nop
 800245c:	0800246d 	.word	0x0800246d
 8002460:	0800247f 	.word	0x0800247f
 8002464:	0800246d 	.word	0x0800246d
 8002468:	08002503 	.word	0x08002503
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002470:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d046      	beq.n	8002506 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800247c:	e043      	b.n	8002506 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002482:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002486:	d140      	bne.n	800250a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800248c:	e03d      	b.n	800250a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002496:	d121      	bne.n	80024dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	2b03      	cmp	r3, #3
 800249c:	d837      	bhi.n	800250e <DMA_CheckFifoParam+0xda>
 800249e:	a201      	add	r2, pc, #4	@ (adr r2, 80024a4 <DMA_CheckFifoParam+0x70>)
 80024a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a4:	080024b5 	.word	0x080024b5
 80024a8:	080024bb 	.word	0x080024bb
 80024ac:	080024b5 	.word	0x080024b5
 80024b0:	080024cd 	.word	0x080024cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	73fb      	strb	r3, [r7, #15]
      break;
 80024b8:	e030      	b.n	800251c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d025      	beq.n	8002512 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024ca:	e022      	b.n	8002512 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80024d4:	d11f      	bne.n	8002516 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024da:	e01c      	b.n	8002516 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d903      	bls.n	80024ea <DMA_CheckFifoParam+0xb6>
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	2b03      	cmp	r3, #3
 80024e6:	d003      	beq.n	80024f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024e8:	e018      	b.n	800251c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	73fb      	strb	r3, [r7, #15]
      break;
 80024ee:	e015      	b.n	800251c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00e      	beq.n	800251a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002500:	e00b      	b.n	800251a <DMA_CheckFifoParam+0xe6>
      break;
 8002502:	bf00      	nop
 8002504:	e00a      	b.n	800251c <DMA_CheckFifoParam+0xe8>
      break;
 8002506:	bf00      	nop
 8002508:	e008      	b.n	800251c <DMA_CheckFifoParam+0xe8>
      break;
 800250a:	bf00      	nop
 800250c:	e006      	b.n	800251c <DMA_CheckFifoParam+0xe8>
      break;
 800250e:	bf00      	nop
 8002510:	e004      	b.n	800251c <DMA_CheckFifoParam+0xe8>
      break;
 8002512:	bf00      	nop
 8002514:	e002      	b.n	800251c <DMA_CheckFifoParam+0xe8>
      break;   
 8002516:	bf00      	nop
 8002518:	e000      	b.n	800251c <DMA_CheckFifoParam+0xe8>
      break;
 800251a:	bf00      	nop
    }
  } 
  
  return status; 
 800251c:	7bfb      	ldrb	r3, [r7, #15]
}
 800251e:	4618      	mov	r0, r3
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop

0800252c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800252c:	b480      	push	{r7}
 800252e:	b089      	sub	sp, #36	@ 0x24
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002536:	2300      	movs	r3, #0
 8002538:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800253a:	2300      	movs	r3, #0
 800253c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800253e:	2300      	movs	r3, #0
 8002540:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002542:	2300      	movs	r3, #0
 8002544:	61fb      	str	r3, [r7, #28]
 8002546:	e159      	b.n	80027fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002548:	2201      	movs	r2, #1
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	4013      	ands	r3, r2
 800255a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	429a      	cmp	r2, r3
 8002562:	f040 8148 	bne.w	80027f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	2b01      	cmp	r3, #1
 8002570:	d005      	beq.n	800257e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800257a:	2b02      	cmp	r3, #2
 800257c:	d130      	bne.n	80025e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	2203      	movs	r2, #3
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	43db      	mvns	r3, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4013      	ands	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	68da      	ldr	r2, [r3, #12]
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025b4:	2201      	movs	r2, #1
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	091b      	lsrs	r3, r3, #4
 80025ca:	f003 0201 	and.w	r2, r3, #1
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 0303 	and.w	r3, r3, #3
 80025e8:	2b03      	cmp	r3, #3
 80025ea:	d017      	beq.n	800261c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	2203      	movs	r2, #3
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	43db      	mvns	r3, r3
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4013      	ands	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4313      	orrs	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f003 0303 	and.w	r3, r3, #3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d123      	bne.n	8002670 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	08da      	lsrs	r2, r3, #3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3208      	adds	r2, #8
 8002630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002634:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	220f      	movs	r2, #15
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	43db      	mvns	r3, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4013      	ands	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	691a      	ldr	r2, [r3, #16]
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4313      	orrs	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	08da      	lsrs	r2, r3, #3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	3208      	adds	r2, #8
 800266a:	69b9      	ldr	r1, [r7, #24]
 800266c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	2203      	movs	r2, #3
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	43db      	mvns	r3, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 0203 	and.w	r2, r3, #3
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 80a2 	beq.w	80027f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	4b57      	ldr	r3, [pc, #348]	@ (8002814 <HAL_GPIO_Init+0x2e8>)
 80026b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ba:	4a56      	ldr	r2, [pc, #344]	@ (8002814 <HAL_GPIO_Init+0x2e8>)
 80026bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80026c2:	4b54      	ldr	r3, [pc, #336]	@ (8002814 <HAL_GPIO_Init+0x2e8>)
 80026c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026ce:	4a52      	ldr	r2, [pc, #328]	@ (8002818 <HAL_GPIO_Init+0x2ec>)
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	089b      	lsrs	r3, r3, #2
 80026d4:	3302      	adds	r3, #2
 80026d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f003 0303 	and.w	r3, r3, #3
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	220f      	movs	r2, #15
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	43db      	mvns	r3, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4013      	ands	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a49      	ldr	r2, [pc, #292]	@ (800281c <HAL_GPIO_Init+0x2f0>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d019      	beq.n	800272e <HAL_GPIO_Init+0x202>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a48      	ldr	r2, [pc, #288]	@ (8002820 <HAL_GPIO_Init+0x2f4>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d013      	beq.n	800272a <HAL_GPIO_Init+0x1fe>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a47      	ldr	r2, [pc, #284]	@ (8002824 <HAL_GPIO_Init+0x2f8>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d00d      	beq.n	8002726 <HAL_GPIO_Init+0x1fa>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a46      	ldr	r2, [pc, #280]	@ (8002828 <HAL_GPIO_Init+0x2fc>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d007      	beq.n	8002722 <HAL_GPIO_Init+0x1f6>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a45      	ldr	r2, [pc, #276]	@ (800282c <HAL_GPIO_Init+0x300>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d101      	bne.n	800271e <HAL_GPIO_Init+0x1f2>
 800271a:	2304      	movs	r3, #4
 800271c:	e008      	b.n	8002730 <HAL_GPIO_Init+0x204>
 800271e:	2307      	movs	r3, #7
 8002720:	e006      	b.n	8002730 <HAL_GPIO_Init+0x204>
 8002722:	2303      	movs	r3, #3
 8002724:	e004      	b.n	8002730 <HAL_GPIO_Init+0x204>
 8002726:	2302      	movs	r3, #2
 8002728:	e002      	b.n	8002730 <HAL_GPIO_Init+0x204>
 800272a:	2301      	movs	r3, #1
 800272c:	e000      	b.n	8002730 <HAL_GPIO_Init+0x204>
 800272e:	2300      	movs	r3, #0
 8002730:	69fa      	ldr	r2, [r7, #28]
 8002732:	f002 0203 	and.w	r2, r2, #3
 8002736:	0092      	lsls	r2, r2, #2
 8002738:	4093      	lsls	r3, r2
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4313      	orrs	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002740:	4935      	ldr	r1, [pc, #212]	@ (8002818 <HAL_GPIO_Init+0x2ec>)
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	089b      	lsrs	r3, r3, #2
 8002746:	3302      	adds	r3, #2
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800274e:	4b38      	ldr	r3, [pc, #224]	@ (8002830 <HAL_GPIO_Init+0x304>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	43db      	mvns	r3, r3
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4013      	ands	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	4313      	orrs	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002772:	4a2f      	ldr	r2, [pc, #188]	@ (8002830 <HAL_GPIO_Init+0x304>)
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002778:	4b2d      	ldr	r3, [pc, #180]	@ (8002830 <HAL_GPIO_Init+0x304>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	43db      	mvns	r3, r3
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4013      	ands	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	4313      	orrs	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800279c:	4a24      	ldr	r2, [pc, #144]	@ (8002830 <HAL_GPIO_Init+0x304>)
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027a2:	4b23      	ldr	r3, [pc, #140]	@ (8002830 <HAL_GPIO_Init+0x304>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	43db      	mvns	r3, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4013      	ands	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027c6:	4a1a      	ldr	r2, [pc, #104]	@ (8002830 <HAL_GPIO_Init+0x304>)
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027cc:	4b18      	ldr	r3, [pc, #96]	@ (8002830 <HAL_GPIO_Init+0x304>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	43db      	mvns	r3, r3
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4013      	ands	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d003      	beq.n	80027f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027f0:	4a0f      	ldr	r2, [pc, #60]	@ (8002830 <HAL_GPIO_Init+0x304>)
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	3301      	adds	r3, #1
 80027fa:	61fb      	str	r3, [r7, #28]
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	2b0f      	cmp	r3, #15
 8002800:	f67f aea2 	bls.w	8002548 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002804:	bf00      	nop
 8002806:	bf00      	nop
 8002808:	3724      	adds	r7, #36	@ 0x24
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	40023800 	.word	0x40023800
 8002818:	40013800 	.word	0x40013800
 800281c:	40020000 	.word	0x40020000
 8002820:	40020400 	.word	0x40020400
 8002824:	40020800 	.word	0x40020800
 8002828:	40020c00 	.word	0x40020c00
 800282c:	40021000 	.word	0x40021000
 8002830:	40013c00 	.word	0x40013c00

08002834 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	460b      	mov	r3, r1
 800283e:	807b      	strh	r3, [r7, #2]
 8002840:	4613      	mov	r3, r2
 8002842:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002844:	787b      	ldrb	r3, [r7, #1]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800284a:	887a      	ldrh	r2, [r7, #2]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002850:	e003      	b.n	800285a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002852:	887b      	ldrh	r3, [r7, #2]
 8002854:	041a      	lsls	r2, r3, #16
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	619a      	str	r2, [r3, #24]
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
	...

08002868 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e267      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d075      	beq.n	8002972 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002886:	4b88      	ldr	r3, [pc, #544]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 030c 	and.w	r3, r3, #12
 800288e:	2b04      	cmp	r3, #4
 8002890:	d00c      	beq.n	80028ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002892:	4b85      	ldr	r3, [pc, #532]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800289a:	2b08      	cmp	r3, #8
 800289c:	d112      	bne.n	80028c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800289e:	4b82      	ldr	r3, [pc, #520]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028aa:	d10b      	bne.n	80028c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ac:	4b7e      	ldr	r3, [pc, #504]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d05b      	beq.n	8002970 <HAL_RCC_OscConfig+0x108>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d157      	bne.n	8002970 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e242      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028cc:	d106      	bne.n	80028dc <HAL_RCC_OscConfig+0x74>
 80028ce:	4b76      	ldr	r3, [pc, #472]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a75      	ldr	r2, [pc, #468]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	e01d      	b.n	8002918 <HAL_RCC_OscConfig+0xb0>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028e4:	d10c      	bne.n	8002900 <HAL_RCC_OscConfig+0x98>
 80028e6:	4b70      	ldr	r3, [pc, #448]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a6f      	ldr	r2, [pc, #444]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	4b6d      	ldr	r3, [pc, #436]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a6c      	ldr	r2, [pc, #432]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80028f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	e00b      	b.n	8002918 <HAL_RCC_OscConfig+0xb0>
 8002900:	4b69      	ldr	r3, [pc, #420]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a68      	ldr	r2, [pc, #416]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002906:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	4b66      	ldr	r3, [pc, #408]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a65      	ldr	r2, [pc, #404]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002912:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002916:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d013      	beq.n	8002948 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002920:	f7fe fcd4 	bl	80012cc <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002928:	f7fe fcd0 	bl	80012cc <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b64      	cmp	r3, #100	@ 0x64
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e207      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293a:	4b5b      	ldr	r3, [pc, #364]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0f0      	beq.n	8002928 <HAL_RCC_OscConfig+0xc0>
 8002946:	e014      	b.n	8002972 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002948:	f7fe fcc0 	bl	80012cc <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002950:	f7fe fcbc 	bl	80012cc <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b64      	cmp	r3, #100	@ 0x64
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e1f3      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002962:	4b51      	ldr	r3, [pc, #324]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f0      	bne.n	8002950 <HAL_RCC_OscConfig+0xe8>
 800296e:	e000      	b.n	8002972 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d063      	beq.n	8002a46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800297e:	4b4a      	ldr	r3, [pc, #296]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 030c 	and.w	r3, r3, #12
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00b      	beq.n	80029a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800298a:	4b47      	ldr	r3, [pc, #284]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002992:	2b08      	cmp	r3, #8
 8002994:	d11c      	bne.n	80029d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002996:	4b44      	ldr	r3, [pc, #272]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d116      	bne.n	80029d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029a2:	4b41      	ldr	r3, [pc, #260]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d005      	beq.n	80029ba <HAL_RCC_OscConfig+0x152>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d001      	beq.n	80029ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e1c7      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ba:	4b3b      	ldr	r3, [pc, #236]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	4937      	ldr	r1, [pc, #220]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ce:	e03a      	b.n	8002a46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d020      	beq.n	8002a1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029d8:	4b34      	ldr	r3, [pc, #208]	@ (8002aac <HAL_RCC_OscConfig+0x244>)
 80029da:	2201      	movs	r2, #1
 80029dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029de:	f7fe fc75 	bl	80012cc <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029e6:	f7fe fc71 	bl	80012cc <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e1a8      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f8:	4b2b      	ldr	r3, [pc, #172]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0f0      	beq.n	80029e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a04:	4b28      	ldr	r3, [pc, #160]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	4925      	ldr	r1, [pc, #148]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	600b      	str	r3, [r1, #0]
 8002a18:	e015      	b.n	8002a46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a1a:	4b24      	ldr	r3, [pc, #144]	@ (8002aac <HAL_RCC_OscConfig+0x244>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a20:	f7fe fc54 	bl	80012cc <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a28:	f7fe fc50 	bl	80012cc <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e187      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a3a:	4b1b      	ldr	r3, [pc, #108]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f0      	bne.n	8002a28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d036      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d016      	beq.n	8002a88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a5a:	4b15      	ldr	r3, [pc, #84]	@ (8002ab0 <HAL_RCC_OscConfig+0x248>)
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a60:	f7fe fc34 	bl	80012cc <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a68:	f7fe fc30 	bl	80012cc <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e167      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa8 <HAL_RCC_OscConfig+0x240>)
 8002a7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0f0      	beq.n	8002a68 <HAL_RCC_OscConfig+0x200>
 8002a86:	e01b      	b.n	8002ac0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a88:	4b09      	ldr	r3, [pc, #36]	@ (8002ab0 <HAL_RCC_OscConfig+0x248>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a8e:	f7fe fc1d 	bl	80012cc <HAL_GetTick>
 8002a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a94:	e00e      	b.n	8002ab4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a96:	f7fe fc19 	bl	80012cc <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d907      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e150      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	42470000 	.word	0x42470000
 8002ab0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab4:	4b88      	ldr	r3, [pc, #544]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002ab6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1ea      	bne.n	8002a96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 8097 	beq.w	8002bfc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ad2:	4b81      	ldr	r3, [pc, #516]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10f      	bne.n	8002afe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60bb      	str	r3, [r7, #8]
 8002ae2:	4b7d      	ldr	r3, [pc, #500]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae6:	4a7c      	ldr	r2, [pc, #496]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002ae8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002aec:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aee:	4b7a      	ldr	r3, [pc, #488]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002af6:	60bb      	str	r3, [r7, #8]
 8002af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002afa:	2301      	movs	r3, #1
 8002afc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afe:	4b77      	ldr	r3, [pc, #476]	@ (8002cdc <HAL_RCC_OscConfig+0x474>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d118      	bne.n	8002b3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b0a:	4b74      	ldr	r3, [pc, #464]	@ (8002cdc <HAL_RCC_OscConfig+0x474>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a73      	ldr	r2, [pc, #460]	@ (8002cdc <HAL_RCC_OscConfig+0x474>)
 8002b10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b16:	f7fe fbd9 	bl	80012cc <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b1c:	e008      	b.n	8002b30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b1e:	f7fe fbd5 	bl	80012cc <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e10c      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b30:	4b6a      	ldr	r3, [pc, #424]	@ (8002cdc <HAL_RCC_OscConfig+0x474>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d0f0      	beq.n	8002b1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d106      	bne.n	8002b52 <HAL_RCC_OscConfig+0x2ea>
 8002b44:	4b64      	ldr	r3, [pc, #400]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b48:	4a63      	ldr	r2, [pc, #396]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b4a:	f043 0301 	orr.w	r3, r3, #1
 8002b4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b50:	e01c      	b.n	8002b8c <HAL_RCC_OscConfig+0x324>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	2b05      	cmp	r3, #5
 8002b58:	d10c      	bne.n	8002b74 <HAL_RCC_OscConfig+0x30c>
 8002b5a:	4b5f      	ldr	r3, [pc, #380]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b5e:	4a5e      	ldr	r2, [pc, #376]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b60:	f043 0304 	orr.w	r3, r3, #4
 8002b64:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b66:	4b5c      	ldr	r3, [pc, #368]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b6a:	4a5b      	ldr	r2, [pc, #364]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b6c:	f043 0301 	orr.w	r3, r3, #1
 8002b70:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b72:	e00b      	b.n	8002b8c <HAL_RCC_OscConfig+0x324>
 8002b74:	4b58      	ldr	r3, [pc, #352]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b78:	4a57      	ldr	r2, [pc, #348]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b7a:	f023 0301 	bic.w	r3, r3, #1
 8002b7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b80:	4b55      	ldr	r3, [pc, #340]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b84:	4a54      	ldr	r2, [pc, #336]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002b86:	f023 0304 	bic.w	r3, r3, #4
 8002b8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d015      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b94:	f7fe fb9a 	bl	80012cc <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b9a:	e00a      	b.n	8002bb2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b9c:	f7fe fb96 	bl	80012cc <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e0cb      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb2:	4b49      	ldr	r3, [pc, #292]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d0ee      	beq.n	8002b9c <HAL_RCC_OscConfig+0x334>
 8002bbe:	e014      	b.n	8002bea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc0:	f7fe fb84 	bl	80012cc <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bc6:	e00a      	b.n	8002bde <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bc8:	f7fe fb80 	bl	80012cc <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e0b5      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bde:	4b3e      	ldr	r3, [pc, #248]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1ee      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bea:	7dfb      	ldrb	r3, [r7, #23]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d105      	bne.n	8002bfc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bf0:	4b39      	ldr	r3, [pc, #228]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf4:	4a38      	ldr	r2, [pc, #224]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002bf6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bfa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 80a1 	beq.w	8002d48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c06:	4b34      	ldr	r3, [pc, #208]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 030c 	and.w	r3, r3, #12
 8002c0e:	2b08      	cmp	r3, #8
 8002c10:	d05c      	beq.n	8002ccc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d141      	bne.n	8002c9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c1a:	4b31      	ldr	r3, [pc, #196]	@ (8002ce0 <HAL_RCC_OscConfig+0x478>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c20:	f7fe fb54 	bl	80012cc <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c28:	f7fe fb50 	bl	80012cc <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e087      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c3a:	4b27      	ldr	r3, [pc, #156]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f0      	bne.n	8002c28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69da      	ldr	r2, [r3, #28]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c54:	019b      	lsls	r3, r3, #6
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c5c:	085b      	lsrs	r3, r3, #1
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	041b      	lsls	r3, r3, #16
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c68:	061b      	lsls	r3, r3, #24
 8002c6a:	491b      	ldr	r1, [pc, #108]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c70:	4b1b      	ldr	r3, [pc, #108]	@ (8002ce0 <HAL_RCC_OscConfig+0x478>)
 8002c72:	2201      	movs	r2, #1
 8002c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c76:	f7fe fb29 	bl	80012cc <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c7c:	e008      	b.n	8002c90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c7e:	f7fe fb25 	bl	80012cc <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e05c      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c90:	4b11      	ldr	r3, [pc, #68]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0f0      	beq.n	8002c7e <HAL_RCC_OscConfig+0x416>
 8002c9c:	e054      	b.n	8002d48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c9e:	4b10      	ldr	r3, [pc, #64]	@ (8002ce0 <HAL_RCC_OscConfig+0x478>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca4:	f7fe fb12 	bl	80012cc <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cac:	f7fe fb0e 	bl	80012cc <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e045      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cbe:	4b06      	ldr	r3, [pc, #24]	@ (8002cd8 <HAL_RCC_OscConfig+0x470>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f0      	bne.n	8002cac <HAL_RCC_OscConfig+0x444>
 8002cca:	e03d      	b.n	8002d48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d107      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e038      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	40007000 	.word	0x40007000
 8002ce0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8002d54 <HAL_RCC_OscConfig+0x4ec>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d028      	beq.n	8002d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d121      	bne.n	8002d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d11a      	bne.n	8002d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d14:	4013      	ands	r3, r2
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d111      	bne.n	8002d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d2a:	085b      	lsrs	r3, r3, #1
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d107      	bne.n	8002d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d001      	beq.n	8002d48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e000      	b.n	8002d4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3718      	adds	r7, #24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40023800 	.word	0x40023800

08002d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e0cc      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d6c:	4b68      	ldr	r3, [pc, #416]	@ (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d90c      	bls.n	8002d94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7a:	4b65      	ldr	r3, [pc, #404]	@ (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	b2d2      	uxtb	r2, r2
 8002d80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d82:	4b63      	ldr	r3, [pc, #396]	@ (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0307 	and.w	r3, r3, #7
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d001      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e0b8      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d020      	beq.n	8002de2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d005      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dac:	4b59      	ldr	r3, [pc, #356]	@ (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	4a58      	ldr	r2, [pc, #352]	@ (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002db6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0308 	and.w	r3, r3, #8
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d005      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dc4:	4b53      	ldr	r3, [pc, #332]	@ (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	4a52      	ldr	r2, [pc, #328]	@ (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002dce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dd0:	4b50      	ldr	r3, [pc, #320]	@ (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	494d      	ldr	r1, [pc, #308]	@ (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d044      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d107      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df6:	4b47      	ldr	r3, [pc, #284]	@ (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d119      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e07f      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d003      	beq.n	8002e16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e12:	2b03      	cmp	r3, #3
 8002e14:	d107      	bne.n	8002e26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e16:	4b3f      	ldr	r3, [pc, #252]	@ (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d109      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e06f      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e26:	4b3b      	ldr	r3, [pc, #236]	@ (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e067      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e36:	4b37      	ldr	r3, [pc, #220]	@ (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f023 0203 	bic.w	r2, r3, #3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	4934      	ldr	r1, [pc, #208]	@ (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e48:	f7fe fa40 	bl	80012cc <HAL_GetTick>
 8002e4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e4e:	e00a      	b.n	8002e66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e50:	f7fe fa3c 	bl	80012cc <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e04f      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e66:	4b2b      	ldr	r3, [pc, #172]	@ (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 020c 	and.w	r2, r3, #12
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d1eb      	bne.n	8002e50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e78:	4b25      	ldr	r3, [pc, #148]	@ (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d20c      	bcs.n	8002ea0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e86:	4b22      	ldr	r3, [pc, #136]	@ (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e8e:	4b20      	ldr	r3, [pc, #128]	@ (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d001      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e032      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d008      	beq.n	8002ebe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eac:	4b19      	ldr	r3, [pc, #100]	@ (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	4916      	ldr	r1, [pc, #88]	@ (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d009      	beq.n	8002ede <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eca:	4b12      	ldr	r3, [pc, #72]	@ (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	490e      	ldr	r1, [pc, #56]	@ (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ede:	f000 f821 	bl	8002f24 <HAL_RCC_GetSysClockFreq>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	091b      	lsrs	r3, r3, #4
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	490a      	ldr	r1, [pc, #40]	@ (8002f18 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef0:	5ccb      	ldrb	r3, [r1, r3]
 8002ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef6:	4a09      	ldr	r2, [pc, #36]	@ (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002ef8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002efa:	4b09      	ldr	r3, [pc, #36]	@ (8002f20 <HAL_RCC_ClockConfig+0x1c8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fe f9b4 	bl	800126c <HAL_InitTick>

  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	40023c00 	.word	0x40023c00
 8002f14:	40023800 	.word	0x40023800
 8002f18:	08005774 	.word	0x08005774
 8002f1c:	20000000 	.word	0x20000000
 8002f20:	20000004 	.word	0x20000004

08002f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f28:	b094      	sub	sp, #80	@ 0x50
 8002f2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f30:	2300      	movs	r3, #0
 8002f32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f34:	2300      	movs	r3, #0
 8002f36:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f3c:	4b79      	ldr	r3, [pc, #484]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f003 030c 	and.w	r3, r3, #12
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d00d      	beq.n	8002f64 <HAL_RCC_GetSysClockFreq+0x40>
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	f200 80e1 	bhi.w	8003110 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d002      	beq.n	8002f58 <HAL_RCC_GetSysClockFreq+0x34>
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d003      	beq.n	8002f5e <HAL_RCC_GetSysClockFreq+0x3a>
 8002f56:	e0db      	b.n	8003110 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f58:	4b73      	ldr	r3, [pc, #460]	@ (8003128 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f5a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002f5c:	e0db      	b.n	8003116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f5e:	4b73      	ldr	r3, [pc, #460]	@ (800312c <HAL_RCC_GetSysClockFreq+0x208>)
 8002f60:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f62:	e0d8      	b.n	8003116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f64:	4b6f      	ldr	r3, [pc, #444]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f6c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f6e:	4b6d      	ldr	r3, [pc, #436]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d063      	beq.n	8003042 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f7a:	4b6a      	ldr	r3, [pc, #424]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	099b      	lsrs	r3, r3, #6
 8002f80:	2200      	movs	r2, #0
 8002f82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f84:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f8e:	2300      	movs	r3, #0
 8002f90:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002f96:	4622      	mov	r2, r4
 8002f98:	462b      	mov	r3, r5
 8002f9a:	f04f 0000 	mov.w	r0, #0
 8002f9e:	f04f 0100 	mov.w	r1, #0
 8002fa2:	0159      	lsls	r1, r3, #5
 8002fa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fa8:	0150      	lsls	r0, r2, #5
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	4621      	mov	r1, r4
 8002fb0:	1a51      	subs	r1, r2, r1
 8002fb2:	6139      	str	r1, [r7, #16]
 8002fb4:	4629      	mov	r1, r5
 8002fb6:	eb63 0301 	sbc.w	r3, r3, r1
 8002fba:	617b      	str	r3, [r7, #20]
 8002fbc:	f04f 0200 	mov.w	r2, #0
 8002fc0:	f04f 0300 	mov.w	r3, #0
 8002fc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fc8:	4659      	mov	r1, fp
 8002fca:	018b      	lsls	r3, r1, #6
 8002fcc:	4651      	mov	r1, sl
 8002fce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fd2:	4651      	mov	r1, sl
 8002fd4:	018a      	lsls	r2, r1, #6
 8002fd6:	4651      	mov	r1, sl
 8002fd8:	ebb2 0801 	subs.w	r8, r2, r1
 8002fdc:	4659      	mov	r1, fp
 8002fde:	eb63 0901 	sbc.w	r9, r3, r1
 8002fe2:	f04f 0200 	mov.w	r2, #0
 8002fe6:	f04f 0300 	mov.w	r3, #0
 8002fea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ff2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ff6:	4690      	mov	r8, r2
 8002ff8:	4699      	mov	r9, r3
 8002ffa:	4623      	mov	r3, r4
 8002ffc:	eb18 0303 	adds.w	r3, r8, r3
 8003000:	60bb      	str	r3, [r7, #8]
 8003002:	462b      	mov	r3, r5
 8003004:	eb49 0303 	adc.w	r3, r9, r3
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	f04f 0200 	mov.w	r2, #0
 800300e:	f04f 0300 	mov.w	r3, #0
 8003012:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003016:	4629      	mov	r1, r5
 8003018:	024b      	lsls	r3, r1, #9
 800301a:	4621      	mov	r1, r4
 800301c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003020:	4621      	mov	r1, r4
 8003022:	024a      	lsls	r2, r1, #9
 8003024:	4610      	mov	r0, r2
 8003026:	4619      	mov	r1, r3
 8003028:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800302a:	2200      	movs	r2, #0
 800302c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800302e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003030:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003034:	f7fd f93c 	bl	80002b0 <__aeabi_uldivmod>
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	4613      	mov	r3, r2
 800303e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003040:	e058      	b.n	80030f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003042:	4b38      	ldr	r3, [pc, #224]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x200>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	099b      	lsrs	r3, r3, #6
 8003048:	2200      	movs	r2, #0
 800304a:	4618      	mov	r0, r3
 800304c:	4611      	mov	r1, r2
 800304e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003052:	623b      	str	r3, [r7, #32]
 8003054:	2300      	movs	r3, #0
 8003056:	627b      	str	r3, [r7, #36]	@ 0x24
 8003058:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800305c:	4642      	mov	r2, r8
 800305e:	464b      	mov	r3, r9
 8003060:	f04f 0000 	mov.w	r0, #0
 8003064:	f04f 0100 	mov.w	r1, #0
 8003068:	0159      	lsls	r1, r3, #5
 800306a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800306e:	0150      	lsls	r0, r2, #5
 8003070:	4602      	mov	r2, r0
 8003072:	460b      	mov	r3, r1
 8003074:	4641      	mov	r1, r8
 8003076:	ebb2 0a01 	subs.w	sl, r2, r1
 800307a:	4649      	mov	r1, r9
 800307c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	f04f 0300 	mov.w	r3, #0
 8003088:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800308c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003090:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003094:	ebb2 040a 	subs.w	r4, r2, sl
 8003098:	eb63 050b 	sbc.w	r5, r3, fp
 800309c:	f04f 0200 	mov.w	r2, #0
 80030a0:	f04f 0300 	mov.w	r3, #0
 80030a4:	00eb      	lsls	r3, r5, #3
 80030a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030aa:	00e2      	lsls	r2, r4, #3
 80030ac:	4614      	mov	r4, r2
 80030ae:	461d      	mov	r5, r3
 80030b0:	4643      	mov	r3, r8
 80030b2:	18e3      	adds	r3, r4, r3
 80030b4:	603b      	str	r3, [r7, #0]
 80030b6:	464b      	mov	r3, r9
 80030b8:	eb45 0303 	adc.w	r3, r5, r3
 80030bc:	607b      	str	r3, [r7, #4]
 80030be:	f04f 0200 	mov.w	r2, #0
 80030c2:	f04f 0300 	mov.w	r3, #0
 80030c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030ca:	4629      	mov	r1, r5
 80030cc:	028b      	lsls	r3, r1, #10
 80030ce:	4621      	mov	r1, r4
 80030d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030d4:	4621      	mov	r1, r4
 80030d6:	028a      	lsls	r2, r1, #10
 80030d8:	4610      	mov	r0, r2
 80030da:	4619      	mov	r1, r3
 80030dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030de:	2200      	movs	r2, #0
 80030e0:	61bb      	str	r3, [r7, #24]
 80030e2:	61fa      	str	r2, [r7, #28]
 80030e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030e8:	f7fd f8e2 	bl	80002b0 <__aeabi_uldivmod>
 80030ec:	4602      	mov	r2, r0
 80030ee:	460b      	mov	r3, r1
 80030f0:	4613      	mov	r3, r2
 80030f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003124 <HAL_RCC_GetSysClockFreq+0x200>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	0c1b      	lsrs	r3, r3, #16
 80030fa:	f003 0303 	and.w	r3, r3, #3
 80030fe:	3301      	adds	r3, #1
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003104:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003106:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003108:	fbb2 f3f3 	udiv	r3, r2, r3
 800310c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800310e:	e002      	b.n	8003116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003110:	4b05      	ldr	r3, [pc, #20]	@ (8003128 <HAL_RCC_GetSysClockFreq+0x204>)
 8003112:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003114:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003116:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003118:	4618      	mov	r0, r3
 800311a:	3750      	adds	r7, #80	@ 0x50
 800311c:	46bd      	mov	sp, r7
 800311e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003122:	bf00      	nop
 8003124:	40023800 	.word	0x40023800
 8003128:	00f42400 	.word	0x00f42400
 800312c:	007a1200 	.word	0x007a1200

08003130 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003134:	4b03      	ldr	r3, [pc, #12]	@ (8003144 <HAL_RCC_GetHCLKFreq+0x14>)
 8003136:	681b      	ldr	r3, [r3, #0]
}
 8003138:	4618      	mov	r0, r3
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	20000000 	.word	0x20000000

08003148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800314c:	f7ff fff0 	bl	8003130 <HAL_RCC_GetHCLKFreq>
 8003150:	4602      	mov	r2, r0
 8003152:	4b05      	ldr	r3, [pc, #20]	@ (8003168 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	0a9b      	lsrs	r3, r3, #10
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	4903      	ldr	r1, [pc, #12]	@ (800316c <HAL_RCC_GetPCLK1Freq+0x24>)
 800315e:	5ccb      	ldrb	r3, [r1, r3]
 8003160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003164:	4618      	mov	r0, r3
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40023800 	.word	0x40023800
 800316c:	08005784 	.word	0x08005784

08003170 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003174:	f7ff ffdc 	bl	8003130 <HAL_RCC_GetHCLKFreq>
 8003178:	4602      	mov	r2, r0
 800317a:	4b05      	ldr	r3, [pc, #20]	@ (8003190 <HAL_RCC_GetPCLK2Freq+0x20>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	0b5b      	lsrs	r3, r3, #13
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	4903      	ldr	r1, [pc, #12]	@ (8003194 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003186:	5ccb      	ldrb	r3, [r1, r3]
 8003188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800318c:	4618      	mov	r0, r3
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40023800 	.word	0x40023800
 8003194:	08005784 	.word	0x08005784

08003198 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e042      	b.n	8003230 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d106      	bne.n	80031c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7fd fe54 	bl	8000e6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2224      	movs	r2, #36	@ 0x24
 80031c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 fdbd 	bl	8003d5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	691a      	ldr	r2, [r3, #16]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	695a      	ldr	r2, [r3, #20]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003200:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003210:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2220      	movs	r2, #32
 800321c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2220      	movs	r2, #32
 8003224:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b08a      	sub	sp, #40	@ 0x28
 800323c:	af02      	add	r7, sp, #8
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	603b      	str	r3, [r7, #0]
 8003244:	4613      	mov	r3, r2
 8003246:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003248:	2300      	movs	r3, #0
 800324a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b20      	cmp	r3, #32
 8003256:	d175      	bne.n	8003344 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d002      	beq.n	8003264 <HAL_UART_Transmit+0x2c>
 800325e:	88fb      	ldrh	r3, [r7, #6]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e06e      	b.n	8003346 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2221      	movs	r2, #33	@ 0x21
 8003272:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003276:	f7fe f829 	bl	80012cc <HAL_GetTick>
 800327a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	88fa      	ldrh	r2, [r7, #6]
 8003280:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	88fa      	ldrh	r2, [r7, #6]
 8003286:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003290:	d108      	bne.n	80032a4 <HAL_UART_Transmit+0x6c>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d104      	bne.n	80032a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800329a:	2300      	movs	r3, #0
 800329c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	61bb      	str	r3, [r7, #24]
 80032a2:	e003      	b.n	80032ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032a8:	2300      	movs	r3, #0
 80032aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80032ac:	e02e      	b.n	800330c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	2200      	movs	r2, #0
 80032b6:	2180      	movs	r1, #128	@ 0x80
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f000 fb1f 	bl	80038fc <UART_WaitOnFlagUntilTimeout>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d005      	beq.n	80032d0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2220      	movs	r2, #32
 80032c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e03a      	b.n	8003346 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10b      	bne.n	80032ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	461a      	mov	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	3302      	adds	r3, #2
 80032ea:	61bb      	str	r3, [r7, #24]
 80032ec:	e007      	b.n	80032fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	781a      	ldrb	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	3301      	adds	r3, #1
 80032fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003302:	b29b      	uxth	r3, r3
 8003304:	3b01      	subs	r3, #1
 8003306:	b29a      	uxth	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003310:	b29b      	uxth	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1cb      	bne.n	80032ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	2200      	movs	r2, #0
 800331e:	2140      	movs	r1, #64	@ 0x40
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f000 faeb 	bl	80038fc <UART_WaitOnFlagUntilTimeout>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d005      	beq.n	8003338 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2220      	movs	r2, #32
 8003330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e006      	b.n	8003346 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2220      	movs	r2, #32
 800333c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003340:	2300      	movs	r3, #0
 8003342:	e000      	b.n	8003346 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003344:	2302      	movs	r3, #2
  }
}
 8003346:	4618      	mov	r0, r3
 8003348:	3720      	adds	r7, #32
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b084      	sub	sp, #16
 8003352:	af00      	add	r7, sp, #0
 8003354:	60f8      	str	r0, [r7, #12]
 8003356:	60b9      	str	r1, [r7, #8]
 8003358:	4613      	mov	r3, r2
 800335a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b20      	cmp	r3, #32
 8003366:	d112      	bne.n	800338e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d002      	beq.n	8003374 <HAL_UART_Receive_IT+0x26>
 800336e:	88fb      	ldrh	r3, [r7, #6]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e00b      	b.n	8003390 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800337e:	88fb      	ldrh	r3, [r7, #6]
 8003380:	461a      	mov	r2, r3
 8003382:	68b9      	ldr	r1, [r7, #8]
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f000 fb12 	bl	80039ae <UART_Start_Receive_IT>
 800338a:	4603      	mov	r3, r0
 800338c:	e000      	b.n	8003390 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800338e:	2302      	movs	r3, #2
  }
}
 8003390:	4618      	mov	r0, r3
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b0ba      	sub	sp, #232	@ 0xe8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80033be:	2300      	movs	r3, #0
 80033c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80033ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80033d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10f      	bne.n	80033fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033e2:	f003 0320 	and.w	r3, r3, #32
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d009      	beq.n	80033fe <HAL_UART_IRQHandler+0x66>
 80033ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033ee:	f003 0320 	and.w	r3, r3, #32
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 fbf2 	bl	8003be0 <UART_Receive_IT>
      return;
 80033fc:	e25b      	b.n	80038b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80033fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 80de 	beq.w	80035c4 <HAL_UART_IRQHandler+0x22c>
 8003408:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b00      	cmp	r3, #0
 8003412:	d106      	bne.n	8003422 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003418:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 80d1 	beq.w	80035c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00b      	beq.n	8003446 <HAL_UART_IRQHandler+0xae>
 800342e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003432:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003436:	2b00      	cmp	r3, #0
 8003438:	d005      	beq.n	8003446 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800343e:	f043 0201 	orr.w	r2, r3, #1
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800344a:	f003 0304 	and.w	r3, r3, #4
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00b      	beq.n	800346a <HAL_UART_IRQHandler+0xd2>
 8003452:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d005      	beq.n	800346a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003462:	f043 0202 	orr.w	r2, r3, #2
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800346a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00b      	beq.n	800348e <HAL_UART_IRQHandler+0xf6>
 8003476:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d005      	beq.n	800348e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003486:	f043 0204 	orr.w	r2, r3, #4
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800348e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003492:	f003 0308 	and.w	r3, r3, #8
 8003496:	2b00      	cmp	r3, #0
 8003498:	d011      	beq.n	80034be <HAL_UART_IRQHandler+0x126>
 800349a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800349e:	f003 0320 	and.w	r3, r3, #32
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d105      	bne.n	80034b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80034a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d005      	beq.n	80034be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034b6:	f043 0208 	orr.w	r2, r3, #8
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f000 81f2 	beq.w	80038ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034cc:	f003 0320 	and.w	r3, r3, #32
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <HAL_UART_IRQHandler+0x14e>
 80034d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034d8:	f003 0320 	and.w	r3, r3, #32
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d002      	beq.n	80034e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 fb7d 	bl	8003be0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034f0:	2b40      	cmp	r3, #64	@ 0x40
 80034f2:	bf0c      	ite	eq
 80034f4:	2301      	moveq	r3, #1
 80034f6:	2300      	movne	r3, #0
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b00      	cmp	r3, #0
 8003508:	d103      	bne.n	8003512 <HAL_UART_IRQHandler+0x17a>
 800350a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800350e:	2b00      	cmp	r3, #0
 8003510:	d04f      	beq.n	80035b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 fa85 	bl	8003a22 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003522:	2b40      	cmp	r3, #64	@ 0x40
 8003524:	d141      	bne.n	80035aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	3314      	adds	r3, #20
 800352c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003530:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003534:	e853 3f00 	ldrex	r3, [r3]
 8003538:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800353c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003540:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003544:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	3314      	adds	r3, #20
 800354e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003552:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003556:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800355e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003562:	e841 2300 	strex	r3, r2, [r1]
 8003566:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800356a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1d9      	bne.n	8003526 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003576:	2b00      	cmp	r3, #0
 8003578:	d013      	beq.n	80035a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800357e:	4a7e      	ldr	r2, [pc, #504]	@ (8003778 <HAL_UART_IRQHandler+0x3e0>)
 8003580:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003586:	4618      	mov	r0, r3
 8003588:	f7fe fd44 	bl	8002014 <HAL_DMA_Abort_IT>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d016      	beq.n	80035c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003596:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800359c:	4610      	mov	r0, r2
 800359e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a0:	e00e      	b.n	80035c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f994 	bl	80038d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a8:	e00a      	b.n	80035c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f990 	bl	80038d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035b0:	e006      	b.n	80035c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f98c 	bl	80038d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80035be:	e175      	b.n	80038ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035c0:	bf00      	nop
    return;
 80035c2:	e173      	b.n	80038ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	f040 814f 	bne.w	800386c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80035ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035d2:	f003 0310 	and.w	r3, r3, #16
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 8148 	beq.w	800386c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80035dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035e0:	f003 0310 	and.w	r3, r3, #16
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 8141 	beq.w	800386c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035ea:	2300      	movs	r3, #0
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	60bb      	str	r3, [r7, #8]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	60bb      	str	r3, [r7, #8]
 80035fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800360a:	2b40      	cmp	r3, #64	@ 0x40
 800360c:	f040 80b6 	bne.w	800377c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800361c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 8145 	beq.w	80038b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800362a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800362e:	429a      	cmp	r2, r3
 8003630:	f080 813e 	bcs.w	80038b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800363a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003646:	f000 8088 	beq.w	800375a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	330c      	adds	r3, #12
 8003650:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003654:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003658:	e853 3f00 	ldrex	r3, [r3]
 800365c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003660:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003664:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003668:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	330c      	adds	r3, #12
 8003672:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003676:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800367a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003682:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003686:	e841 2300 	strex	r3, r2, [r1]
 800368a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800368e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1d9      	bne.n	800364a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	3314      	adds	r3, #20
 800369c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800369e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036a0:	e853 3f00 	ldrex	r3, [r3]
 80036a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80036a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80036a8:	f023 0301 	bic.w	r3, r3, #1
 80036ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	3314      	adds	r3, #20
 80036b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80036ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80036be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80036c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80036c6:	e841 2300 	strex	r3, r2, [r1]
 80036ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80036cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1e1      	bne.n	8003696 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	3314      	adds	r3, #20
 80036d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80036dc:	e853 3f00 	ldrex	r3, [r3]
 80036e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80036e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	3314      	adds	r3, #20
 80036f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80036f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80036f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80036fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80036fe:	e841 2300 	strex	r3, r2, [r1]
 8003702:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003704:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1e3      	bne.n	80036d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2220      	movs	r2, #32
 800370e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	330c      	adds	r3, #12
 800371e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003720:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003722:	e853 3f00 	ldrex	r3, [r3]
 8003726:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003728:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800372a:	f023 0310 	bic.w	r3, r3, #16
 800372e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	330c      	adds	r3, #12
 8003738:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800373c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800373e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003740:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003742:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003744:	e841 2300 	strex	r3, r2, [r1]
 8003748:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800374a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1e3      	bne.n	8003718 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003754:	4618      	mov	r0, r3
 8003756:	f7fe fbed 	bl	8001f34 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2202      	movs	r2, #2
 800375e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003768:	b29b      	uxth	r3, r3
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	b29b      	uxth	r3, r3
 800376e:	4619      	mov	r1, r3
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 f8b7 	bl	80038e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003776:	e09b      	b.n	80038b0 <HAL_UART_IRQHandler+0x518>
 8003778:	08003ae9 	.word	0x08003ae9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003784:	b29b      	uxth	r3, r3
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003790:	b29b      	uxth	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	f000 808e 	beq.w	80038b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003798:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 8089 	beq.w	80038b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	330c      	adds	r3, #12
 80037a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037ac:	e853 3f00 	ldrex	r3, [r3]
 80037b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80037b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	330c      	adds	r3, #12
 80037c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80037c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80037c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80037cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037ce:	e841 2300 	strex	r3, r2, [r1]
 80037d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80037d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1e3      	bne.n	80037a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	3314      	adds	r3, #20
 80037e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e4:	e853 3f00 	ldrex	r3, [r3]
 80037e8:	623b      	str	r3, [r7, #32]
   return(result);
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	f023 0301 	bic.w	r3, r3, #1
 80037f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	3314      	adds	r3, #20
 80037fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80037fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8003800:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003802:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003804:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003806:	e841 2300 	strex	r3, r2, [r1]
 800380a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800380c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1e3      	bne.n	80037da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2220      	movs	r2, #32
 8003816:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	330c      	adds	r3, #12
 8003826:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	e853 3f00 	ldrex	r3, [r3]
 800382e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f023 0310 	bic.w	r3, r3, #16
 8003836:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	330c      	adds	r3, #12
 8003840:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003844:	61fa      	str	r2, [r7, #28]
 8003846:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003848:	69b9      	ldr	r1, [r7, #24]
 800384a:	69fa      	ldr	r2, [r7, #28]
 800384c:	e841 2300 	strex	r3, r2, [r1]
 8003850:	617b      	str	r3, [r7, #20]
   return(result);
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1e3      	bne.n	8003820 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2202      	movs	r2, #2
 800385c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800385e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003862:	4619      	mov	r1, r3
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 f83d 	bl	80038e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800386a:	e023      	b.n	80038b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800386c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003870:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003874:	2b00      	cmp	r3, #0
 8003876:	d009      	beq.n	800388c <HAL_UART_IRQHandler+0x4f4>
 8003878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800387c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003880:	2b00      	cmp	r3, #0
 8003882:	d003      	beq.n	800388c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 f943 	bl	8003b10 <UART_Transmit_IT>
    return;
 800388a:	e014      	b.n	80038b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800388c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00e      	beq.n	80038b6 <HAL_UART_IRQHandler+0x51e>
 8003898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800389c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d008      	beq.n	80038b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 f983 	bl	8003bb0 <UART_EndTransmit_IT>
    return;
 80038aa:	e004      	b.n	80038b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80038ac:	bf00      	nop
 80038ae:	e002      	b.n	80038b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80038b0:	bf00      	nop
 80038b2:	e000      	b.n	80038b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80038b4:	bf00      	nop
  }
}
 80038b6:	37e8      	adds	r7, #232	@ 0xe8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	460b      	mov	r3, r1
 80038ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	603b      	str	r3, [r7, #0]
 8003908:	4613      	mov	r3, r2
 800390a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800390c:	e03b      	b.n	8003986 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800390e:	6a3b      	ldr	r3, [r7, #32]
 8003910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003914:	d037      	beq.n	8003986 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003916:	f7fd fcd9 	bl	80012cc <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	6a3a      	ldr	r2, [r7, #32]
 8003922:	429a      	cmp	r2, r3
 8003924:	d302      	bcc.n	800392c <UART_WaitOnFlagUntilTimeout+0x30>
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e03a      	b.n	80039a6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	f003 0304 	and.w	r3, r3, #4
 800393a:	2b00      	cmp	r3, #0
 800393c:	d023      	beq.n	8003986 <UART_WaitOnFlagUntilTimeout+0x8a>
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	2b80      	cmp	r3, #128	@ 0x80
 8003942:	d020      	beq.n	8003986 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	2b40      	cmp	r3, #64	@ 0x40
 8003948:	d01d      	beq.n	8003986 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0308 	and.w	r3, r3, #8
 8003954:	2b08      	cmp	r3, #8
 8003956:	d116      	bne.n	8003986 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003958:	2300      	movs	r3, #0
 800395a:	617b      	str	r3, [r7, #20]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	617b      	str	r3, [r7, #20]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	617b      	str	r3, [r7, #20]
 800396c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f000 f857 	bl	8003a22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2208      	movs	r2, #8
 8003978:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e00f      	b.n	80039a6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	4013      	ands	r3, r2
 8003990:	68ba      	ldr	r2, [r7, #8]
 8003992:	429a      	cmp	r2, r3
 8003994:	bf0c      	ite	eq
 8003996:	2301      	moveq	r3, #1
 8003998:	2300      	movne	r3, #0
 800399a:	b2db      	uxtb	r3, r3
 800399c:	461a      	mov	r2, r3
 800399e:	79fb      	ldrb	r3, [r7, #7]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d0b4      	beq.n	800390e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3718      	adds	r7, #24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b085      	sub	sp, #20
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	60f8      	str	r0, [r7, #12]
 80039b6:	60b9      	str	r1, [r7, #8]
 80039b8:	4613      	mov	r3, r2
 80039ba:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	88fa      	ldrh	r2, [r7, #6]
 80039c6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	88fa      	ldrh	r2, [r7, #6]
 80039cc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2222      	movs	r2, #34	@ 0x22
 80039d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d007      	beq.n	80039f4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68da      	ldr	r2, [r3, #12]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039f2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	695a      	ldr	r2, [r3, #20]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f042 0201 	orr.w	r2, r2, #1
 8003a02:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68da      	ldr	r2, [r3, #12]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f042 0220 	orr.w	r2, r2, #32
 8003a12:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr

08003a22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b095      	sub	sp, #84	@ 0x54
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	330c      	adds	r3, #12
 8003a30:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a34:	e853 3f00 	ldrex	r3, [r3]
 8003a38:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	330c      	adds	r3, #12
 8003a48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a4a:	643a      	str	r2, [r7, #64]	@ 0x40
 8003a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a50:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a52:	e841 2300 	strex	r3, r2, [r1]
 8003a56:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1e5      	bne.n	8003a2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	3314      	adds	r3, #20
 8003a64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	e853 3f00 	ldrex	r3, [r3]
 8003a6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	f023 0301 	bic.w	r3, r3, #1
 8003a74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	3314      	adds	r3, #20
 8003a7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a80:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a86:	e841 2300 	strex	r3, r2, [r1]
 8003a8a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1e5      	bne.n	8003a5e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d119      	bne.n	8003ace <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	330c      	adds	r3, #12
 8003aa0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	e853 3f00 	ldrex	r3, [r3]
 8003aa8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	f023 0310 	bic.w	r3, r3, #16
 8003ab0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	330c      	adds	r3, #12
 8003ab8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003aba:	61ba      	str	r2, [r7, #24]
 8003abc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003abe:	6979      	ldr	r1, [r7, #20]
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	e841 2300 	strex	r3, r2, [r1]
 8003ac6:	613b      	str	r3, [r7, #16]
   return(result);
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1e5      	bne.n	8003a9a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003adc:	bf00      	nop
 8003ade:	3754      	adds	r7, #84	@ 0x54
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f7ff fee4 	bl	80038d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b08:	bf00      	nop
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b21      	cmp	r3, #33	@ 0x21
 8003b22:	d13e      	bne.n	8003ba2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b2c:	d114      	bne.n	8003b58 <UART_Transmit_IT+0x48>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d110      	bne.n	8003b58 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	881b      	ldrh	r3, [r3, #0]
 8003b40:	461a      	mov	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b4a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	1c9a      	adds	r2, r3, #2
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	621a      	str	r2, [r3, #32]
 8003b56:	e008      	b.n	8003b6a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	1c59      	adds	r1, r3, #1
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6211      	str	r1, [r2, #32]
 8003b62:	781a      	ldrb	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	3b01      	subs	r3, #1
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	4619      	mov	r1, r3
 8003b78:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10f      	bne.n	8003b9e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68da      	ldr	r2, [r3, #12]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b8c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68da      	ldr	r2, [r3, #12]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b9c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	e000      	b.n	8003ba4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ba2:	2302      	movs	r3, #2
  }
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3714      	adds	r7, #20
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68da      	ldr	r2, [r3, #12]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bc6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7ff fe73 	bl	80038bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3708      	adds	r7, #8
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b08c      	sub	sp, #48	@ 0x30
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b22      	cmp	r3, #34	@ 0x22
 8003bf2:	f040 80ae 	bne.w	8003d52 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bfe:	d117      	bne.n	8003c30 <UART_Receive_IT+0x50>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d113      	bne.n	8003c30 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c10:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c22:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c28:	1c9a      	adds	r2, r3, #2
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c2e:	e026      	b.n	8003c7e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003c36:	2300      	movs	r3, #0
 8003c38:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c42:	d007      	beq.n	8003c54 <UART_Receive_IT+0x74>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10a      	bne.n	8003c62 <UART_Receive_IT+0x82>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d106      	bne.n	8003c62 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c5e:	701a      	strb	r2, [r3, #0]
 8003c60:	e008      	b.n	8003c74 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c6e:	b2da      	uxtb	r2, r3
 8003c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c72:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c78:	1c5a      	adds	r2, r3, #1
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	3b01      	subs	r3, #1
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d15d      	bne.n	8003d4e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68da      	ldr	r2, [r3, #12]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 0220 	bic.w	r2, r2, #32
 8003ca0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68da      	ldr	r2, [r3, #12]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003cb0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	695a      	ldr	r2, [r3, #20]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 0201 	bic.w	r2, r2, #1
 8003cc0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2220      	movs	r2, #32
 8003cc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d135      	bne.n	8003d44 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	330c      	adds	r3, #12
 8003ce4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	e853 3f00 	ldrex	r3, [r3]
 8003cec:	613b      	str	r3, [r7, #16]
   return(result);
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	f023 0310 	bic.w	r3, r3, #16
 8003cf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	330c      	adds	r3, #12
 8003cfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cfe:	623a      	str	r2, [r7, #32]
 8003d00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d02:	69f9      	ldr	r1, [r7, #28]
 8003d04:	6a3a      	ldr	r2, [r7, #32]
 8003d06:	e841 2300 	strex	r3, r2, [r1]
 8003d0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1e5      	bne.n	8003cde <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0310 	and.w	r3, r3, #16
 8003d1c:	2b10      	cmp	r3, #16
 8003d1e:	d10a      	bne.n	8003d36 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d20:	2300      	movs	r3, #0
 8003d22:	60fb      	str	r3, [r7, #12]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	60fb      	str	r3, [r7, #12]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	60fb      	str	r3, [r7, #12]
 8003d34:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7ff fdd1 	bl	80038e4 <HAL_UARTEx_RxEventCallback>
 8003d42:	e002      	b.n	8003d4a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f7fc ff6f 	bl	8000c28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	e002      	b.n	8003d54 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	e000      	b.n	8003d54 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003d52:	2302      	movs	r3, #2
  }
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3730      	adds	r7, #48	@ 0x30
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d60:	b0c0      	sub	sp, #256	@ 0x100
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d78:	68d9      	ldr	r1, [r3, #12]
 8003d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	ea40 0301 	orr.w	r3, r0, r1
 8003d84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	431a      	orrs	r2, r3
 8003d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da0:	69db      	ldr	r3, [r3, #28]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003db4:	f021 010c 	bic.w	r1, r1, #12
 8003db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003dc2:	430b      	orrs	r3, r1
 8003dc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd6:	6999      	ldr	r1, [r3, #24]
 8003dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	ea40 0301 	orr.w	r3, r0, r1
 8003de2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	4b8f      	ldr	r3, [pc, #572]	@ (8004028 <UART_SetConfig+0x2cc>)
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d005      	beq.n	8003dfc <UART_SetConfig+0xa0>
 8003df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	4b8d      	ldr	r3, [pc, #564]	@ (800402c <UART_SetConfig+0x2d0>)
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d104      	bne.n	8003e06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003dfc:	f7ff f9b8 	bl	8003170 <HAL_RCC_GetPCLK2Freq>
 8003e00:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003e04:	e003      	b.n	8003e0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e06:	f7ff f99f 	bl	8003148 <HAL_RCC_GetPCLK1Freq>
 8003e0a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e12:	69db      	ldr	r3, [r3, #28]
 8003e14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e18:	f040 810c 	bne.w	8004034 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e20:	2200      	movs	r2, #0
 8003e22:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e26:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003e2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003e2e:	4622      	mov	r2, r4
 8003e30:	462b      	mov	r3, r5
 8003e32:	1891      	adds	r1, r2, r2
 8003e34:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003e36:	415b      	adcs	r3, r3
 8003e38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003e3e:	4621      	mov	r1, r4
 8003e40:	eb12 0801 	adds.w	r8, r2, r1
 8003e44:	4629      	mov	r1, r5
 8003e46:	eb43 0901 	adc.w	r9, r3, r1
 8003e4a:	f04f 0200 	mov.w	r2, #0
 8003e4e:	f04f 0300 	mov.w	r3, #0
 8003e52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e5e:	4690      	mov	r8, r2
 8003e60:	4699      	mov	r9, r3
 8003e62:	4623      	mov	r3, r4
 8003e64:	eb18 0303 	adds.w	r3, r8, r3
 8003e68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e6c:	462b      	mov	r3, r5
 8003e6e:	eb49 0303 	adc.w	r3, r9, r3
 8003e72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e82:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003e86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	18db      	adds	r3, r3, r3
 8003e8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e90:	4613      	mov	r3, r2
 8003e92:	eb42 0303 	adc.w	r3, r2, r3
 8003e96:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003e9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003ea0:	f7fc fa06 	bl	80002b0 <__aeabi_uldivmod>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	4b61      	ldr	r3, [pc, #388]	@ (8004030 <UART_SetConfig+0x2d4>)
 8003eaa:	fba3 2302 	umull	r2, r3, r3, r2
 8003eae:	095b      	lsrs	r3, r3, #5
 8003eb0:	011c      	lsls	r4, r3, #4
 8003eb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ebc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003ec0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003ec4:	4642      	mov	r2, r8
 8003ec6:	464b      	mov	r3, r9
 8003ec8:	1891      	adds	r1, r2, r2
 8003eca:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003ecc:	415b      	adcs	r3, r3
 8003ece:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ed0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003ed4:	4641      	mov	r1, r8
 8003ed6:	eb12 0a01 	adds.w	sl, r2, r1
 8003eda:	4649      	mov	r1, r9
 8003edc:	eb43 0b01 	adc.w	fp, r3, r1
 8003ee0:	f04f 0200 	mov.w	r2, #0
 8003ee4:	f04f 0300 	mov.w	r3, #0
 8003ee8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003eec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ef0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ef4:	4692      	mov	sl, r2
 8003ef6:	469b      	mov	fp, r3
 8003ef8:	4643      	mov	r3, r8
 8003efa:	eb1a 0303 	adds.w	r3, sl, r3
 8003efe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f02:	464b      	mov	r3, r9
 8003f04:	eb4b 0303 	adc.w	r3, fp, r3
 8003f08:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f18:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003f1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f20:	460b      	mov	r3, r1
 8003f22:	18db      	adds	r3, r3, r3
 8003f24:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f26:	4613      	mov	r3, r2
 8003f28:	eb42 0303 	adc.w	r3, r2, r3
 8003f2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003f32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003f36:	f7fc f9bb 	bl	80002b0 <__aeabi_uldivmod>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	4611      	mov	r1, r2
 8003f40:	4b3b      	ldr	r3, [pc, #236]	@ (8004030 <UART_SetConfig+0x2d4>)
 8003f42:	fba3 2301 	umull	r2, r3, r3, r1
 8003f46:	095b      	lsrs	r3, r3, #5
 8003f48:	2264      	movs	r2, #100	@ 0x64
 8003f4a:	fb02 f303 	mul.w	r3, r2, r3
 8003f4e:	1acb      	subs	r3, r1, r3
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003f56:	4b36      	ldr	r3, [pc, #216]	@ (8004030 <UART_SetConfig+0x2d4>)
 8003f58:	fba3 2302 	umull	r2, r3, r3, r2
 8003f5c:	095b      	lsrs	r3, r3, #5
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003f64:	441c      	add	r4, r3
 8003f66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f70:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003f74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003f78:	4642      	mov	r2, r8
 8003f7a:	464b      	mov	r3, r9
 8003f7c:	1891      	adds	r1, r2, r2
 8003f7e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f80:	415b      	adcs	r3, r3
 8003f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003f88:	4641      	mov	r1, r8
 8003f8a:	1851      	adds	r1, r2, r1
 8003f8c:	6339      	str	r1, [r7, #48]	@ 0x30
 8003f8e:	4649      	mov	r1, r9
 8003f90:	414b      	adcs	r3, r1
 8003f92:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f94:	f04f 0200 	mov.w	r2, #0
 8003f98:	f04f 0300 	mov.w	r3, #0
 8003f9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003fa0:	4659      	mov	r1, fp
 8003fa2:	00cb      	lsls	r3, r1, #3
 8003fa4:	4651      	mov	r1, sl
 8003fa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003faa:	4651      	mov	r1, sl
 8003fac:	00ca      	lsls	r2, r1, #3
 8003fae:	4610      	mov	r0, r2
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	4642      	mov	r2, r8
 8003fb6:	189b      	adds	r3, r3, r2
 8003fb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003fbc:	464b      	mov	r3, r9
 8003fbe:	460a      	mov	r2, r1
 8003fc0:	eb42 0303 	adc.w	r3, r2, r3
 8003fc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003fd4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003fd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003fdc:	460b      	mov	r3, r1
 8003fde:	18db      	adds	r3, r3, r3
 8003fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	eb42 0303 	adc.w	r3, r2, r3
 8003fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003fee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003ff2:	f7fc f95d 	bl	80002b0 <__aeabi_uldivmod>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8004030 <UART_SetConfig+0x2d4>)
 8003ffc:	fba3 1302 	umull	r1, r3, r3, r2
 8004000:	095b      	lsrs	r3, r3, #5
 8004002:	2164      	movs	r1, #100	@ 0x64
 8004004:	fb01 f303 	mul.w	r3, r1, r3
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	3332      	adds	r3, #50	@ 0x32
 800400e:	4a08      	ldr	r2, [pc, #32]	@ (8004030 <UART_SetConfig+0x2d4>)
 8004010:	fba2 2303 	umull	r2, r3, r2, r3
 8004014:	095b      	lsrs	r3, r3, #5
 8004016:	f003 0207 	and.w	r2, r3, #7
 800401a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4422      	add	r2, r4
 8004022:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004024:	e106      	b.n	8004234 <UART_SetConfig+0x4d8>
 8004026:	bf00      	nop
 8004028:	40011000 	.word	0x40011000
 800402c:	40011400 	.word	0x40011400
 8004030:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004034:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004038:	2200      	movs	r2, #0
 800403a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800403e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004042:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004046:	4642      	mov	r2, r8
 8004048:	464b      	mov	r3, r9
 800404a:	1891      	adds	r1, r2, r2
 800404c:	6239      	str	r1, [r7, #32]
 800404e:	415b      	adcs	r3, r3
 8004050:	627b      	str	r3, [r7, #36]	@ 0x24
 8004052:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004056:	4641      	mov	r1, r8
 8004058:	1854      	adds	r4, r2, r1
 800405a:	4649      	mov	r1, r9
 800405c:	eb43 0501 	adc.w	r5, r3, r1
 8004060:	f04f 0200 	mov.w	r2, #0
 8004064:	f04f 0300 	mov.w	r3, #0
 8004068:	00eb      	lsls	r3, r5, #3
 800406a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800406e:	00e2      	lsls	r2, r4, #3
 8004070:	4614      	mov	r4, r2
 8004072:	461d      	mov	r5, r3
 8004074:	4643      	mov	r3, r8
 8004076:	18e3      	adds	r3, r4, r3
 8004078:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800407c:	464b      	mov	r3, r9
 800407e:	eb45 0303 	adc.w	r3, r5, r3
 8004082:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004092:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004096:	f04f 0200 	mov.w	r2, #0
 800409a:	f04f 0300 	mov.w	r3, #0
 800409e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80040a2:	4629      	mov	r1, r5
 80040a4:	008b      	lsls	r3, r1, #2
 80040a6:	4621      	mov	r1, r4
 80040a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040ac:	4621      	mov	r1, r4
 80040ae:	008a      	lsls	r2, r1, #2
 80040b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80040b4:	f7fc f8fc 	bl	80002b0 <__aeabi_uldivmod>
 80040b8:	4602      	mov	r2, r0
 80040ba:	460b      	mov	r3, r1
 80040bc:	4b60      	ldr	r3, [pc, #384]	@ (8004240 <UART_SetConfig+0x4e4>)
 80040be:	fba3 2302 	umull	r2, r3, r3, r2
 80040c2:	095b      	lsrs	r3, r3, #5
 80040c4:	011c      	lsls	r4, r3, #4
 80040c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040ca:	2200      	movs	r2, #0
 80040cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80040d0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80040d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80040d8:	4642      	mov	r2, r8
 80040da:	464b      	mov	r3, r9
 80040dc:	1891      	adds	r1, r2, r2
 80040de:	61b9      	str	r1, [r7, #24]
 80040e0:	415b      	adcs	r3, r3
 80040e2:	61fb      	str	r3, [r7, #28]
 80040e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040e8:	4641      	mov	r1, r8
 80040ea:	1851      	adds	r1, r2, r1
 80040ec:	6139      	str	r1, [r7, #16]
 80040ee:	4649      	mov	r1, r9
 80040f0:	414b      	adcs	r3, r1
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	f04f 0200 	mov.w	r2, #0
 80040f8:	f04f 0300 	mov.w	r3, #0
 80040fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004100:	4659      	mov	r1, fp
 8004102:	00cb      	lsls	r3, r1, #3
 8004104:	4651      	mov	r1, sl
 8004106:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800410a:	4651      	mov	r1, sl
 800410c:	00ca      	lsls	r2, r1, #3
 800410e:	4610      	mov	r0, r2
 8004110:	4619      	mov	r1, r3
 8004112:	4603      	mov	r3, r0
 8004114:	4642      	mov	r2, r8
 8004116:	189b      	adds	r3, r3, r2
 8004118:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800411c:	464b      	mov	r3, r9
 800411e:	460a      	mov	r2, r1
 8004120:	eb42 0303 	adc.w	r3, r2, r3
 8004124:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004132:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004134:	f04f 0200 	mov.w	r2, #0
 8004138:	f04f 0300 	mov.w	r3, #0
 800413c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004140:	4649      	mov	r1, r9
 8004142:	008b      	lsls	r3, r1, #2
 8004144:	4641      	mov	r1, r8
 8004146:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800414a:	4641      	mov	r1, r8
 800414c:	008a      	lsls	r2, r1, #2
 800414e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004152:	f7fc f8ad 	bl	80002b0 <__aeabi_uldivmod>
 8004156:	4602      	mov	r2, r0
 8004158:	460b      	mov	r3, r1
 800415a:	4611      	mov	r1, r2
 800415c:	4b38      	ldr	r3, [pc, #224]	@ (8004240 <UART_SetConfig+0x4e4>)
 800415e:	fba3 2301 	umull	r2, r3, r3, r1
 8004162:	095b      	lsrs	r3, r3, #5
 8004164:	2264      	movs	r2, #100	@ 0x64
 8004166:	fb02 f303 	mul.w	r3, r2, r3
 800416a:	1acb      	subs	r3, r1, r3
 800416c:	011b      	lsls	r3, r3, #4
 800416e:	3332      	adds	r3, #50	@ 0x32
 8004170:	4a33      	ldr	r2, [pc, #204]	@ (8004240 <UART_SetConfig+0x4e4>)
 8004172:	fba2 2303 	umull	r2, r3, r2, r3
 8004176:	095b      	lsrs	r3, r3, #5
 8004178:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800417c:	441c      	add	r4, r3
 800417e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004182:	2200      	movs	r2, #0
 8004184:	673b      	str	r3, [r7, #112]	@ 0x70
 8004186:	677a      	str	r2, [r7, #116]	@ 0x74
 8004188:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800418c:	4642      	mov	r2, r8
 800418e:	464b      	mov	r3, r9
 8004190:	1891      	adds	r1, r2, r2
 8004192:	60b9      	str	r1, [r7, #8]
 8004194:	415b      	adcs	r3, r3
 8004196:	60fb      	str	r3, [r7, #12]
 8004198:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800419c:	4641      	mov	r1, r8
 800419e:	1851      	adds	r1, r2, r1
 80041a0:	6039      	str	r1, [r7, #0]
 80041a2:	4649      	mov	r1, r9
 80041a4:	414b      	adcs	r3, r1
 80041a6:	607b      	str	r3, [r7, #4]
 80041a8:	f04f 0200 	mov.w	r2, #0
 80041ac:	f04f 0300 	mov.w	r3, #0
 80041b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80041b4:	4659      	mov	r1, fp
 80041b6:	00cb      	lsls	r3, r1, #3
 80041b8:	4651      	mov	r1, sl
 80041ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041be:	4651      	mov	r1, sl
 80041c0:	00ca      	lsls	r2, r1, #3
 80041c2:	4610      	mov	r0, r2
 80041c4:	4619      	mov	r1, r3
 80041c6:	4603      	mov	r3, r0
 80041c8:	4642      	mov	r2, r8
 80041ca:	189b      	adds	r3, r3, r2
 80041cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041ce:	464b      	mov	r3, r9
 80041d0:	460a      	mov	r2, r1
 80041d2:	eb42 0303 	adc.w	r3, r2, r3
 80041d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80041d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80041e2:	667a      	str	r2, [r7, #100]	@ 0x64
 80041e4:	f04f 0200 	mov.w	r2, #0
 80041e8:	f04f 0300 	mov.w	r3, #0
 80041ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80041f0:	4649      	mov	r1, r9
 80041f2:	008b      	lsls	r3, r1, #2
 80041f4:	4641      	mov	r1, r8
 80041f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041fa:	4641      	mov	r1, r8
 80041fc:	008a      	lsls	r2, r1, #2
 80041fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004202:	f7fc f855 	bl	80002b0 <__aeabi_uldivmod>
 8004206:	4602      	mov	r2, r0
 8004208:	460b      	mov	r3, r1
 800420a:	4b0d      	ldr	r3, [pc, #52]	@ (8004240 <UART_SetConfig+0x4e4>)
 800420c:	fba3 1302 	umull	r1, r3, r3, r2
 8004210:	095b      	lsrs	r3, r3, #5
 8004212:	2164      	movs	r1, #100	@ 0x64
 8004214:	fb01 f303 	mul.w	r3, r1, r3
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	011b      	lsls	r3, r3, #4
 800421c:	3332      	adds	r3, #50	@ 0x32
 800421e:	4a08      	ldr	r2, [pc, #32]	@ (8004240 <UART_SetConfig+0x4e4>)
 8004220:	fba2 2303 	umull	r2, r3, r2, r3
 8004224:	095b      	lsrs	r3, r3, #5
 8004226:	f003 020f 	and.w	r2, r3, #15
 800422a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4422      	add	r2, r4
 8004232:	609a      	str	r2, [r3, #8]
}
 8004234:	bf00      	nop
 8004236:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800423a:	46bd      	mov	sp, r7
 800423c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004240:	51eb851f 	.word	0x51eb851f

08004244 <std>:
 8004244:	2300      	movs	r3, #0
 8004246:	b510      	push	{r4, lr}
 8004248:	4604      	mov	r4, r0
 800424a:	e9c0 3300 	strd	r3, r3, [r0]
 800424e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004252:	6083      	str	r3, [r0, #8]
 8004254:	8181      	strh	r1, [r0, #12]
 8004256:	6643      	str	r3, [r0, #100]	@ 0x64
 8004258:	81c2      	strh	r2, [r0, #14]
 800425a:	6183      	str	r3, [r0, #24]
 800425c:	4619      	mov	r1, r3
 800425e:	2208      	movs	r2, #8
 8004260:	305c      	adds	r0, #92	@ 0x5c
 8004262:	f000 fa19 	bl	8004698 <memset>
 8004266:	4b0d      	ldr	r3, [pc, #52]	@ (800429c <std+0x58>)
 8004268:	6263      	str	r3, [r4, #36]	@ 0x24
 800426a:	4b0d      	ldr	r3, [pc, #52]	@ (80042a0 <std+0x5c>)
 800426c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800426e:	4b0d      	ldr	r3, [pc, #52]	@ (80042a4 <std+0x60>)
 8004270:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004272:	4b0d      	ldr	r3, [pc, #52]	@ (80042a8 <std+0x64>)
 8004274:	6323      	str	r3, [r4, #48]	@ 0x30
 8004276:	4b0d      	ldr	r3, [pc, #52]	@ (80042ac <std+0x68>)
 8004278:	6224      	str	r4, [r4, #32]
 800427a:	429c      	cmp	r4, r3
 800427c:	d006      	beq.n	800428c <std+0x48>
 800427e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004282:	4294      	cmp	r4, r2
 8004284:	d002      	beq.n	800428c <std+0x48>
 8004286:	33d0      	adds	r3, #208	@ 0xd0
 8004288:	429c      	cmp	r4, r3
 800428a:	d105      	bne.n	8004298 <std+0x54>
 800428c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004294:	f000 bad4 	b.w	8004840 <__retarget_lock_init_recursive>
 8004298:	bd10      	pop	{r4, pc}
 800429a:	bf00      	nop
 800429c:	080044e9 	.word	0x080044e9
 80042a0:	0800450b 	.word	0x0800450b
 80042a4:	08004543 	.word	0x08004543
 80042a8:	08004567 	.word	0x08004567
 80042ac:	2000023c 	.word	0x2000023c

080042b0 <stdio_exit_handler>:
 80042b0:	4a02      	ldr	r2, [pc, #8]	@ (80042bc <stdio_exit_handler+0xc>)
 80042b2:	4903      	ldr	r1, [pc, #12]	@ (80042c0 <stdio_exit_handler+0x10>)
 80042b4:	4803      	ldr	r0, [pc, #12]	@ (80042c4 <stdio_exit_handler+0x14>)
 80042b6:	f000 b869 	b.w	800438c <_fwalk_sglue>
 80042ba:	bf00      	nop
 80042bc:	2000000c 	.word	0x2000000c
 80042c0:	080053ed 	.word	0x080053ed
 80042c4:	2000001c 	.word	0x2000001c

080042c8 <cleanup_stdio>:
 80042c8:	6841      	ldr	r1, [r0, #4]
 80042ca:	4b0c      	ldr	r3, [pc, #48]	@ (80042fc <cleanup_stdio+0x34>)
 80042cc:	4299      	cmp	r1, r3
 80042ce:	b510      	push	{r4, lr}
 80042d0:	4604      	mov	r4, r0
 80042d2:	d001      	beq.n	80042d8 <cleanup_stdio+0x10>
 80042d4:	f001 f88a 	bl	80053ec <_fflush_r>
 80042d8:	68a1      	ldr	r1, [r4, #8]
 80042da:	4b09      	ldr	r3, [pc, #36]	@ (8004300 <cleanup_stdio+0x38>)
 80042dc:	4299      	cmp	r1, r3
 80042de:	d002      	beq.n	80042e6 <cleanup_stdio+0x1e>
 80042e0:	4620      	mov	r0, r4
 80042e2:	f001 f883 	bl	80053ec <_fflush_r>
 80042e6:	68e1      	ldr	r1, [r4, #12]
 80042e8:	4b06      	ldr	r3, [pc, #24]	@ (8004304 <cleanup_stdio+0x3c>)
 80042ea:	4299      	cmp	r1, r3
 80042ec:	d004      	beq.n	80042f8 <cleanup_stdio+0x30>
 80042ee:	4620      	mov	r0, r4
 80042f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042f4:	f001 b87a 	b.w	80053ec <_fflush_r>
 80042f8:	bd10      	pop	{r4, pc}
 80042fa:	bf00      	nop
 80042fc:	2000023c 	.word	0x2000023c
 8004300:	200002a4 	.word	0x200002a4
 8004304:	2000030c 	.word	0x2000030c

08004308 <global_stdio_init.part.0>:
 8004308:	b510      	push	{r4, lr}
 800430a:	4b0b      	ldr	r3, [pc, #44]	@ (8004338 <global_stdio_init.part.0+0x30>)
 800430c:	4c0b      	ldr	r4, [pc, #44]	@ (800433c <global_stdio_init.part.0+0x34>)
 800430e:	4a0c      	ldr	r2, [pc, #48]	@ (8004340 <global_stdio_init.part.0+0x38>)
 8004310:	601a      	str	r2, [r3, #0]
 8004312:	4620      	mov	r0, r4
 8004314:	2200      	movs	r2, #0
 8004316:	2104      	movs	r1, #4
 8004318:	f7ff ff94 	bl	8004244 <std>
 800431c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004320:	2201      	movs	r2, #1
 8004322:	2109      	movs	r1, #9
 8004324:	f7ff ff8e 	bl	8004244 <std>
 8004328:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800432c:	2202      	movs	r2, #2
 800432e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004332:	2112      	movs	r1, #18
 8004334:	f7ff bf86 	b.w	8004244 <std>
 8004338:	20000374 	.word	0x20000374
 800433c:	2000023c 	.word	0x2000023c
 8004340:	080042b1 	.word	0x080042b1

08004344 <__sfp_lock_acquire>:
 8004344:	4801      	ldr	r0, [pc, #4]	@ (800434c <__sfp_lock_acquire+0x8>)
 8004346:	f000 ba7c 	b.w	8004842 <__retarget_lock_acquire_recursive>
 800434a:	bf00      	nop
 800434c:	2000037d 	.word	0x2000037d

08004350 <__sfp_lock_release>:
 8004350:	4801      	ldr	r0, [pc, #4]	@ (8004358 <__sfp_lock_release+0x8>)
 8004352:	f000 ba77 	b.w	8004844 <__retarget_lock_release_recursive>
 8004356:	bf00      	nop
 8004358:	2000037d 	.word	0x2000037d

0800435c <__sinit>:
 800435c:	b510      	push	{r4, lr}
 800435e:	4604      	mov	r4, r0
 8004360:	f7ff fff0 	bl	8004344 <__sfp_lock_acquire>
 8004364:	6a23      	ldr	r3, [r4, #32]
 8004366:	b11b      	cbz	r3, 8004370 <__sinit+0x14>
 8004368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800436c:	f7ff bff0 	b.w	8004350 <__sfp_lock_release>
 8004370:	4b04      	ldr	r3, [pc, #16]	@ (8004384 <__sinit+0x28>)
 8004372:	6223      	str	r3, [r4, #32]
 8004374:	4b04      	ldr	r3, [pc, #16]	@ (8004388 <__sinit+0x2c>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1f5      	bne.n	8004368 <__sinit+0xc>
 800437c:	f7ff ffc4 	bl	8004308 <global_stdio_init.part.0>
 8004380:	e7f2      	b.n	8004368 <__sinit+0xc>
 8004382:	bf00      	nop
 8004384:	080042c9 	.word	0x080042c9
 8004388:	20000374 	.word	0x20000374

0800438c <_fwalk_sglue>:
 800438c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004390:	4607      	mov	r7, r0
 8004392:	4688      	mov	r8, r1
 8004394:	4614      	mov	r4, r2
 8004396:	2600      	movs	r6, #0
 8004398:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800439c:	f1b9 0901 	subs.w	r9, r9, #1
 80043a0:	d505      	bpl.n	80043ae <_fwalk_sglue+0x22>
 80043a2:	6824      	ldr	r4, [r4, #0]
 80043a4:	2c00      	cmp	r4, #0
 80043a6:	d1f7      	bne.n	8004398 <_fwalk_sglue+0xc>
 80043a8:	4630      	mov	r0, r6
 80043aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043ae:	89ab      	ldrh	r3, [r5, #12]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d907      	bls.n	80043c4 <_fwalk_sglue+0x38>
 80043b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80043b8:	3301      	adds	r3, #1
 80043ba:	d003      	beq.n	80043c4 <_fwalk_sglue+0x38>
 80043bc:	4629      	mov	r1, r5
 80043be:	4638      	mov	r0, r7
 80043c0:	47c0      	blx	r8
 80043c2:	4306      	orrs	r6, r0
 80043c4:	3568      	adds	r5, #104	@ 0x68
 80043c6:	e7e9      	b.n	800439c <_fwalk_sglue+0x10>

080043c8 <iprintf>:
 80043c8:	b40f      	push	{r0, r1, r2, r3}
 80043ca:	b507      	push	{r0, r1, r2, lr}
 80043cc:	4906      	ldr	r1, [pc, #24]	@ (80043e8 <iprintf+0x20>)
 80043ce:	ab04      	add	r3, sp, #16
 80043d0:	6808      	ldr	r0, [r1, #0]
 80043d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80043d6:	6881      	ldr	r1, [r0, #8]
 80043d8:	9301      	str	r3, [sp, #4]
 80043da:	f000 fcdd 	bl	8004d98 <_vfiprintf_r>
 80043de:	b003      	add	sp, #12
 80043e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80043e4:	b004      	add	sp, #16
 80043e6:	4770      	bx	lr
 80043e8:	20000018 	.word	0x20000018

080043ec <_puts_r>:
 80043ec:	6a03      	ldr	r3, [r0, #32]
 80043ee:	b570      	push	{r4, r5, r6, lr}
 80043f0:	6884      	ldr	r4, [r0, #8]
 80043f2:	4605      	mov	r5, r0
 80043f4:	460e      	mov	r6, r1
 80043f6:	b90b      	cbnz	r3, 80043fc <_puts_r+0x10>
 80043f8:	f7ff ffb0 	bl	800435c <__sinit>
 80043fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80043fe:	07db      	lsls	r3, r3, #31
 8004400:	d405      	bmi.n	800440e <_puts_r+0x22>
 8004402:	89a3      	ldrh	r3, [r4, #12]
 8004404:	0598      	lsls	r0, r3, #22
 8004406:	d402      	bmi.n	800440e <_puts_r+0x22>
 8004408:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800440a:	f000 fa1a 	bl	8004842 <__retarget_lock_acquire_recursive>
 800440e:	89a3      	ldrh	r3, [r4, #12]
 8004410:	0719      	lsls	r1, r3, #28
 8004412:	d502      	bpl.n	800441a <_puts_r+0x2e>
 8004414:	6923      	ldr	r3, [r4, #16]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d135      	bne.n	8004486 <_puts_r+0x9a>
 800441a:	4621      	mov	r1, r4
 800441c:	4628      	mov	r0, r5
 800441e:	f000 f8e5 	bl	80045ec <__swsetup_r>
 8004422:	b380      	cbz	r0, 8004486 <_puts_r+0x9a>
 8004424:	f04f 35ff 	mov.w	r5, #4294967295
 8004428:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800442a:	07da      	lsls	r2, r3, #31
 800442c:	d405      	bmi.n	800443a <_puts_r+0x4e>
 800442e:	89a3      	ldrh	r3, [r4, #12]
 8004430:	059b      	lsls	r3, r3, #22
 8004432:	d402      	bmi.n	800443a <_puts_r+0x4e>
 8004434:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004436:	f000 fa05 	bl	8004844 <__retarget_lock_release_recursive>
 800443a:	4628      	mov	r0, r5
 800443c:	bd70      	pop	{r4, r5, r6, pc}
 800443e:	2b00      	cmp	r3, #0
 8004440:	da04      	bge.n	800444c <_puts_r+0x60>
 8004442:	69a2      	ldr	r2, [r4, #24]
 8004444:	429a      	cmp	r2, r3
 8004446:	dc17      	bgt.n	8004478 <_puts_r+0x8c>
 8004448:	290a      	cmp	r1, #10
 800444a:	d015      	beq.n	8004478 <_puts_r+0x8c>
 800444c:	6823      	ldr	r3, [r4, #0]
 800444e:	1c5a      	adds	r2, r3, #1
 8004450:	6022      	str	r2, [r4, #0]
 8004452:	7019      	strb	r1, [r3, #0]
 8004454:	68a3      	ldr	r3, [r4, #8]
 8004456:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800445a:	3b01      	subs	r3, #1
 800445c:	60a3      	str	r3, [r4, #8]
 800445e:	2900      	cmp	r1, #0
 8004460:	d1ed      	bne.n	800443e <_puts_r+0x52>
 8004462:	2b00      	cmp	r3, #0
 8004464:	da11      	bge.n	800448a <_puts_r+0x9e>
 8004466:	4622      	mov	r2, r4
 8004468:	210a      	movs	r1, #10
 800446a:	4628      	mov	r0, r5
 800446c:	f000 f87f 	bl	800456e <__swbuf_r>
 8004470:	3001      	adds	r0, #1
 8004472:	d0d7      	beq.n	8004424 <_puts_r+0x38>
 8004474:	250a      	movs	r5, #10
 8004476:	e7d7      	b.n	8004428 <_puts_r+0x3c>
 8004478:	4622      	mov	r2, r4
 800447a:	4628      	mov	r0, r5
 800447c:	f000 f877 	bl	800456e <__swbuf_r>
 8004480:	3001      	adds	r0, #1
 8004482:	d1e7      	bne.n	8004454 <_puts_r+0x68>
 8004484:	e7ce      	b.n	8004424 <_puts_r+0x38>
 8004486:	3e01      	subs	r6, #1
 8004488:	e7e4      	b.n	8004454 <_puts_r+0x68>
 800448a:	6823      	ldr	r3, [r4, #0]
 800448c:	1c5a      	adds	r2, r3, #1
 800448e:	6022      	str	r2, [r4, #0]
 8004490:	220a      	movs	r2, #10
 8004492:	701a      	strb	r2, [r3, #0]
 8004494:	e7ee      	b.n	8004474 <_puts_r+0x88>
	...

08004498 <puts>:
 8004498:	4b02      	ldr	r3, [pc, #8]	@ (80044a4 <puts+0xc>)
 800449a:	4601      	mov	r1, r0
 800449c:	6818      	ldr	r0, [r3, #0]
 800449e:	f7ff bfa5 	b.w	80043ec <_puts_r>
 80044a2:	bf00      	nop
 80044a4:	20000018 	.word	0x20000018

080044a8 <siprintf>:
 80044a8:	b40e      	push	{r1, r2, r3}
 80044aa:	b500      	push	{lr}
 80044ac:	b09c      	sub	sp, #112	@ 0x70
 80044ae:	ab1d      	add	r3, sp, #116	@ 0x74
 80044b0:	9002      	str	r0, [sp, #8]
 80044b2:	9006      	str	r0, [sp, #24]
 80044b4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80044b8:	4809      	ldr	r0, [pc, #36]	@ (80044e0 <siprintf+0x38>)
 80044ba:	9107      	str	r1, [sp, #28]
 80044bc:	9104      	str	r1, [sp, #16]
 80044be:	4909      	ldr	r1, [pc, #36]	@ (80044e4 <siprintf+0x3c>)
 80044c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80044c4:	9105      	str	r1, [sp, #20]
 80044c6:	6800      	ldr	r0, [r0, #0]
 80044c8:	9301      	str	r3, [sp, #4]
 80044ca:	a902      	add	r1, sp, #8
 80044cc:	f000 fb3e 	bl	8004b4c <_svfiprintf_r>
 80044d0:	9b02      	ldr	r3, [sp, #8]
 80044d2:	2200      	movs	r2, #0
 80044d4:	701a      	strb	r2, [r3, #0]
 80044d6:	b01c      	add	sp, #112	@ 0x70
 80044d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80044dc:	b003      	add	sp, #12
 80044de:	4770      	bx	lr
 80044e0:	20000018 	.word	0x20000018
 80044e4:	ffff0208 	.word	0xffff0208

080044e8 <__sread>:
 80044e8:	b510      	push	{r4, lr}
 80044ea:	460c      	mov	r4, r1
 80044ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044f0:	f000 f958 	bl	80047a4 <_read_r>
 80044f4:	2800      	cmp	r0, #0
 80044f6:	bfab      	itete	ge
 80044f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80044fa:	89a3      	ldrhlt	r3, [r4, #12]
 80044fc:	181b      	addge	r3, r3, r0
 80044fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004502:	bfac      	ite	ge
 8004504:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004506:	81a3      	strhlt	r3, [r4, #12]
 8004508:	bd10      	pop	{r4, pc}

0800450a <__swrite>:
 800450a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800450e:	461f      	mov	r7, r3
 8004510:	898b      	ldrh	r3, [r1, #12]
 8004512:	05db      	lsls	r3, r3, #23
 8004514:	4605      	mov	r5, r0
 8004516:	460c      	mov	r4, r1
 8004518:	4616      	mov	r6, r2
 800451a:	d505      	bpl.n	8004528 <__swrite+0x1e>
 800451c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004520:	2302      	movs	r3, #2
 8004522:	2200      	movs	r2, #0
 8004524:	f000 f92c 	bl	8004780 <_lseek_r>
 8004528:	89a3      	ldrh	r3, [r4, #12]
 800452a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800452e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004532:	81a3      	strh	r3, [r4, #12]
 8004534:	4632      	mov	r2, r6
 8004536:	463b      	mov	r3, r7
 8004538:	4628      	mov	r0, r5
 800453a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800453e:	f000 b943 	b.w	80047c8 <_write_r>

08004542 <__sseek>:
 8004542:	b510      	push	{r4, lr}
 8004544:	460c      	mov	r4, r1
 8004546:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800454a:	f000 f919 	bl	8004780 <_lseek_r>
 800454e:	1c43      	adds	r3, r0, #1
 8004550:	89a3      	ldrh	r3, [r4, #12]
 8004552:	bf15      	itete	ne
 8004554:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004556:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800455a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800455e:	81a3      	strheq	r3, [r4, #12]
 8004560:	bf18      	it	ne
 8004562:	81a3      	strhne	r3, [r4, #12]
 8004564:	bd10      	pop	{r4, pc}

08004566 <__sclose>:
 8004566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800456a:	f000 b8f9 	b.w	8004760 <_close_r>

0800456e <__swbuf_r>:
 800456e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004570:	460e      	mov	r6, r1
 8004572:	4614      	mov	r4, r2
 8004574:	4605      	mov	r5, r0
 8004576:	b118      	cbz	r0, 8004580 <__swbuf_r+0x12>
 8004578:	6a03      	ldr	r3, [r0, #32]
 800457a:	b90b      	cbnz	r3, 8004580 <__swbuf_r+0x12>
 800457c:	f7ff feee 	bl	800435c <__sinit>
 8004580:	69a3      	ldr	r3, [r4, #24]
 8004582:	60a3      	str	r3, [r4, #8]
 8004584:	89a3      	ldrh	r3, [r4, #12]
 8004586:	071a      	lsls	r2, r3, #28
 8004588:	d501      	bpl.n	800458e <__swbuf_r+0x20>
 800458a:	6923      	ldr	r3, [r4, #16]
 800458c:	b943      	cbnz	r3, 80045a0 <__swbuf_r+0x32>
 800458e:	4621      	mov	r1, r4
 8004590:	4628      	mov	r0, r5
 8004592:	f000 f82b 	bl	80045ec <__swsetup_r>
 8004596:	b118      	cbz	r0, 80045a0 <__swbuf_r+0x32>
 8004598:	f04f 37ff 	mov.w	r7, #4294967295
 800459c:	4638      	mov	r0, r7
 800459e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045a0:	6823      	ldr	r3, [r4, #0]
 80045a2:	6922      	ldr	r2, [r4, #16]
 80045a4:	1a98      	subs	r0, r3, r2
 80045a6:	6963      	ldr	r3, [r4, #20]
 80045a8:	b2f6      	uxtb	r6, r6
 80045aa:	4283      	cmp	r3, r0
 80045ac:	4637      	mov	r7, r6
 80045ae:	dc05      	bgt.n	80045bc <__swbuf_r+0x4e>
 80045b0:	4621      	mov	r1, r4
 80045b2:	4628      	mov	r0, r5
 80045b4:	f000 ff1a 	bl	80053ec <_fflush_r>
 80045b8:	2800      	cmp	r0, #0
 80045ba:	d1ed      	bne.n	8004598 <__swbuf_r+0x2a>
 80045bc:	68a3      	ldr	r3, [r4, #8]
 80045be:	3b01      	subs	r3, #1
 80045c0:	60a3      	str	r3, [r4, #8]
 80045c2:	6823      	ldr	r3, [r4, #0]
 80045c4:	1c5a      	adds	r2, r3, #1
 80045c6:	6022      	str	r2, [r4, #0]
 80045c8:	701e      	strb	r6, [r3, #0]
 80045ca:	6962      	ldr	r2, [r4, #20]
 80045cc:	1c43      	adds	r3, r0, #1
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d004      	beq.n	80045dc <__swbuf_r+0x6e>
 80045d2:	89a3      	ldrh	r3, [r4, #12]
 80045d4:	07db      	lsls	r3, r3, #31
 80045d6:	d5e1      	bpl.n	800459c <__swbuf_r+0x2e>
 80045d8:	2e0a      	cmp	r6, #10
 80045da:	d1df      	bne.n	800459c <__swbuf_r+0x2e>
 80045dc:	4621      	mov	r1, r4
 80045de:	4628      	mov	r0, r5
 80045e0:	f000 ff04 	bl	80053ec <_fflush_r>
 80045e4:	2800      	cmp	r0, #0
 80045e6:	d0d9      	beq.n	800459c <__swbuf_r+0x2e>
 80045e8:	e7d6      	b.n	8004598 <__swbuf_r+0x2a>
	...

080045ec <__swsetup_r>:
 80045ec:	b538      	push	{r3, r4, r5, lr}
 80045ee:	4b29      	ldr	r3, [pc, #164]	@ (8004694 <__swsetup_r+0xa8>)
 80045f0:	4605      	mov	r5, r0
 80045f2:	6818      	ldr	r0, [r3, #0]
 80045f4:	460c      	mov	r4, r1
 80045f6:	b118      	cbz	r0, 8004600 <__swsetup_r+0x14>
 80045f8:	6a03      	ldr	r3, [r0, #32]
 80045fa:	b90b      	cbnz	r3, 8004600 <__swsetup_r+0x14>
 80045fc:	f7ff feae 	bl	800435c <__sinit>
 8004600:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004604:	0719      	lsls	r1, r3, #28
 8004606:	d422      	bmi.n	800464e <__swsetup_r+0x62>
 8004608:	06da      	lsls	r2, r3, #27
 800460a:	d407      	bmi.n	800461c <__swsetup_r+0x30>
 800460c:	2209      	movs	r2, #9
 800460e:	602a      	str	r2, [r5, #0]
 8004610:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004614:	81a3      	strh	r3, [r4, #12]
 8004616:	f04f 30ff 	mov.w	r0, #4294967295
 800461a:	e033      	b.n	8004684 <__swsetup_r+0x98>
 800461c:	0758      	lsls	r0, r3, #29
 800461e:	d512      	bpl.n	8004646 <__swsetup_r+0x5a>
 8004620:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004622:	b141      	cbz	r1, 8004636 <__swsetup_r+0x4a>
 8004624:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004628:	4299      	cmp	r1, r3
 800462a:	d002      	beq.n	8004632 <__swsetup_r+0x46>
 800462c:	4628      	mov	r0, r5
 800462e:	f000 f931 	bl	8004894 <_free_r>
 8004632:	2300      	movs	r3, #0
 8004634:	6363      	str	r3, [r4, #52]	@ 0x34
 8004636:	89a3      	ldrh	r3, [r4, #12]
 8004638:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800463c:	81a3      	strh	r3, [r4, #12]
 800463e:	2300      	movs	r3, #0
 8004640:	6063      	str	r3, [r4, #4]
 8004642:	6923      	ldr	r3, [r4, #16]
 8004644:	6023      	str	r3, [r4, #0]
 8004646:	89a3      	ldrh	r3, [r4, #12]
 8004648:	f043 0308 	orr.w	r3, r3, #8
 800464c:	81a3      	strh	r3, [r4, #12]
 800464e:	6923      	ldr	r3, [r4, #16]
 8004650:	b94b      	cbnz	r3, 8004666 <__swsetup_r+0x7a>
 8004652:	89a3      	ldrh	r3, [r4, #12]
 8004654:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004658:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800465c:	d003      	beq.n	8004666 <__swsetup_r+0x7a>
 800465e:	4621      	mov	r1, r4
 8004660:	4628      	mov	r0, r5
 8004662:	f000 ff23 	bl	80054ac <__smakebuf_r>
 8004666:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800466a:	f013 0201 	ands.w	r2, r3, #1
 800466e:	d00a      	beq.n	8004686 <__swsetup_r+0x9a>
 8004670:	2200      	movs	r2, #0
 8004672:	60a2      	str	r2, [r4, #8]
 8004674:	6962      	ldr	r2, [r4, #20]
 8004676:	4252      	negs	r2, r2
 8004678:	61a2      	str	r2, [r4, #24]
 800467a:	6922      	ldr	r2, [r4, #16]
 800467c:	b942      	cbnz	r2, 8004690 <__swsetup_r+0xa4>
 800467e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004682:	d1c5      	bne.n	8004610 <__swsetup_r+0x24>
 8004684:	bd38      	pop	{r3, r4, r5, pc}
 8004686:	0799      	lsls	r1, r3, #30
 8004688:	bf58      	it	pl
 800468a:	6962      	ldrpl	r2, [r4, #20]
 800468c:	60a2      	str	r2, [r4, #8]
 800468e:	e7f4      	b.n	800467a <__swsetup_r+0x8e>
 8004690:	2000      	movs	r0, #0
 8004692:	e7f7      	b.n	8004684 <__swsetup_r+0x98>
 8004694:	20000018 	.word	0x20000018

08004698 <memset>:
 8004698:	4402      	add	r2, r0
 800469a:	4603      	mov	r3, r0
 800469c:	4293      	cmp	r3, r2
 800469e:	d100      	bne.n	80046a2 <memset+0xa>
 80046a0:	4770      	bx	lr
 80046a2:	f803 1b01 	strb.w	r1, [r3], #1
 80046a6:	e7f9      	b.n	800469c <memset+0x4>

080046a8 <strtok>:
 80046a8:	4b16      	ldr	r3, [pc, #88]	@ (8004704 <strtok+0x5c>)
 80046aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046ae:	681f      	ldr	r7, [r3, #0]
 80046b0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80046b2:	4605      	mov	r5, r0
 80046b4:	460e      	mov	r6, r1
 80046b6:	b9ec      	cbnz	r4, 80046f4 <strtok+0x4c>
 80046b8:	2050      	movs	r0, #80	@ 0x50
 80046ba:	f000 f935 	bl	8004928 <malloc>
 80046be:	4602      	mov	r2, r0
 80046c0:	6478      	str	r0, [r7, #68]	@ 0x44
 80046c2:	b920      	cbnz	r0, 80046ce <strtok+0x26>
 80046c4:	4b10      	ldr	r3, [pc, #64]	@ (8004708 <strtok+0x60>)
 80046c6:	4811      	ldr	r0, [pc, #68]	@ (800470c <strtok+0x64>)
 80046c8:	215b      	movs	r1, #91	@ 0x5b
 80046ca:	f000 f8c5 	bl	8004858 <__assert_func>
 80046ce:	e9c0 4400 	strd	r4, r4, [r0]
 80046d2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80046d6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80046da:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80046de:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80046e2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80046e6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80046ea:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80046ee:	6184      	str	r4, [r0, #24]
 80046f0:	7704      	strb	r4, [r0, #28]
 80046f2:	6244      	str	r4, [r0, #36]	@ 0x24
 80046f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046f6:	4631      	mov	r1, r6
 80046f8:	4628      	mov	r0, r5
 80046fa:	2301      	movs	r3, #1
 80046fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004700:	f000 b806 	b.w	8004710 <__strtok_r>
 8004704:	20000018 	.word	0x20000018
 8004708:	08005794 	.word	0x08005794
 800470c:	080057ab 	.word	0x080057ab

08004710 <__strtok_r>:
 8004710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004712:	4604      	mov	r4, r0
 8004714:	b908      	cbnz	r0, 800471a <__strtok_r+0xa>
 8004716:	6814      	ldr	r4, [r2, #0]
 8004718:	b144      	cbz	r4, 800472c <__strtok_r+0x1c>
 800471a:	4620      	mov	r0, r4
 800471c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004720:	460f      	mov	r7, r1
 8004722:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004726:	b91e      	cbnz	r6, 8004730 <__strtok_r+0x20>
 8004728:	b965      	cbnz	r5, 8004744 <__strtok_r+0x34>
 800472a:	6015      	str	r5, [r2, #0]
 800472c:	2000      	movs	r0, #0
 800472e:	e005      	b.n	800473c <__strtok_r+0x2c>
 8004730:	42b5      	cmp	r5, r6
 8004732:	d1f6      	bne.n	8004722 <__strtok_r+0x12>
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1f0      	bne.n	800471a <__strtok_r+0xa>
 8004738:	6014      	str	r4, [r2, #0]
 800473a:	7003      	strb	r3, [r0, #0]
 800473c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800473e:	461c      	mov	r4, r3
 8004740:	e00c      	b.n	800475c <__strtok_r+0x4c>
 8004742:	b915      	cbnz	r5, 800474a <__strtok_r+0x3a>
 8004744:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004748:	460e      	mov	r6, r1
 800474a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800474e:	42ab      	cmp	r3, r5
 8004750:	d1f7      	bne.n	8004742 <__strtok_r+0x32>
 8004752:	2b00      	cmp	r3, #0
 8004754:	d0f3      	beq.n	800473e <__strtok_r+0x2e>
 8004756:	2300      	movs	r3, #0
 8004758:	f804 3c01 	strb.w	r3, [r4, #-1]
 800475c:	6014      	str	r4, [r2, #0]
 800475e:	e7ed      	b.n	800473c <__strtok_r+0x2c>

08004760 <_close_r>:
 8004760:	b538      	push	{r3, r4, r5, lr}
 8004762:	4d06      	ldr	r5, [pc, #24]	@ (800477c <_close_r+0x1c>)
 8004764:	2300      	movs	r3, #0
 8004766:	4604      	mov	r4, r0
 8004768:	4608      	mov	r0, r1
 800476a:	602b      	str	r3, [r5, #0]
 800476c:	f7fc fcb6 	bl	80010dc <_close>
 8004770:	1c43      	adds	r3, r0, #1
 8004772:	d102      	bne.n	800477a <_close_r+0x1a>
 8004774:	682b      	ldr	r3, [r5, #0]
 8004776:	b103      	cbz	r3, 800477a <_close_r+0x1a>
 8004778:	6023      	str	r3, [r4, #0]
 800477a:	bd38      	pop	{r3, r4, r5, pc}
 800477c:	20000378 	.word	0x20000378

08004780 <_lseek_r>:
 8004780:	b538      	push	{r3, r4, r5, lr}
 8004782:	4d07      	ldr	r5, [pc, #28]	@ (80047a0 <_lseek_r+0x20>)
 8004784:	4604      	mov	r4, r0
 8004786:	4608      	mov	r0, r1
 8004788:	4611      	mov	r1, r2
 800478a:	2200      	movs	r2, #0
 800478c:	602a      	str	r2, [r5, #0]
 800478e:	461a      	mov	r2, r3
 8004790:	f7fc fccb 	bl	800112a <_lseek>
 8004794:	1c43      	adds	r3, r0, #1
 8004796:	d102      	bne.n	800479e <_lseek_r+0x1e>
 8004798:	682b      	ldr	r3, [r5, #0]
 800479a:	b103      	cbz	r3, 800479e <_lseek_r+0x1e>
 800479c:	6023      	str	r3, [r4, #0]
 800479e:	bd38      	pop	{r3, r4, r5, pc}
 80047a0:	20000378 	.word	0x20000378

080047a4 <_read_r>:
 80047a4:	b538      	push	{r3, r4, r5, lr}
 80047a6:	4d07      	ldr	r5, [pc, #28]	@ (80047c4 <_read_r+0x20>)
 80047a8:	4604      	mov	r4, r0
 80047aa:	4608      	mov	r0, r1
 80047ac:	4611      	mov	r1, r2
 80047ae:	2200      	movs	r2, #0
 80047b0:	602a      	str	r2, [r5, #0]
 80047b2:	461a      	mov	r2, r3
 80047b4:	f7fc fc59 	bl	800106a <_read>
 80047b8:	1c43      	adds	r3, r0, #1
 80047ba:	d102      	bne.n	80047c2 <_read_r+0x1e>
 80047bc:	682b      	ldr	r3, [r5, #0]
 80047be:	b103      	cbz	r3, 80047c2 <_read_r+0x1e>
 80047c0:	6023      	str	r3, [r4, #0]
 80047c2:	bd38      	pop	{r3, r4, r5, pc}
 80047c4:	20000378 	.word	0x20000378

080047c8 <_write_r>:
 80047c8:	b538      	push	{r3, r4, r5, lr}
 80047ca:	4d07      	ldr	r5, [pc, #28]	@ (80047e8 <_write_r+0x20>)
 80047cc:	4604      	mov	r4, r0
 80047ce:	4608      	mov	r0, r1
 80047d0:	4611      	mov	r1, r2
 80047d2:	2200      	movs	r2, #0
 80047d4:	602a      	str	r2, [r5, #0]
 80047d6:	461a      	mov	r2, r3
 80047d8:	f7fc fc64 	bl	80010a4 <_write>
 80047dc:	1c43      	adds	r3, r0, #1
 80047de:	d102      	bne.n	80047e6 <_write_r+0x1e>
 80047e0:	682b      	ldr	r3, [r5, #0]
 80047e2:	b103      	cbz	r3, 80047e6 <_write_r+0x1e>
 80047e4:	6023      	str	r3, [r4, #0]
 80047e6:	bd38      	pop	{r3, r4, r5, pc}
 80047e8:	20000378 	.word	0x20000378

080047ec <__errno>:
 80047ec:	4b01      	ldr	r3, [pc, #4]	@ (80047f4 <__errno+0x8>)
 80047ee:	6818      	ldr	r0, [r3, #0]
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	20000018 	.word	0x20000018

080047f8 <__libc_init_array>:
 80047f8:	b570      	push	{r4, r5, r6, lr}
 80047fa:	4d0d      	ldr	r5, [pc, #52]	@ (8004830 <__libc_init_array+0x38>)
 80047fc:	4c0d      	ldr	r4, [pc, #52]	@ (8004834 <__libc_init_array+0x3c>)
 80047fe:	1b64      	subs	r4, r4, r5
 8004800:	10a4      	asrs	r4, r4, #2
 8004802:	2600      	movs	r6, #0
 8004804:	42a6      	cmp	r6, r4
 8004806:	d109      	bne.n	800481c <__libc_init_array+0x24>
 8004808:	4d0b      	ldr	r5, [pc, #44]	@ (8004838 <__libc_init_array+0x40>)
 800480a:	4c0c      	ldr	r4, [pc, #48]	@ (800483c <__libc_init_array+0x44>)
 800480c:	f000 ff66 	bl	80056dc <_init>
 8004810:	1b64      	subs	r4, r4, r5
 8004812:	10a4      	asrs	r4, r4, #2
 8004814:	2600      	movs	r6, #0
 8004816:	42a6      	cmp	r6, r4
 8004818:	d105      	bne.n	8004826 <__libc_init_array+0x2e>
 800481a:	bd70      	pop	{r4, r5, r6, pc}
 800481c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004820:	4798      	blx	r3
 8004822:	3601      	adds	r6, #1
 8004824:	e7ee      	b.n	8004804 <__libc_init_array+0xc>
 8004826:	f855 3b04 	ldr.w	r3, [r5], #4
 800482a:	4798      	blx	r3
 800482c:	3601      	adds	r6, #1
 800482e:	e7f2      	b.n	8004816 <__libc_init_array+0x1e>
 8004830:	0800587c 	.word	0x0800587c
 8004834:	0800587c 	.word	0x0800587c
 8004838:	0800587c 	.word	0x0800587c
 800483c:	08005880 	.word	0x08005880

08004840 <__retarget_lock_init_recursive>:
 8004840:	4770      	bx	lr

08004842 <__retarget_lock_acquire_recursive>:
 8004842:	4770      	bx	lr

08004844 <__retarget_lock_release_recursive>:
 8004844:	4770      	bx	lr

08004846 <strcpy>:
 8004846:	4603      	mov	r3, r0
 8004848:	f811 2b01 	ldrb.w	r2, [r1], #1
 800484c:	f803 2b01 	strb.w	r2, [r3], #1
 8004850:	2a00      	cmp	r2, #0
 8004852:	d1f9      	bne.n	8004848 <strcpy+0x2>
 8004854:	4770      	bx	lr
	...

08004858 <__assert_func>:
 8004858:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800485a:	4614      	mov	r4, r2
 800485c:	461a      	mov	r2, r3
 800485e:	4b09      	ldr	r3, [pc, #36]	@ (8004884 <__assert_func+0x2c>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4605      	mov	r5, r0
 8004864:	68d8      	ldr	r0, [r3, #12]
 8004866:	b954      	cbnz	r4, 800487e <__assert_func+0x26>
 8004868:	4b07      	ldr	r3, [pc, #28]	@ (8004888 <__assert_func+0x30>)
 800486a:	461c      	mov	r4, r3
 800486c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004870:	9100      	str	r1, [sp, #0]
 8004872:	462b      	mov	r3, r5
 8004874:	4905      	ldr	r1, [pc, #20]	@ (800488c <__assert_func+0x34>)
 8004876:	f000 fde1 	bl	800543c <fiprintf>
 800487a:	f000 fead 	bl	80055d8 <abort>
 800487e:	4b04      	ldr	r3, [pc, #16]	@ (8004890 <__assert_func+0x38>)
 8004880:	e7f4      	b.n	800486c <__assert_func+0x14>
 8004882:	bf00      	nop
 8004884:	20000018 	.word	0x20000018
 8004888:	08005840 	.word	0x08005840
 800488c:	08005812 	.word	0x08005812
 8004890:	08005805 	.word	0x08005805

08004894 <_free_r>:
 8004894:	b538      	push	{r3, r4, r5, lr}
 8004896:	4605      	mov	r5, r0
 8004898:	2900      	cmp	r1, #0
 800489a:	d041      	beq.n	8004920 <_free_r+0x8c>
 800489c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048a0:	1f0c      	subs	r4, r1, #4
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	bfb8      	it	lt
 80048a6:	18e4      	addlt	r4, r4, r3
 80048a8:	f000 f8e8 	bl	8004a7c <__malloc_lock>
 80048ac:	4a1d      	ldr	r2, [pc, #116]	@ (8004924 <_free_r+0x90>)
 80048ae:	6813      	ldr	r3, [r2, #0]
 80048b0:	b933      	cbnz	r3, 80048c0 <_free_r+0x2c>
 80048b2:	6063      	str	r3, [r4, #4]
 80048b4:	6014      	str	r4, [r2, #0]
 80048b6:	4628      	mov	r0, r5
 80048b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048bc:	f000 b8e4 	b.w	8004a88 <__malloc_unlock>
 80048c0:	42a3      	cmp	r3, r4
 80048c2:	d908      	bls.n	80048d6 <_free_r+0x42>
 80048c4:	6820      	ldr	r0, [r4, #0]
 80048c6:	1821      	adds	r1, r4, r0
 80048c8:	428b      	cmp	r3, r1
 80048ca:	bf01      	itttt	eq
 80048cc:	6819      	ldreq	r1, [r3, #0]
 80048ce:	685b      	ldreq	r3, [r3, #4]
 80048d0:	1809      	addeq	r1, r1, r0
 80048d2:	6021      	streq	r1, [r4, #0]
 80048d4:	e7ed      	b.n	80048b2 <_free_r+0x1e>
 80048d6:	461a      	mov	r2, r3
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	b10b      	cbz	r3, 80048e0 <_free_r+0x4c>
 80048dc:	42a3      	cmp	r3, r4
 80048de:	d9fa      	bls.n	80048d6 <_free_r+0x42>
 80048e0:	6811      	ldr	r1, [r2, #0]
 80048e2:	1850      	adds	r0, r2, r1
 80048e4:	42a0      	cmp	r0, r4
 80048e6:	d10b      	bne.n	8004900 <_free_r+0x6c>
 80048e8:	6820      	ldr	r0, [r4, #0]
 80048ea:	4401      	add	r1, r0
 80048ec:	1850      	adds	r0, r2, r1
 80048ee:	4283      	cmp	r3, r0
 80048f0:	6011      	str	r1, [r2, #0]
 80048f2:	d1e0      	bne.n	80048b6 <_free_r+0x22>
 80048f4:	6818      	ldr	r0, [r3, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	6053      	str	r3, [r2, #4]
 80048fa:	4408      	add	r0, r1
 80048fc:	6010      	str	r0, [r2, #0]
 80048fe:	e7da      	b.n	80048b6 <_free_r+0x22>
 8004900:	d902      	bls.n	8004908 <_free_r+0x74>
 8004902:	230c      	movs	r3, #12
 8004904:	602b      	str	r3, [r5, #0]
 8004906:	e7d6      	b.n	80048b6 <_free_r+0x22>
 8004908:	6820      	ldr	r0, [r4, #0]
 800490a:	1821      	adds	r1, r4, r0
 800490c:	428b      	cmp	r3, r1
 800490e:	bf04      	itt	eq
 8004910:	6819      	ldreq	r1, [r3, #0]
 8004912:	685b      	ldreq	r3, [r3, #4]
 8004914:	6063      	str	r3, [r4, #4]
 8004916:	bf04      	itt	eq
 8004918:	1809      	addeq	r1, r1, r0
 800491a:	6021      	streq	r1, [r4, #0]
 800491c:	6054      	str	r4, [r2, #4]
 800491e:	e7ca      	b.n	80048b6 <_free_r+0x22>
 8004920:	bd38      	pop	{r3, r4, r5, pc}
 8004922:	bf00      	nop
 8004924:	20000384 	.word	0x20000384

08004928 <malloc>:
 8004928:	4b02      	ldr	r3, [pc, #8]	@ (8004934 <malloc+0xc>)
 800492a:	4601      	mov	r1, r0
 800492c:	6818      	ldr	r0, [r3, #0]
 800492e:	f000 b825 	b.w	800497c <_malloc_r>
 8004932:	bf00      	nop
 8004934:	20000018 	.word	0x20000018

08004938 <sbrk_aligned>:
 8004938:	b570      	push	{r4, r5, r6, lr}
 800493a:	4e0f      	ldr	r6, [pc, #60]	@ (8004978 <sbrk_aligned+0x40>)
 800493c:	460c      	mov	r4, r1
 800493e:	6831      	ldr	r1, [r6, #0]
 8004940:	4605      	mov	r5, r0
 8004942:	b911      	cbnz	r1, 800494a <sbrk_aligned+0x12>
 8004944:	f000 fe2a 	bl	800559c <_sbrk_r>
 8004948:	6030      	str	r0, [r6, #0]
 800494a:	4621      	mov	r1, r4
 800494c:	4628      	mov	r0, r5
 800494e:	f000 fe25 	bl	800559c <_sbrk_r>
 8004952:	1c43      	adds	r3, r0, #1
 8004954:	d103      	bne.n	800495e <sbrk_aligned+0x26>
 8004956:	f04f 34ff 	mov.w	r4, #4294967295
 800495a:	4620      	mov	r0, r4
 800495c:	bd70      	pop	{r4, r5, r6, pc}
 800495e:	1cc4      	adds	r4, r0, #3
 8004960:	f024 0403 	bic.w	r4, r4, #3
 8004964:	42a0      	cmp	r0, r4
 8004966:	d0f8      	beq.n	800495a <sbrk_aligned+0x22>
 8004968:	1a21      	subs	r1, r4, r0
 800496a:	4628      	mov	r0, r5
 800496c:	f000 fe16 	bl	800559c <_sbrk_r>
 8004970:	3001      	adds	r0, #1
 8004972:	d1f2      	bne.n	800495a <sbrk_aligned+0x22>
 8004974:	e7ef      	b.n	8004956 <sbrk_aligned+0x1e>
 8004976:	bf00      	nop
 8004978:	20000380 	.word	0x20000380

0800497c <_malloc_r>:
 800497c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004980:	1ccd      	adds	r5, r1, #3
 8004982:	f025 0503 	bic.w	r5, r5, #3
 8004986:	3508      	adds	r5, #8
 8004988:	2d0c      	cmp	r5, #12
 800498a:	bf38      	it	cc
 800498c:	250c      	movcc	r5, #12
 800498e:	2d00      	cmp	r5, #0
 8004990:	4606      	mov	r6, r0
 8004992:	db01      	blt.n	8004998 <_malloc_r+0x1c>
 8004994:	42a9      	cmp	r1, r5
 8004996:	d904      	bls.n	80049a2 <_malloc_r+0x26>
 8004998:	230c      	movs	r3, #12
 800499a:	6033      	str	r3, [r6, #0]
 800499c:	2000      	movs	r0, #0
 800499e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004a78 <_malloc_r+0xfc>
 80049a6:	f000 f869 	bl	8004a7c <__malloc_lock>
 80049aa:	f8d8 3000 	ldr.w	r3, [r8]
 80049ae:	461c      	mov	r4, r3
 80049b0:	bb44      	cbnz	r4, 8004a04 <_malloc_r+0x88>
 80049b2:	4629      	mov	r1, r5
 80049b4:	4630      	mov	r0, r6
 80049b6:	f7ff ffbf 	bl	8004938 <sbrk_aligned>
 80049ba:	1c43      	adds	r3, r0, #1
 80049bc:	4604      	mov	r4, r0
 80049be:	d158      	bne.n	8004a72 <_malloc_r+0xf6>
 80049c0:	f8d8 4000 	ldr.w	r4, [r8]
 80049c4:	4627      	mov	r7, r4
 80049c6:	2f00      	cmp	r7, #0
 80049c8:	d143      	bne.n	8004a52 <_malloc_r+0xd6>
 80049ca:	2c00      	cmp	r4, #0
 80049cc:	d04b      	beq.n	8004a66 <_malloc_r+0xea>
 80049ce:	6823      	ldr	r3, [r4, #0]
 80049d0:	4639      	mov	r1, r7
 80049d2:	4630      	mov	r0, r6
 80049d4:	eb04 0903 	add.w	r9, r4, r3
 80049d8:	f000 fde0 	bl	800559c <_sbrk_r>
 80049dc:	4581      	cmp	r9, r0
 80049de:	d142      	bne.n	8004a66 <_malloc_r+0xea>
 80049e0:	6821      	ldr	r1, [r4, #0]
 80049e2:	1a6d      	subs	r5, r5, r1
 80049e4:	4629      	mov	r1, r5
 80049e6:	4630      	mov	r0, r6
 80049e8:	f7ff ffa6 	bl	8004938 <sbrk_aligned>
 80049ec:	3001      	adds	r0, #1
 80049ee:	d03a      	beq.n	8004a66 <_malloc_r+0xea>
 80049f0:	6823      	ldr	r3, [r4, #0]
 80049f2:	442b      	add	r3, r5
 80049f4:	6023      	str	r3, [r4, #0]
 80049f6:	f8d8 3000 	ldr.w	r3, [r8]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	bb62      	cbnz	r2, 8004a58 <_malloc_r+0xdc>
 80049fe:	f8c8 7000 	str.w	r7, [r8]
 8004a02:	e00f      	b.n	8004a24 <_malloc_r+0xa8>
 8004a04:	6822      	ldr	r2, [r4, #0]
 8004a06:	1b52      	subs	r2, r2, r5
 8004a08:	d420      	bmi.n	8004a4c <_malloc_r+0xd0>
 8004a0a:	2a0b      	cmp	r2, #11
 8004a0c:	d917      	bls.n	8004a3e <_malloc_r+0xc2>
 8004a0e:	1961      	adds	r1, r4, r5
 8004a10:	42a3      	cmp	r3, r4
 8004a12:	6025      	str	r5, [r4, #0]
 8004a14:	bf18      	it	ne
 8004a16:	6059      	strne	r1, [r3, #4]
 8004a18:	6863      	ldr	r3, [r4, #4]
 8004a1a:	bf08      	it	eq
 8004a1c:	f8c8 1000 	streq.w	r1, [r8]
 8004a20:	5162      	str	r2, [r4, r5]
 8004a22:	604b      	str	r3, [r1, #4]
 8004a24:	4630      	mov	r0, r6
 8004a26:	f000 f82f 	bl	8004a88 <__malloc_unlock>
 8004a2a:	f104 000b 	add.w	r0, r4, #11
 8004a2e:	1d23      	adds	r3, r4, #4
 8004a30:	f020 0007 	bic.w	r0, r0, #7
 8004a34:	1ac2      	subs	r2, r0, r3
 8004a36:	bf1c      	itt	ne
 8004a38:	1a1b      	subne	r3, r3, r0
 8004a3a:	50a3      	strne	r3, [r4, r2]
 8004a3c:	e7af      	b.n	800499e <_malloc_r+0x22>
 8004a3e:	6862      	ldr	r2, [r4, #4]
 8004a40:	42a3      	cmp	r3, r4
 8004a42:	bf0c      	ite	eq
 8004a44:	f8c8 2000 	streq.w	r2, [r8]
 8004a48:	605a      	strne	r2, [r3, #4]
 8004a4a:	e7eb      	b.n	8004a24 <_malloc_r+0xa8>
 8004a4c:	4623      	mov	r3, r4
 8004a4e:	6864      	ldr	r4, [r4, #4]
 8004a50:	e7ae      	b.n	80049b0 <_malloc_r+0x34>
 8004a52:	463c      	mov	r4, r7
 8004a54:	687f      	ldr	r7, [r7, #4]
 8004a56:	e7b6      	b.n	80049c6 <_malloc_r+0x4a>
 8004a58:	461a      	mov	r2, r3
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	42a3      	cmp	r3, r4
 8004a5e:	d1fb      	bne.n	8004a58 <_malloc_r+0xdc>
 8004a60:	2300      	movs	r3, #0
 8004a62:	6053      	str	r3, [r2, #4]
 8004a64:	e7de      	b.n	8004a24 <_malloc_r+0xa8>
 8004a66:	230c      	movs	r3, #12
 8004a68:	6033      	str	r3, [r6, #0]
 8004a6a:	4630      	mov	r0, r6
 8004a6c:	f000 f80c 	bl	8004a88 <__malloc_unlock>
 8004a70:	e794      	b.n	800499c <_malloc_r+0x20>
 8004a72:	6005      	str	r5, [r0, #0]
 8004a74:	e7d6      	b.n	8004a24 <_malloc_r+0xa8>
 8004a76:	bf00      	nop
 8004a78:	20000384 	.word	0x20000384

08004a7c <__malloc_lock>:
 8004a7c:	4801      	ldr	r0, [pc, #4]	@ (8004a84 <__malloc_lock+0x8>)
 8004a7e:	f7ff bee0 	b.w	8004842 <__retarget_lock_acquire_recursive>
 8004a82:	bf00      	nop
 8004a84:	2000037c 	.word	0x2000037c

08004a88 <__malloc_unlock>:
 8004a88:	4801      	ldr	r0, [pc, #4]	@ (8004a90 <__malloc_unlock+0x8>)
 8004a8a:	f7ff bedb 	b.w	8004844 <__retarget_lock_release_recursive>
 8004a8e:	bf00      	nop
 8004a90:	2000037c 	.word	0x2000037c

08004a94 <__ssputs_r>:
 8004a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a98:	688e      	ldr	r6, [r1, #8]
 8004a9a:	461f      	mov	r7, r3
 8004a9c:	42be      	cmp	r6, r7
 8004a9e:	680b      	ldr	r3, [r1, #0]
 8004aa0:	4682      	mov	sl, r0
 8004aa2:	460c      	mov	r4, r1
 8004aa4:	4690      	mov	r8, r2
 8004aa6:	d82d      	bhi.n	8004b04 <__ssputs_r+0x70>
 8004aa8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004aac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004ab0:	d026      	beq.n	8004b00 <__ssputs_r+0x6c>
 8004ab2:	6965      	ldr	r5, [r4, #20]
 8004ab4:	6909      	ldr	r1, [r1, #16]
 8004ab6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004aba:	eba3 0901 	sub.w	r9, r3, r1
 8004abe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ac2:	1c7b      	adds	r3, r7, #1
 8004ac4:	444b      	add	r3, r9
 8004ac6:	106d      	asrs	r5, r5, #1
 8004ac8:	429d      	cmp	r5, r3
 8004aca:	bf38      	it	cc
 8004acc:	461d      	movcc	r5, r3
 8004ace:	0553      	lsls	r3, r2, #21
 8004ad0:	d527      	bpl.n	8004b22 <__ssputs_r+0x8e>
 8004ad2:	4629      	mov	r1, r5
 8004ad4:	f7ff ff52 	bl	800497c <_malloc_r>
 8004ad8:	4606      	mov	r6, r0
 8004ada:	b360      	cbz	r0, 8004b36 <__ssputs_r+0xa2>
 8004adc:	6921      	ldr	r1, [r4, #16]
 8004ade:	464a      	mov	r2, r9
 8004ae0:	f000 fd6c 	bl	80055bc <memcpy>
 8004ae4:	89a3      	ldrh	r3, [r4, #12]
 8004ae6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004aea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004aee:	81a3      	strh	r3, [r4, #12]
 8004af0:	6126      	str	r6, [r4, #16]
 8004af2:	6165      	str	r5, [r4, #20]
 8004af4:	444e      	add	r6, r9
 8004af6:	eba5 0509 	sub.w	r5, r5, r9
 8004afa:	6026      	str	r6, [r4, #0]
 8004afc:	60a5      	str	r5, [r4, #8]
 8004afe:	463e      	mov	r6, r7
 8004b00:	42be      	cmp	r6, r7
 8004b02:	d900      	bls.n	8004b06 <__ssputs_r+0x72>
 8004b04:	463e      	mov	r6, r7
 8004b06:	6820      	ldr	r0, [r4, #0]
 8004b08:	4632      	mov	r2, r6
 8004b0a:	4641      	mov	r1, r8
 8004b0c:	f000 fd0a 	bl	8005524 <memmove>
 8004b10:	68a3      	ldr	r3, [r4, #8]
 8004b12:	1b9b      	subs	r3, r3, r6
 8004b14:	60a3      	str	r3, [r4, #8]
 8004b16:	6823      	ldr	r3, [r4, #0]
 8004b18:	4433      	add	r3, r6
 8004b1a:	6023      	str	r3, [r4, #0]
 8004b1c:	2000      	movs	r0, #0
 8004b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b22:	462a      	mov	r2, r5
 8004b24:	f000 fd5f 	bl	80055e6 <_realloc_r>
 8004b28:	4606      	mov	r6, r0
 8004b2a:	2800      	cmp	r0, #0
 8004b2c:	d1e0      	bne.n	8004af0 <__ssputs_r+0x5c>
 8004b2e:	6921      	ldr	r1, [r4, #16]
 8004b30:	4650      	mov	r0, sl
 8004b32:	f7ff feaf 	bl	8004894 <_free_r>
 8004b36:	230c      	movs	r3, #12
 8004b38:	f8ca 3000 	str.w	r3, [sl]
 8004b3c:	89a3      	ldrh	r3, [r4, #12]
 8004b3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b42:	81a3      	strh	r3, [r4, #12]
 8004b44:	f04f 30ff 	mov.w	r0, #4294967295
 8004b48:	e7e9      	b.n	8004b1e <__ssputs_r+0x8a>
	...

08004b4c <_svfiprintf_r>:
 8004b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b50:	4698      	mov	r8, r3
 8004b52:	898b      	ldrh	r3, [r1, #12]
 8004b54:	061b      	lsls	r3, r3, #24
 8004b56:	b09d      	sub	sp, #116	@ 0x74
 8004b58:	4607      	mov	r7, r0
 8004b5a:	460d      	mov	r5, r1
 8004b5c:	4614      	mov	r4, r2
 8004b5e:	d510      	bpl.n	8004b82 <_svfiprintf_r+0x36>
 8004b60:	690b      	ldr	r3, [r1, #16]
 8004b62:	b973      	cbnz	r3, 8004b82 <_svfiprintf_r+0x36>
 8004b64:	2140      	movs	r1, #64	@ 0x40
 8004b66:	f7ff ff09 	bl	800497c <_malloc_r>
 8004b6a:	6028      	str	r0, [r5, #0]
 8004b6c:	6128      	str	r0, [r5, #16]
 8004b6e:	b930      	cbnz	r0, 8004b7e <_svfiprintf_r+0x32>
 8004b70:	230c      	movs	r3, #12
 8004b72:	603b      	str	r3, [r7, #0]
 8004b74:	f04f 30ff 	mov.w	r0, #4294967295
 8004b78:	b01d      	add	sp, #116	@ 0x74
 8004b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b7e:	2340      	movs	r3, #64	@ 0x40
 8004b80:	616b      	str	r3, [r5, #20]
 8004b82:	2300      	movs	r3, #0
 8004b84:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b86:	2320      	movs	r3, #32
 8004b88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004b8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b90:	2330      	movs	r3, #48	@ 0x30
 8004b92:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004d30 <_svfiprintf_r+0x1e4>
 8004b96:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004b9a:	f04f 0901 	mov.w	r9, #1
 8004b9e:	4623      	mov	r3, r4
 8004ba0:	469a      	mov	sl, r3
 8004ba2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ba6:	b10a      	cbz	r2, 8004bac <_svfiprintf_r+0x60>
 8004ba8:	2a25      	cmp	r2, #37	@ 0x25
 8004baa:	d1f9      	bne.n	8004ba0 <_svfiprintf_r+0x54>
 8004bac:	ebba 0b04 	subs.w	fp, sl, r4
 8004bb0:	d00b      	beq.n	8004bca <_svfiprintf_r+0x7e>
 8004bb2:	465b      	mov	r3, fp
 8004bb4:	4622      	mov	r2, r4
 8004bb6:	4629      	mov	r1, r5
 8004bb8:	4638      	mov	r0, r7
 8004bba:	f7ff ff6b 	bl	8004a94 <__ssputs_r>
 8004bbe:	3001      	adds	r0, #1
 8004bc0:	f000 80a7 	beq.w	8004d12 <_svfiprintf_r+0x1c6>
 8004bc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004bc6:	445a      	add	r2, fp
 8004bc8:	9209      	str	r2, [sp, #36]	@ 0x24
 8004bca:	f89a 3000 	ldrb.w	r3, [sl]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f000 809f 	beq.w	8004d12 <_svfiprintf_r+0x1c6>
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8004bda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bde:	f10a 0a01 	add.w	sl, sl, #1
 8004be2:	9304      	str	r3, [sp, #16]
 8004be4:	9307      	str	r3, [sp, #28]
 8004be6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004bea:	931a      	str	r3, [sp, #104]	@ 0x68
 8004bec:	4654      	mov	r4, sl
 8004bee:	2205      	movs	r2, #5
 8004bf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bf4:	484e      	ldr	r0, [pc, #312]	@ (8004d30 <_svfiprintf_r+0x1e4>)
 8004bf6:	f7fb fb0b 	bl	8000210 <memchr>
 8004bfa:	9a04      	ldr	r2, [sp, #16]
 8004bfc:	b9d8      	cbnz	r0, 8004c36 <_svfiprintf_r+0xea>
 8004bfe:	06d0      	lsls	r0, r2, #27
 8004c00:	bf44      	itt	mi
 8004c02:	2320      	movmi	r3, #32
 8004c04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c08:	0711      	lsls	r1, r2, #28
 8004c0a:	bf44      	itt	mi
 8004c0c:	232b      	movmi	r3, #43	@ 0x2b
 8004c0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c12:	f89a 3000 	ldrb.w	r3, [sl]
 8004c16:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c18:	d015      	beq.n	8004c46 <_svfiprintf_r+0xfa>
 8004c1a:	9a07      	ldr	r2, [sp, #28]
 8004c1c:	4654      	mov	r4, sl
 8004c1e:	2000      	movs	r0, #0
 8004c20:	f04f 0c0a 	mov.w	ip, #10
 8004c24:	4621      	mov	r1, r4
 8004c26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c2a:	3b30      	subs	r3, #48	@ 0x30
 8004c2c:	2b09      	cmp	r3, #9
 8004c2e:	d94b      	bls.n	8004cc8 <_svfiprintf_r+0x17c>
 8004c30:	b1b0      	cbz	r0, 8004c60 <_svfiprintf_r+0x114>
 8004c32:	9207      	str	r2, [sp, #28]
 8004c34:	e014      	b.n	8004c60 <_svfiprintf_r+0x114>
 8004c36:	eba0 0308 	sub.w	r3, r0, r8
 8004c3a:	fa09 f303 	lsl.w	r3, r9, r3
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	9304      	str	r3, [sp, #16]
 8004c42:	46a2      	mov	sl, r4
 8004c44:	e7d2      	b.n	8004bec <_svfiprintf_r+0xa0>
 8004c46:	9b03      	ldr	r3, [sp, #12]
 8004c48:	1d19      	adds	r1, r3, #4
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	9103      	str	r1, [sp, #12]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	bfbb      	ittet	lt
 8004c52:	425b      	neglt	r3, r3
 8004c54:	f042 0202 	orrlt.w	r2, r2, #2
 8004c58:	9307      	strge	r3, [sp, #28]
 8004c5a:	9307      	strlt	r3, [sp, #28]
 8004c5c:	bfb8      	it	lt
 8004c5e:	9204      	strlt	r2, [sp, #16]
 8004c60:	7823      	ldrb	r3, [r4, #0]
 8004c62:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c64:	d10a      	bne.n	8004c7c <_svfiprintf_r+0x130>
 8004c66:	7863      	ldrb	r3, [r4, #1]
 8004c68:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c6a:	d132      	bne.n	8004cd2 <_svfiprintf_r+0x186>
 8004c6c:	9b03      	ldr	r3, [sp, #12]
 8004c6e:	1d1a      	adds	r2, r3, #4
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	9203      	str	r2, [sp, #12]
 8004c74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004c78:	3402      	adds	r4, #2
 8004c7a:	9305      	str	r3, [sp, #20]
 8004c7c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004d40 <_svfiprintf_r+0x1f4>
 8004c80:	7821      	ldrb	r1, [r4, #0]
 8004c82:	2203      	movs	r2, #3
 8004c84:	4650      	mov	r0, sl
 8004c86:	f7fb fac3 	bl	8000210 <memchr>
 8004c8a:	b138      	cbz	r0, 8004c9c <_svfiprintf_r+0x150>
 8004c8c:	9b04      	ldr	r3, [sp, #16]
 8004c8e:	eba0 000a 	sub.w	r0, r0, sl
 8004c92:	2240      	movs	r2, #64	@ 0x40
 8004c94:	4082      	lsls	r2, r0
 8004c96:	4313      	orrs	r3, r2
 8004c98:	3401      	adds	r4, #1
 8004c9a:	9304      	str	r3, [sp, #16]
 8004c9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ca0:	4824      	ldr	r0, [pc, #144]	@ (8004d34 <_svfiprintf_r+0x1e8>)
 8004ca2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004ca6:	2206      	movs	r2, #6
 8004ca8:	f7fb fab2 	bl	8000210 <memchr>
 8004cac:	2800      	cmp	r0, #0
 8004cae:	d036      	beq.n	8004d1e <_svfiprintf_r+0x1d2>
 8004cb0:	4b21      	ldr	r3, [pc, #132]	@ (8004d38 <_svfiprintf_r+0x1ec>)
 8004cb2:	bb1b      	cbnz	r3, 8004cfc <_svfiprintf_r+0x1b0>
 8004cb4:	9b03      	ldr	r3, [sp, #12]
 8004cb6:	3307      	adds	r3, #7
 8004cb8:	f023 0307 	bic.w	r3, r3, #7
 8004cbc:	3308      	adds	r3, #8
 8004cbe:	9303      	str	r3, [sp, #12]
 8004cc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cc2:	4433      	add	r3, r6
 8004cc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cc6:	e76a      	b.n	8004b9e <_svfiprintf_r+0x52>
 8004cc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ccc:	460c      	mov	r4, r1
 8004cce:	2001      	movs	r0, #1
 8004cd0:	e7a8      	b.n	8004c24 <_svfiprintf_r+0xd8>
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	3401      	adds	r4, #1
 8004cd6:	9305      	str	r3, [sp, #20]
 8004cd8:	4619      	mov	r1, r3
 8004cda:	f04f 0c0a 	mov.w	ip, #10
 8004cde:	4620      	mov	r0, r4
 8004ce0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ce4:	3a30      	subs	r2, #48	@ 0x30
 8004ce6:	2a09      	cmp	r2, #9
 8004ce8:	d903      	bls.n	8004cf2 <_svfiprintf_r+0x1a6>
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d0c6      	beq.n	8004c7c <_svfiprintf_r+0x130>
 8004cee:	9105      	str	r1, [sp, #20]
 8004cf0:	e7c4      	b.n	8004c7c <_svfiprintf_r+0x130>
 8004cf2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cf6:	4604      	mov	r4, r0
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e7f0      	b.n	8004cde <_svfiprintf_r+0x192>
 8004cfc:	ab03      	add	r3, sp, #12
 8004cfe:	9300      	str	r3, [sp, #0]
 8004d00:	462a      	mov	r2, r5
 8004d02:	4b0e      	ldr	r3, [pc, #56]	@ (8004d3c <_svfiprintf_r+0x1f0>)
 8004d04:	a904      	add	r1, sp, #16
 8004d06:	4638      	mov	r0, r7
 8004d08:	f3af 8000 	nop.w
 8004d0c:	1c42      	adds	r2, r0, #1
 8004d0e:	4606      	mov	r6, r0
 8004d10:	d1d6      	bne.n	8004cc0 <_svfiprintf_r+0x174>
 8004d12:	89ab      	ldrh	r3, [r5, #12]
 8004d14:	065b      	lsls	r3, r3, #25
 8004d16:	f53f af2d 	bmi.w	8004b74 <_svfiprintf_r+0x28>
 8004d1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d1c:	e72c      	b.n	8004b78 <_svfiprintf_r+0x2c>
 8004d1e:	ab03      	add	r3, sp, #12
 8004d20:	9300      	str	r3, [sp, #0]
 8004d22:	462a      	mov	r2, r5
 8004d24:	4b05      	ldr	r3, [pc, #20]	@ (8004d3c <_svfiprintf_r+0x1f0>)
 8004d26:	a904      	add	r1, sp, #16
 8004d28:	4638      	mov	r0, r7
 8004d2a:	f000 f9bb 	bl	80050a4 <_printf_i>
 8004d2e:	e7ed      	b.n	8004d0c <_svfiprintf_r+0x1c0>
 8004d30:	08005841 	.word	0x08005841
 8004d34:	0800584b 	.word	0x0800584b
 8004d38:	00000000 	.word	0x00000000
 8004d3c:	08004a95 	.word	0x08004a95
 8004d40:	08005847 	.word	0x08005847

08004d44 <__sfputc_r>:
 8004d44:	6893      	ldr	r3, [r2, #8]
 8004d46:	3b01      	subs	r3, #1
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	b410      	push	{r4}
 8004d4c:	6093      	str	r3, [r2, #8]
 8004d4e:	da08      	bge.n	8004d62 <__sfputc_r+0x1e>
 8004d50:	6994      	ldr	r4, [r2, #24]
 8004d52:	42a3      	cmp	r3, r4
 8004d54:	db01      	blt.n	8004d5a <__sfputc_r+0x16>
 8004d56:	290a      	cmp	r1, #10
 8004d58:	d103      	bne.n	8004d62 <__sfputc_r+0x1e>
 8004d5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d5e:	f7ff bc06 	b.w	800456e <__swbuf_r>
 8004d62:	6813      	ldr	r3, [r2, #0]
 8004d64:	1c58      	adds	r0, r3, #1
 8004d66:	6010      	str	r0, [r2, #0]
 8004d68:	7019      	strb	r1, [r3, #0]
 8004d6a:	4608      	mov	r0, r1
 8004d6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d70:	4770      	bx	lr

08004d72 <__sfputs_r>:
 8004d72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d74:	4606      	mov	r6, r0
 8004d76:	460f      	mov	r7, r1
 8004d78:	4614      	mov	r4, r2
 8004d7a:	18d5      	adds	r5, r2, r3
 8004d7c:	42ac      	cmp	r4, r5
 8004d7e:	d101      	bne.n	8004d84 <__sfputs_r+0x12>
 8004d80:	2000      	movs	r0, #0
 8004d82:	e007      	b.n	8004d94 <__sfputs_r+0x22>
 8004d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d88:	463a      	mov	r2, r7
 8004d8a:	4630      	mov	r0, r6
 8004d8c:	f7ff ffda 	bl	8004d44 <__sfputc_r>
 8004d90:	1c43      	adds	r3, r0, #1
 8004d92:	d1f3      	bne.n	8004d7c <__sfputs_r+0xa>
 8004d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d98 <_vfiprintf_r>:
 8004d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d9c:	460d      	mov	r5, r1
 8004d9e:	b09d      	sub	sp, #116	@ 0x74
 8004da0:	4614      	mov	r4, r2
 8004da2:	4698      	mov	r8, r3
 8004da4:	4606      	mov	r6, r0
 8004da6:	b118      	cbz	r0, 8004db0 <_vfiprintf_r+0x18>
 8004da8:	6a03      	ldr	r3, [r0, #32]
 8004daa:	b90b      	cbnz	r3, 8004db0 <_vfiprintf_r+0x18>
 8004dac:	f7ff fad6 	bl	800435c <__sinit>
 8004db0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004db2:	07d9      	lsls	r1, r3, #31
 8004db4:	d405      	bmi.n	8004dc2 <_vfiprintf_r+0x2a>
 8004db6:	89ab      	ldrh	r3, [r5, #12]
 8004db8:	059a      	lsls	r2, r3, #22
 8004dba:	d402      	bmi.n	8004dc2 <_vfiprintf_r+0x2a>
 8004dbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004dbe:	f7ff fd40 	bl	8004842 <__retarget_lock_acquire_recursive>
 8004dc2:	89ab      	ldrh	r3, [r5, #12]
 8004dc4:	071b      	lsls	r3, r3, #28
 8004dc6:	d501      	bpl.n	8004dcc <_vfiprintf_r+0x34>
 8004dc8:	692b      	ldr	r3, [r5, #16]
 8004dca:	b99b      	cbnz	r3, 8004df4 <_vfiprintf_r+0x5c>
 8004dcc:	4629      	mov	r1, r5
 8004dce:	4630      	mov	r0, r6
 8004dd0:	f7ff fc0c 	bl	80045ec <__swsetup_r>
 8004dd4:	b170      	cbz	r0, 8004df4 <_vfiprintf_r+0x5c>
 8004dd6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004dd8:	07dc      	lsls	r4, r3, #31
 8004dda:	d504      	bpl.n	8004de6 <_vfiprintf_r+0x4e>
 8004ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8004de0:	b01d      	add	sp, #116	@ 0x74
 8004de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004de6:	89ab      	ldrh	r3, [r5, #12]
 8004de8:	0598      	lsls	r0, r3, #22
 8004dea:	d4f7      	bmi.n	8004ddc <_vfiprintf_r+0x44>
 8004dec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004dee:	f7ff fd29 	bl	8004844 <__retarget_lock_release_recursive>
 8004df2:	e7f3      	b.n	8004ddc <_vfiprintf_r+0x44>
 8004df4:	2300      	movs	r3, #0
 8004df6:	9309      	str	r3, [sp, #36]	@ 0x24
 8004df8:	2320      	movs	r3, #32
 8004dfa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004dfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e02:	2330      	movs	r3, #48	@ 0x30
 8004e04:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004fb4 <_vfiprintf_r+0x21c>
 8004e08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004e0c:	f04f 0901 	mov.w	r9, #1
 8004e10:	4623      	mov	r3, r4
 8004e12:	469a      	mov	sl, r3
 8004e14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e18:	b10a      	cbz	r2, 8004e1e <_vfiprintf_r+0x86>
 8004e1a:	2a25      	cmp	r2, #37	@ 0x25
 8004e1c:	d1f9      	bne.n	8004e12 <_vfiprintf_r+0x7a>
 8004e1e:	ebba 0b04 	subs.w	fp, sl, r4
 8004e22:	d00b      	beq.n	8004e3c <_vfiprintf_r+0xa4>
 8004e24:	465b      	mov	r3, fp
 8004e26:	4622      	mov	r2, r4
 8004e28:	4629      	mov	r1, r5
 8004e2a:	4630      	mov	r0, r6
 8004e2c:	f7ff ffa1 	bl	8004d72 <__sfputs_r>
 8004e30:	3001      	adds	r0, #1
 8004e32:	f000 80a7 	beq.w	8004f84 <_vfiprintf_r+0x1ec>
 8004e36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e38:	445a      	add	r2, fp
 8004e3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8004e3c:	f89a 3000 	ldrb.w	r3, [sl]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f000 809f 	beq.w	8004f84 <_vfiprintf_r+0x1ec>
 8004e46:	2300      	movs	r3, #0
 8004e48:	f04f 32ff 	mov.w	r2, #4294967295
 8004e4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e50:	f10a 0a01 	add.w	sl, sl, #1
 8004e54:	9304      	str	r3, [sp, #16]
 8004e56:	9307      	str	r3, [sp, #28]
 8004e58:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004e5c:	931a      	str	r3, [sp, #104]	@ 0x68
 8004e5e:	4654      	mov	r4, sl
 8004e60:	2205      	movs	r2, #5
 8004e62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e66:	4853      	ldr	r0, [pc, #332]	@ (8004fb4 <_vfiprintf_r+0x21c>)
 8004e68:	f7fb f9d2 	bl	8000210 <memchr>
 8004e6c:	9a04      	ldr	r2, [sp, #16]
 8004e6e:	b9d8      	cbnz	r0, 8004ea8 <_vfiprintf_r+0x110>
 8004e70:	06d1      	lsls	r1, r2, #27
 8004e72:	bf44      	itt	mi
 8004e74:	2320      	movmi	r3, #32
 8004e76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e7a:	0713      	lsls	r3, r2, #28
 8004e7c:	bf44      	itt	mi
 8004e7e:	232b      	movmi	r3, #43	@ 0x2b
 8004e80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e84:	f89a 3000 	ldrb.w	r3, [sl]
 8004e88:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e8a:	d015      	beq.n	8004eb8 <_vfiprintf_r+0x120>
 8004e8c:	9a07      	ldr	r2, [sp, #28]
 8004e8e:	4654      	mov	r4, sl
 8004e90:	2000      	movs	r0, #0
 8004e92:	f04f 0c0a 	mov.w	ip, #10
 8004e96:	4621      	mov	r1, r4
 8004e98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e9c:	3b30      	subs	r3, #48	@ 0x30
 8004e9e:	2b09      	cmp	r3, #9
 8004ea0:	d94b      	bls.n	8004f3a <_vfiprintf_r+0x1a2>
 8004ea2:	b1b0      	cbz	r0, 8004ed2 <_vfiprintf_r+0x13a>
 8004ea4:	9207      	str	r2, [sp, #28]
 8004ea6:	e014      	b.n	8004ed2 <_vfiprintf_r+0x13a>
 8004ea8:	eba0 0308 	sub.w	r3, r0, r8
 8004eac:	fa09 f303 	lsl.w	r3, r9, r3
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	9304      	str	r3, [sp, #16]
 8004eb4:	46a2      	mov	sl, r4
 8004eb6:	e7d2      	b.n	8004e5e <_vfiprintf_r+0xc6>
 8004eb8:	9b03      	ldr	r3, [sp, #12]
 8004eba:	1d19      	adds	r1, r3, #4
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	9103      	str	r1, [sp, #12]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	bfbb      	ittet	lt
 8004ec4:	425b      	neglt	r3, r3
 8004ec6:	f042 0202 	orrlt.w	r2, r2, #2
 8004eca:	9307      	strge	r3, [sp, #28]
 8004ecc:	9307      	strlt	r3, [sp, #28]
 8004ece:	bfb8      	it	lt
 8004ed0:	9204      	strlt	r2, [sp, #16]
 8004ed2:	7823      	ldrb	r3, [r4, #0]
 8004ed4:	2b2e      	cmp	r3, #46	@ 0x2e
 8004ed6:	d10a      	bne.n	8004eee <_vfiprintf_r+0x156>
 8004ed8:	7863      	ldrb	r3, [r4, #1]
 8004eda:	2b2a      	cmp	r3, #42	@ 0x2a
 8004edc:	d132      	bne.n	8004f44 <_vfiprintf_r+0x1ac>
 8004ede:	9b03      	ldr	r3, [sp, #12]
 8004ee0:	1d1a      	adds	r2, r3, #4
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	9203      	str	r2, [sp, #12]
 8004ee6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004eea:	3402      	adds	r4, #2
 8004eec:	9305      	str	r3, [sp, #20]
 8004eee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004fc4 <_vfiprintf_r+0x22c>
 8004ef2:	7821      	ldrb	r1, [r4, #0]
 8004ef4:	2203      	movs	r2, #3
 8004ef6:	4650      	mov	r0, sl
 8004ef8:	f7fb f98a 	bl	8000210 <memchr>
 8004efc:	b138      	cbz	r0, 8004f0e <_vfiprintf_r+0x176>
 8004efe:	9b04      	ldr	r3, [sp, #16]
 8004f00:	eba0 000a 	sub.w	r0, r0, sl
 8004f04:	2240      	movs	r2, #64	@ 0x40
 8004f06:	4082      	lsls	r2, r0
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	3401      	adds	r4, #1
 8004f0c:	9304      	str	r3, [sp, #16]
 8004f0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f12:	4829      	ldr	r0, [pc, #164]	@ (8004fb8 <_vfiprintf_r+0x220>)
 8004f14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004f18:	2206      	movs	r2, #6
 8004f1a:	f7fb f979 	bl	8000210 <memchr>
 8004f1e:	2800      	cmp	r0, #0
 8004f20:	d03f      	beq.n	8004fa2 <_vfiprintf_r+0x20a>
 8004f22:	4b26      	ldr	r3, [pc, #152]	@ (8004fbc <_vfiprintf_r+0x224>)
 8004f24:	bb1b      	cbnz	r3, 8004f6e <_vfiprintf_r+0x1d6>
 8004f26:	9b03      	ldr	r3, [sp, #12]
 8004f28:	3307      	adds	r3, #7
 8004f2a:	f023 0307 	bic.w	r3, r3, #7
 8004f2e:	3308      	adds	r3, #8
 8004f30:	9303      	str	r3, [sp, #12]
 8004f32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f34:	443b      	add	r3, r7
 8004f36:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f38:	e76a      	b.n	8004e10 <_vfiprintf_r+0x78>
 8004f3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f3e:	460c      	mov	r4, r1
 8004f40:	2001      	movs	r0, #1
 8004f42:	e7a8      	b.n	8004e96 <_vfiprintf_r+0xfe>
 8004f44:	2300      	movs	r3, #0
 8004f46:	3401      	adds	r4, #1
 8004f48:	9305      	str	r3, [sp, #20]
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	f04f 0c0a 	mov.w	ip, #10
 8004f50:	4620      	mov	r0, r4
 8004f52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f56:	3a30      	subs	r2, #48	@ 0x30
 8004f58:	2a09      	cmp	r2, #9
 8004f5a:	d903      	bls.n	8004f64 <_vfiprintf_r+0x1cc>
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d0c6      	beq.n	8004eee <_vfiprintf_r+0x156>
 8004f60:	9105      	str	r1, [sp, #20]
 8004f62:	e7c4      	b.n	8004eee <_vfiprintf_r+0x156>
 8004f64:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f68:	4604      	mov	r4, r0
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e7f0      	b.n	8004f50 <_vfiprintf_r+0x1b8>
 8004f6e:	ab03      	add	r3, sp, #12
 8004f70:	9300      	str	r3, [sp, #0]
 8004f72:	462a      	mov	r2, r5
 8004f74:	4b12      	ldr	r3, [pc, #72]	@ (8004fc0 <_vfiprintf_r+0x228>)
 8004f76:	a904      	add	r1, sp, #16
 8004f78:	4630      	mov	r0, r6
 8004f7a:	f3af 8000 	nop.w
 8004f7e:	4607      	mov	r7, r0
 8004f80:	1c78      	adds	r0, r7, #1
 8004f82:	d1d6      	bne.n	8004f32 <_vfiprintf_r+0x19a>
 8004f84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004f86:	07d9      	lsls	r1, r3, #31
 8004f88:	d405      	bmi.n	8004f96 <_vfiprintf_r+0x1fe>
 8004f8a:	89ab      	ldrh	r3, [r5, #12]
 8004f8c:	059a      	lsls	r2, r3, #22
 8004f8e:	d402      	bmi.n	8004f96 <_vfiprintf_r+0x1fe>
 8004f90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004f92:	f7ff fc57 	bl	8004844 <__retarget_lock_release_recursive>
 8004f96:	89ab      	ldrh	r3, [r5, #12]
 8004f98:	065b      	lsls	r3, r3, #25
 8004f9a:	f53f af1f 	bmi.w	8004ddc <_vfiprintf_r+0x44>
 8004f9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004fa0:	e71e      	b.n	8004de0 <_vfiprintf_r+0x48>
 8004fa2:	ab03      	add	r3, sp, #12
 8004fa4:	9300      	str	r3, [sp, #0]
 8004fa6:	462a      	mov	r2, r5
 8004fa8:	4b05      	ldr	r3, [pc, #20]	@ (8004fc0 <_vfiprintf_r+0x228>)
 8004faa:	a904      	add	r1, sp, #16
 8004fac:	4630      	mov	r0, r6
 8004fae:	f000 f879 	bl	80050a4 <_printf_i>
 8004fb2:	e7e4      	b.n	8004f7e <_vfiprintf_r+0x1e6>
 8004fb4:	08005841 	.word	0x08005841
 8004fb8:	0800584b 	.word	0x0800584b
 8004fbc:	00000000 	.word	0x00000000
 8004fc0:	08004d73 	.word	0x08004d73
 8004fc4:	08005847 	.word	0x08005847

08004fc8 <_printf_common>:
 8004fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fcc:	4616      	mov	r6, r2
 8004fce:	4698      	mov	r8, r3
 8004fd0:	688a      	ldr	r2, [r1, #8]
 8004fd2:	690b      	ldr	r3, [r1, #16]
 8004fd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	bfb8      	it	lt
 8004fdc:	4613      	movlt	r3, r2
 8004fde:	6033      	str	r3, [r6, #0]
 8004fe0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004fe4:	4607      	mov	r7, r0
 8004fe6:	460c      	mov	r4, r1
 8004fe8:	b10a      	cbz	r2, 8004fee <_printf_common+0x26>
 8004fea:	3301      	adds	r3, #1
 8004fec:	6033      	str	r3, [r6, #0]
 8004fee:	6823      	ldr	r3, [r4, #0]
 8004ff0:	0699      	lsls	r1, r3, #26
 8004ff2:	bf42      	ittt	mi
 8004ff4:	6833      	ldrmi	r3, [r6, #0]
 8004ff6:	3302      	addmi	r3, #2
 8004ff8:	6033      	strmi	r3, [r6, #0]
 8004ffa:	6825      	ldr	r5, [r4, #0]
 8004ffc:	f015 0506 	ands.w	r5, r5, #6
 8005000:	d106      	bne.n	8005010 <_printf_common+0x48>
 8005002:	f104 0a19 	add.w	sl, r4, #25
 8005006:	68e3      	ldr	r3, [r4, #12]
 8005008:	6832      	ldr	r2, [r6, #0]
 800500a:	1a9b      	subs	r3, r3, r2
 800500c:	42ab      	cmp	r3, r5
 800500e:	dc26      	bgt.n	800505e <_printf_common+0x96>
 8005010:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005014:	6822      	ldr	r2, [r4, #0]
 8005016:	3b00      	subs	r3, #0
 8005018:	bf18      	it	ne
 800501a:	2301      	movne	r3, #1
 800501c:	0692      	lsls	r2, r2, #26
 800501e:	d42b      	bmi.n	8005078 <_printf_common+0xb0>
 8005020:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005024:	4641      	mov	r1, r8
 8005026:	4638      	mov	r0, r7
 8005028:	47c8      	blx	r9
 800502a:	3001      	adds	r0, #1
 800502c:	d01e      	beq.n	800506c <_printf_common+0xa4>
 800502e:	6823      	ldr	r3, [r4, #0]
 8005030:	6922      	ldr	r2, [r4, #16]
 8005032:	f003 0306 	and.w	r3, r3, #6
 8005036:	2b04      	cmp	r3, #4
 8005038:	bf02      	ittt	eq
 800503a:	68e5      	ldreq	r5, [r4, #12]
 800503c:	6833      	ldreq	r3, [r6, #0]
 800503e:	1aed      	subeq	r5, r5, r3
 8005040:	68a3      	ldr	r3, [r4, #8]
 8005042:	bf0c      	ite	eq
 8005044:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005048:	2500      	movne	r5, #0
 800504a:	4293      	cmp	r3, r2
 800504c:	bfc4      	itt	gt
 800504e:	1a9b      	subgt	r3, r3, r2
 8005050:	18ed      	addgt	r5, r5, r3
 8005052:	2600      	movs	r6, #0
 8005054:	341a      	adds	r4, #26
 8005056:	42b5      	cmp	r5, r6
 8005058:	d11a      	bne.n	8005090 <_printf_common+0xc8>
 800505a:	2000      	movs	r0, #0
 800505c:	e008      	b.n	8005070 <_printf_common+0xa8>
 800505e:	2301      	movs	r3, #1
 8005060:	4652      	mov	r2, sl
 8005062:	4641      	mov	r1, r8
 8005064:	4638      	mov	r0, r7
 8005066:	47c8      	blx	r9
 8005068:	3001      	adds	r0, #1
 800506a:	d103      	bne.n	8005074 <_printf_common+0xac>
 800506c:	f04f 30ff 	mov.w	r0, #4294967295
 8005070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005074:	3501      	adds	r5, #1
 8005076:	e7c6      	b.n	8005006 <_printf_common+0x3e>
 8005078:	18e1      	adds	r1, r4, r3
 800507a:	1c5a      	adds	r2, r3, #1
 800507c:	2030      	movs	r0, #48	@ 0x30
 800507e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005082:	4422      	add	r2, r4
 8005084:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005088:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800508c:	3302      	adds	r3, #2
 800508e:	e7c7      	b.n	8005020 <_printf_common+0x58>
 8005090:	2301      	movs	r3, #1
 8005092:	4622      	mov	r2, r4
 8005094:	4641      	mov	r1, r8
 8005096:	4638      	mov	r0, r7
 8005098:	47c8      	blx	r9
 800509a:	3001      	adds	r0, #1
 800509c:	d0e6      	beq.n	800506c <_printf_common+0xa4>
 800509e:	3601      	adds	r6, #1
 80050a0:	e7d9      	b.n	8005056 <_printf_common+0x8e>
	...

080050a4 <_printf_i>:
 80050a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050a8:	7e0f      	ldrb	r7, [r1, #24]
 80050aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80050ac:	2f78      	cmp	r7, #120	@ 0x78
 80050ae:	4691      	mov	r9, r2
 80050b0:	4680      	mov	r8, r0
 80050b2:	460c      	mov	r4, r1
 80050b4:	469a      	mov	sl, r3
 80050b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80050ba:	d807      	bhi.n	80050cc <_printf_i+0x28>
 80050bc:	2f62      	cmp	r7, #98	@ 0x62
 80050be:	d80a      	bhi.n	80050d6 <_printf_i+0x32>
 80050c0:	2f00      	cmp	r7, #0
 80050c2:	f000 80d2 	beq.w	800526a <_printf_i+0x1c6>
 80050c6:	2f58      	cmp	r7, #88	@ 0x58
 80050c8:	f000 80b9 	beq.w	800523e <_printf_i+0x19a>
 80050cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80050d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80050d4:	e03a      	b.n	800514c <_printf_i+0xa8>
 80050d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80050da:	2b15      	cmp	r3, #21
 80050dc:	d8f6      	bhi.n	80050cc <_printf_i+0x28>
 80050de:	a101      	add	r1, pc, #4	@ (adr r1, 80050e4 <_printf_i+0x40>)
 80050e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80050e4:	0800513d 	.word	0x0800513d
 80050e8:	08005151 	.word	0x08005151
 80050ec:	080050cd 	.word	0x080050cd
 80050f0:	080050cd 	.word	0x080050cd
 80050f4:	080050cd 	.word	0x080050cd
 80050f8:	080050cd 	.word	0x080050cd
 80050fc:	08005151 	.word	0x08005151
 8005100:	080050cd 	.word	0x080050cd
 8005104:	080050cd 	.word	0x080050cd
 8005108:	080050cd 	.word	0x080050cd
 800510c:	080050cd 	.word	0x080050cd
 8005110:	08005251 	.word	0x08005251
 8005114:	0800517b 	.word	0x0800517b
 8005118:	0800520b 	.word	0x0800520b
 800511c:	080050cd 	.word	0x080050cd
 8005120:	080050cd 	.word	0x080050cd
 8005124:	08005273 	.word	0x08005273
 8005128:	080050cd 	.word	0x080050cd
 800512c:	0800517b 	.word	0x0800517b
 8005130:	080050cd 	.word	0x080050cd
 8005134:	080050cd 	.word	0x080050cd
 8005138:	08005213 	.word	0x08005213
 800513c:	6833      	ldr	r3, [r6, #0]
 800513e:	1d1a      	adds	r2, r3, #4
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	6032      	str	r2, [r6, #0]
 8005144:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005148:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800514c:	2301      	movs	r3, #1
 800514e:	e09d      	b.n	800528c <_printf_i+0x1e8>
 8005150:	6833      	ldr	r3, [r6, #0]
 8005152:	6820      	ldr	r0, [r4, #0]
 8005154:	1d19      	adds	r1, r3, #4
 8005156:	6031      	str	r1, [r6, #0]
 8005158:	0606      	lsls	r6, r0, #24
 800515a:	d501      	bpl.n	8005160 <_printf_i+0xbc>
 800515c:	681d      	ldr	r5, [r3, #0]
 800515e:	e003      	b.n	8005168 <_printf_i+0xc4>
 8005160:	0645      	lsls	r5, r0, #25
 8005162:	d5fb      	bpl.n	800515c <_printf_i+0xb8>
 8005164:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005168:	2d00      	cmp	r5, #0
 800516a:	da03      	bge.n	8005174 <_printf_i+0xd0>
 800516c:	232d      	movs	r3, #45	@ 0x2d
 800516e:	426d      	negs	r5, r5
 8005170:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005174:	4859      	ldr	r0, [pc, #356]	@ (80052dc <_printf_i+0x238>)
 8005176:	230a      	movs	r3, #10
 8005178:	e011      	b.n	800519e <_printf_i+0xfa>
 800517a:	6821      	ldr	r1, [r4, #0]
 800517c:	6833      	ldr	r3, [r6, #0]
 800517e:	0608      	lsls	r0, r1, #24
 8005180:	f853 5b04 	ldr.w	r5, [r3], #4
 8005184:	d402      	bmi.n	800518c <_printf_i+0xe8>
 8005186:	0649      	lsls	r1, r1, #25
 8005188:	bf48      	it	mi
 800518a:	b2ad      	uxthmi	r5, r5
 800518c:	2f6f      	cmp	r7, #111	@ 0x6f
 800518e:	4853      	ldr	r0, [pc, #332]	@ (80052dc <_printf_i+0x238>)
 8005190:	6033      	str	r3, [r6, #0]
 8005192:	bf14      	ite	ne
 8005194:	230a      	movne	r3, #10
 8005196:	2308      	moveq	r3, #8
 8005198:	2100      	movs	r1, #0
 800519a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800519e:	6866      	ldr	r6, [r4, #4]
 80051a0:	60a6      	str	r6, [r4, #8]
 80051a2:	2e00      	cmp	r6, #0
 80051a4:	bfa2      	ittt	ge
 80051a6:	6821      	ldrge	r1, [r4, #0]
 80051a8:	f021 0104 	bicge.w	r1, r1, #4
 80051ac:	6021      	strge	r1, [r4, #0]
 80051ae:	b90d      	cbnz	r5, 80051b4 <_printf_i+0x110>
 80051b0:	2e00      	cmp	r6, #0
 80051b2:	d04b      	beq.n	800524c <_printf_i+0x1a8>
 80051b4:	4616      	mov	r6, r2
 80051b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80051ba:	fb03 5711 	mls	r7, r3, r1, r5
 80051be:	5dc7      	ldrb	r7, [r0, r7]
 80051c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80051c4:	462f      	mov	r7, r5
 80051c6:	42bb      	cmp	r3, r7
 80051c8:	460d      	mov	r5, r1
 80051ca:	d9f4      	bls.n	80051b6 <_printf_i+0x112>
 80051cc:	2b08      	cmp	r3, #8
 80051ce:	d10b      	bne.n	80051e8 <_printf_i+0x144>
 80051d0:	6823      	ldr	r3, [r4, #0]
 80051d2:	07df      	lsls	r7, r3, #31
 80051d4:	d508      	bpl.n	80051e8 <_printf_i+0x144>
 80051d6:	6923      	ldr	r3, [r4, #16]
 80051d8:	6861      	ldr	r1, [r4, #4]
 80051da:	4299      	cmp	r1, r3
 80051dc:	bfde      	ittt	le
 80051de:	2330      	movle	r3, #48	@ 0x30
 80051e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80051e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80051e8:	1b92      	subs	r2, r2, r6
 80051ea:	6122      	str	r2, [r4, #16]
 80051ec:	f8cd a000 	str.w	sl, [sp]
 80051f0:	464b      	mov	r3, r9
 80051f2:	aa03      	add	r2, sp, #12
 80051f4:	4621      	mov	r1, r4
 80051f6:	4640      	mov	r0, r8
 80051f8:	f7ff fee6 	bl	8004fc8 <_printf_common>
 80051fc:	3001      	adds	r0, #1
 80051fe:	d14a      	bne.n	8005296 <_printf_i+0x1f2>
 8005200:	f04f 30ff 	mov.w	r0, #4294967295
 8005204:	b004      	add	sp, #16
 8005206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800520a:	6823      	ldr	r3, [r4, #0]
 800520c:	f043 0320 	orr.w	r3, r3, #32
 8005210:	6023      	str	r3, [r4, #0]
 8005212:	4833      	ldr	r0, [pc, #204]	@ (80052e0 <_printf_i+0x23c>)
 8005214:	2778      	movs	r7, #120	@ 0x78
 8005216:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800521a:	6823      	ldr	r3, [r4, #0]
 800521c:	6831      	ldr	r1, [r6, #0]
 800521e:	061f      	lsls	r7, r3, #24
 8005220:	f851 5b04 	ldr.w	r5, [r1], #4
 8005224:	d402      	bmi.n	800522c <_printf_i+0x188>
 8005226:	065f      	lsls	r7, r3, #25
 8005228:	bf48      	it	mi
 800522a:	b2ad      	uxthmi	r5, r5
 800522c:	6031      	str	r1, [r6, #0]
 800522e:	07d9      	lsls	r1, r3, #31
 8005230:	bf44      	itt	mi
 8005232:	f043 0320 	orrmi.w	r3, r3, #32
 8005236:	6023      	strmi	r3, [r4, #0]
 8005238:	b11d      	cbz	r5, 8005242 <_printf_i+0x19e>
 800523a:	2310      	movs	r3, #16
 800523c:	e7ac      	b.n	8005198 <_printf_i+0xf4>
 800523e:	4827      	ldr	r0, [pc, #156]	@ (80052dc <_printf_i+0x238>)
 8005240:	e7e9      	b.n	8005216 <_printf_i+0x172>
 8005242:	6823      	ldr	r3, [r4, #0]
 8005244:	f023 0320 	bic.w	r3, r3, #32
 8005248:	6023      	str	r3, [r4, #0]
 800524a:	e7f6      	b.n	800523a <_printf_i+0x196>
 800524c:	4616      	mov	r6, r2
 800524e:	e7bd      	b.n	80051cc <_printf_i+0x128>
 8005250:	6833      	ldr	r3, [r6, #0]
 8005252:	6825      	ldr	r5, [r4, #0]
 8005254:	6961      	ldr	r1, [r4, #20]
 8005256:	1d18      	adds	r0, r3, #4
 8005258:	6030      	str	r0, [r6, #0]
 800525a:	062e      	lsls	r6, r5, #24
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	d501      	bpl.n	8005264 <_printf_i+0x1c0>
 8005260:	6019      	str	r1, [r3, #0]
 8005262:	e002      	b.n	800526a <_printf_i+0x1c6>
 8005264:	0668      	lsls	r0, r5, #25
 8005266:	d5fb      	bpl.n	8005260 <_printf_i+0x1bc>
 8005268:	8019      	strh	r1, [r3, #0]
 800526a:	2300      	movs	r3, #0
 800526c:	6123      	str	r3, [r4, #16]
 800526e:	4616      	mov	r6, r2
 8005270:	e7bc      	b.n	80051ec <_printf_i+0x148>
 8005272:	6833      	ldr	r3, [r6, #0]
 8005274:	1d1a      	adds	r2, r3, #4
 8005276:	6032      	str	r2, [r6, #0]
 8005278:	681e      	ldr	r6, [r3, #0]
 800527a:	6862      	ldr	r2, [r4, #4]
 800527c:	2100      	movs	r1, #0
 800527e:	4630      	mov	r0, r6
 8005280:	f7fa ffc6 	bl	8000210 <memchr>
 8005284:	b108      	cbz	r0, 800528a <_printf_i+0x1e6>
 8005286:	1b80      	subs	r0, r0, r6
 8005288:	6060      	str	r0, [r4, #4]
 800528a:	6863      	ldr	r3, [r4, #4]
 800528c:	6123      	str	r3, [r4, #16]
 800528e:	2300      	movs	r3, #0
 8005290:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005294:	e7aa      	b.n	80051ec <_printf_i+0x148>
 8005296:	6923      	ldr	r3, [r4, #16]
 8005298:	4632      	mov	r2, r6
 800529a:	4649      	mov	r1, r9
 800529c:	4640      	mov	r0, r8
 800529e:	47d0      	blx	sl
 80052a0:	3001      	adds	r0, #1
 80052a2:	d0ad      	beq.n	8005200 <_printf_i+0x15c>
 80052a4:	6823      	ldr	r3, [r4, #0]
 80052a6:	079b      	lsls	r3, r3, #30
 80052a8:	d413      	bmi.n	80052d2 <_printf_i+0x22e>
 80052aa:	68e0      	ldr	r0, [r4, #12]
 80052ac:	9b03      	ldr	r3, [sp, #12]
 80052ae:	4298      	cmp	r0, r3
 80052b0:	bfb8      	it	lt
 80052b2:	4618      	movlt	r0, r3
 80052b4:	e7a6      	b.n	8005204 <_printf_i+0x160>
 80052b6:	2301      	movs	r3, #1
 80052b8:	4632      	mov	r2, r6
 80052ba:	4649      	mov	r1, r9
 80052bc:	4640      	mov	r0, r8
 80052be:	47d0      	blx	sl
 80052c0:	3001      	adds	r0, #1
 80052c2:	d09d      	beq.n	8005200 <_printf_i+0x15c>
 80052c4:	3501      	adds	r5, #1
 80052c6:	68e3      	ldr	r3, [r4, #12]
 80052c8:	9903      	ldr	r1, [sp, #12]
 80052ca:	1a5b      	subs	r3, r3, r1
 80052cc:	42ab      	cmp	r3, r5
 80052ce:	dcf2      	bgt.n	80052b6 <_printf_i+0x212>
 80052d0:	e7eb      	b.n	80052aa <_printf_i+0x206>
 80052d2:	2500      	movs	r5, #0
 80052d4:	f104 0619 	add.w	r6, r4, #25
 80052d8:	e7f5      	b.n	80052c6 <_printf_i+0x222>
 80052da:	bf00      	nop
 80052dc:	08005852 	.word	0x08005852
 80052e0:	08005863 	.word	0x08005863

080052e4 <__sflush_r>:
 80052e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80052e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052ec:	0716      	lsls	r6, r2, #28
 80052ee:	4605      	mov	r5, r0
 80052f0:	460c      	mov	r4, r1
 80052f2:	d454      	bmi.n	800539e <__sflush_r+0xba>
 80052f4:	684b      	ldr	r3, [r1, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	dc02      	bgt.n	8005300 <__sflush_r+0x1c>
 80052fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	dd48      	ble.n	8005392 <__sflush_r+0xae>
 8005300:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005302:	2e00      	cmp	r6, #0
 8005304:	d045      	beq.n	8005392 <__sflush_r+0xae>
 8005306:	2300      	movs	r3, #0
 8005308:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800530c:	682f      	ldr	r7, [r5, #0]
 800530e:	6a21      	ldr	r1, [r4, #32]
 8005310:	602b      	str	r3, [r5, #0]
 8005312:	d030      	beq.n	8005376 <__sflush_r+0x92>
 8005314:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005316:	89a3      	ldrh	r3, [r4, #12]
 8005318:	0759      	lsls	r1, r3, #29
 800531a:	d505      	bpl.n	8005328 <__sflush_r+0x44>
 800531c:	6863      	ldr	r3, [r4, #4]
 800531e:	1ad2      	subs	r2, r2, r3
 8005320:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005322:	b10b      	cbz	r3, 8005328 <__sflush_r+0x44>
 8005324:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005326:	1ad2      	subs	r2, r2, r3
 8005328:	2300      	movs	r3, #0
 800532a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800532c:	6a21      	ldr	r1, [r4, #32]
 800532e:	4628      	mov	r0, r5
 8005330:	47b0      	blx	r6
 8005332:	1c43      	adds	r3, r0, #1
 8005334:	89a3      	ldrh	r3, [r4, #12]
 8005336:	d106      	bne.n	8005346 <__sflush_r+0x62>
 8005338:	6829      	ldr	r1, [r5, #0]
 800533a:	291d      	cmp	r1, #29
 800533c:	d82b      	bhi.n	8005396 <__sflush_r+0xb2>
 800533e:	4a2a      	ldr	r2, [pc, #168]	@ (80053e8 <__sflush_r+0x104>)
 8005340:	410a      	asrs	r2, r1
 8005342:	07d6      	lsls	r6, r2, #31
 8005344:	d427      	bmi.n	8005396 <__sflush_r+0xb2>
 8005346:	2200      	movs	r2, #0
 8005348:	6062      	str	r2, [r4, #4]
 800534a:	04d9      	lsls	r1, r3, #19
 800534c:	6922      	ldr	r2, [r4, #16]
 800534e:	6022      	str	r2, [r4, #0]
 8005350:	d504      	bpl.n	800535c <__sflush_r+0x78>
 8005352:	1c42      	adds	r2, r0, #1
 8005354:	d101      	bne.n	800535a <__sflush_r+0x76>
 8005356:	682b      	ldr	r3, [r5, #0]
 8005358:	b903      	cbnz	r3, 800535c <__sflush_r+0x78>
 800535a:	6560      	str	r0, [r4, #84]	@ 0x54
 800535c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800535e:	602f      	str	r7, [r5, #0]
 8005360:	b1b9      	cbz	r1, 8005392 <__sflush_r+0xae>
 8005362:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005366:	4299      	cmp	r1, r3
 8005368:	d002      	beq.n	8005370 <__sflush_r+0x8c>
 800536a:	4628      	mov	r0, r5
 800536c:	f7ff fa92 	bl	8004894 <_free_r>
 8005370:	2300      	movs	r3, #0
 8005372:	6363      	str	r3, [r4, #52]	@ 0x34
 8005374:	e00d      	b.n	8005392 <__sflush_r+0xae>
 8005376:	2301      	movs	r3, #1
 8005378:	4628      	mov	r0, r5
 800537a:	47b0      	blx	r6
 800537c:	4602      	mov	r2, r0
 800537e:	1c50      	adds	r0, r2, #1
 8005380:	d1c9      	bne.n	8005316 <__sflush_r+0x32>
 8005382:	682b      	ldr	r3, [r5, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d0c6      	beq.n	8005316 <__sflush_r+0x32>
 8005388:	2b1d      	cmp	r3, #29
 800538a:	d001      	beq.n	8005390 <__sflush_r+0xac>
 800538c:	2b16      	cmp	r3, #22
 800538e:	d11e      	bne.n	80053ce <__sflush_r+0xea>
 8005390:	602f      	str	r7, [r5, #0]
 8005392:	2000      	movs	r0, #0
 8005394:	e022      	b.n	80053dc <__sflush_r+0xf8>
 8005396:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800539a:	b21b      	sxth	r3, r3
 800539c:	e01b      	b.n	80053d6 <__sflush_r+0xf2>
 800539e:	690f      	ldr	r7, [r1, #16]
 80053a0:	2f00      	cmp	r7, #0
 80053a2:	d0f6      	beq.n	8005392 <__sflush_r+0xae>
 80053a4:	0793      	lsls	r3, r2, #30
 80053a6:	680e      	ldr	r6, [r1, #0]
 80053a8:	bf08      	it	eq
 80053aa:	694b      	ldreq	r3, [r1, #20]
 80053ac:	600f      	str	r7, [r1, #0]
 80053ae:	bf18      	it	ne
 80053b0:	2300      	movne	r3, #0
 80053b2:	eba6 0807 	sub.w	r8, r6, r7
 80053b6:	608b      	str	r3, [r1, #8]
 80053b8:	f1b8 0f00 	cmp.w	r8, #0
 80053bc:	dde9      	ble.n	8005392 <__sflush_r+0xae>
 80053be:	6a21      	ldr	r1, [r4, #32]
 80053c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80053c2:	4643      	mov	r3, r8
 80053c4:	463a      	mov	r2, r7
 80053c6:	4628      	mov	r0, r5
 80053c8:	47b0      	blx	r6
 80053ca:	2800      	cmp	r0, #0
 80053cc:	dc08      	bgt.n	80053e0 <__sflush_r+0xfc>
 80053ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053d6:	81a3      	strh	r3, [r4, #12]
 80053d8:	f04f 30ff 	mov.w	r0, #4294967295
 80053dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053e0:	4407      	add	r7, r0
 80053e2:	eba8 0800 	sub.w	r8, r8, r0
 80053e6:	e7e7      	b.n	80053b8 <__sflush_r+0xd4>
 80053e8:	dfbffffe 	.word	0xdfbffffe

080053ec <_fflush_r>:
 80053ec:	b538      	push	{r3, r4, r5, lr}
 80053ee:	690b      	ldr	r3, [r1, #16]
 80053f0:	4605      	mov	r5, r0
 80053f2:	460c      	mov	r4, r1
 80053f4:	b913      	cbnz	r3, 80053fc <_fflush_r+0x10>
 80053f6:	2500      	movs	r5, #0
 80053f8:	4628      	mov	r0, r5
 80053fa:	bd38      	pop	{r3, r4, r5, pc}
 80053fc:	b118      	cbz	r0, 8005406 <_fflush_r+0x1a>
 80053fe:	6a03      	ldr	r3, [r0, #32]
 8005400:	b90b      	cbnz	r3, 8005406 <_fflush_r+0x1a>
 8005402:	f7fe ffab 	bl	800435c <__sinit>
 8005406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d0f3      	beq.n	80053f6 <_fflush_r+0xa>
 800540e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005410:	07d0      	lsls	r0, r2, #31
 8005412:	d404      	bmi.n	800541e <_fflush_r+0x32>
 8005414:	0599      	lsls	r1, r3, #22
 8005416:	d402      	bmi.n	800541e <_fflush_r+0x32>
 8005418:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800541a:	f7ff fa12 	bl	8004842 <__retarget_lock_acquire_recursive>
 800541e:	4628      	mov	r0, r5
 8005420:	4621      	mov	r1, r4
 8005422:	f7ff ff5f 	bl	80052e4 <__sflush_r>
 8005426:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005428:	07da      	lsls	r2, r3, #31
 800542a:	4605      	mov	r5, r0
 800542c:	d4e4      	bmi.n	80053f8 <_fflush_r+0xc>
 800542e:	89a3      	ldrh	r3, [r4, #12]
 8005430:	059b      	lsls	r3, r3, #22
 8005432:	d4e1      	bmi.n	80053f8 <_fflush_r+0xc>
 8005434:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005436:	f7ff fa05 	bl	8004844 <__retarget_lock_release_recursive>
 800543a:	e7dd      	b.n	80053f8 <_fflush_r+0xc>

0800543c <fiprintf>:
 800543c:	b40e      	push	{r1, r2, r3}
 800543e:	b503      	push	{r0, r1, lr}
 8005440:	4601      	mov	r1, r0
 8005442:	ab03      	add	r3, sp, #12
 8005444:	4805      	ldr	r0, [pc, #20]	@ (800545c <fiprintf+0x20>)
 8005446:	f853 2b04 	ldr.w	r2, [r3], #4
 800544a:	6800      	ldr	r0, [r0, #0]
 800544c:	9301      	str	r3, [sp, #4]
 800544e:	f7ff fca3 	bl	8004d98 <_vfiprintf_r>
 8005452:	b002      	add	sp, #8
 8005454:	f85d eb04 	ldr.w	lr, [sp], #4
 8005458:	b003      	add	sp, #12
 800545a:	4770      	bx	lr
 800545c:	20000018 	.word	0x20000018

08005460 <__swhatbuf_r>:
 8005460:	b570      	push	{r4, r5, r6, lr}
 8005462:	460c      	mov	r4, r1
 8005464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005468:	2900      	cmp	r1, #0
 800546a:	b096      	sub	sp, #88	@ 0x58
 800546c:	4615      	mov	r5, r2
 800546e:	461e      	mov	r6, r3
 8005470:	da0d      	bge.n	800548e <__swhatbuf_r+0x2e>
 8005472:	89a3      	ldrh	r3, [r4, #12]
 8005474:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005478:	f04f 0100 	mov.w	r1, #0
 800547c:	bf14      	ite	ne
 800547e:	2340      	movne	r3, #64	@ 0x40
 8005480:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005484:	2000      	movs	r0, #0
 8005486:	6031      	str	r1, [r6, #0]
 8005488:	602b      	str	r3, [r5, #0]
 800548a:	b016      	add	sp, #88	@ 0x58
 800548c:	bd70      	pop	{r4, r5, r6, pc}
 800548e:	466a      	mov	r2, sp
 8005490:	f000 f862 	bl	8005558 <_fstat_r>
 8005494:	2800      	cmp	r0, #0
 8005496:	dbec      	blt.n	8005472 <__swhatbuf_r+0x12>
 8005498:	9901      	ldr	r1, [sp, #4]
 800549a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800549e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80054a2:	4259      	negs	r1, r3
 80054a4:	4159      	adcs	r1, r3
 80054a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80054aa:	e7eb      	b.n	8005484 <__swhatbuf_r+0x24>

080054ac <__smakebuf_r>:
 80054ac:	898b      	ldrh	r3, [r1, #12]
 80054ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054b0:	079d      	lsls	r5, r3, #30
 80054b2:	4606      	mov	r6, r0
 80054b4:	460c      	mov	r4, r1
 80054b6:	d507      	bpl.n	80054c8 <__smakebuf_r+0x1c>
 80054b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80054bc:	6023      	str	r3, [r4, #0]
 80054be:	6123      	str	r3, [r4, #16]
 80054c0:	2301      	movs	r3, #1
 80054c2:	6163      	str	r3, [r4, #20]
 80054c4:	b003      	add	sp, #12
 80054c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054c8:	ab01      	add	r3, sp, #4
 80054ca:	466a      	mov	r2, sp
 80054cc:	f7ff ffc8 	bl	8005460 <__swhatbuf_r>
 80054d0:	9f00      	ldr	r7, [sp, #0]
 80054d2:	4605      	mov	r5, r0
 80054d4:	4639      	mov	r1, r7
 80054d6:	4630      	mov	r0, r6
 80054d8:	f7ff fa50 	bl	800497c <_malloc_r>
 80054dc:	b948      	cbnz	r0, 80054f2 <__smakebuf_r+0x46>
 80054de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054e2:	059a      	lsls	r2, r3, #22
 80054e4:	d4ee      	bmi.n	80054c4 <__smakebuf_r+0x18>
 80054e6:	f023 0303 	bic.w	r3, r3, #3
 80054ea:	f043 0302 	orr.w	r3, r3, #2
 80054ee:	81a3      	strh	r3, [r4, #12]
 80054f0:	e7e2      	b.n	80054b8 <__smakebuf_r+0xc>
 80054f2:	89a3      	ldrh	r3, [r4, #12]
 80054f4:	6020      	str	r0, [r4, #0]
 80054f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054fa:	81a3      	strh	r3, [r4, #12]
 80054fc:	9b01      	ldr	r3, [sp, #4]
 80054fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005502:	b15b      	cbz	r3, 800551c <__smakebuf_r+0x70>
 8005504:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005508:	4630      	mov	r0, r6
 800550a:	f000 f837 	bl	800557c <_isatty_r>
 800550e:	b128      	cbz	r0, 800551c <__smakebuf_r+0x70>
 8005510:	89a3      	ldrh	r3, [r4, #12]
 8005512:	f023 0303 	bic.w	r3, r3, #3
 8005516:	f043 0301 	orr.w	r3, r3, #1
 800551a:	81a3      	strh	r3, [r4, #12]
 800551c:	89a3      	ldrh	r3, [r4, #12]
 800551e:	431d      	orrs	r5, r3
 8005520:	81a5      	strh	r5, [r4, #12]
 8005522:	e7cf      	b.n	80054c4 <__smakebuf_r+0x18>

08005524 <memmove>:
 8005524:	4288      	cmp	r0, r1
 8005526:	b510      	push	{r4, lr}
 8005528:	eb01 0402 	add.w	r4, r1, r2
 800552c:	d902      	bls.n	8005534 <memmove+0x10>
 800552e:	4284      	cmp	r4, r0
 8005530:	4623      	mov	r3, r4
 8005532:	d807      	bhi.n	8005544 <memmove+0x20>
 8005534:	1e43      	subs	r3, r0, #1
 8005536:	42a1      	cmp	r1, r4
 8005538:	d008      	beq.n	800554c <memmove+0x28>
 800553a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800553e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005542:	e7f8      	b.n	8005536 <memmove+0x12>
 8005544:	4402      	add	r2, r0
 8005546:	4601      	mov	r1, r0
 8005548:	428a      	cmp	r2, r1
 800554a:	d100      	bne.n	800554e <memmove+0x2a>
 800554c:	bd10      	pop	{r4, pc}
 800554e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005552:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005556:	e7f7      	b.n	8005548 <memmove+0x24>

08005558 <_fstat_r>:
 8005558:	b538      	push	{r3, r4, r5, lr}
 800555a:	4d07      	ldr	r5, [pc, #28]	@ (8005578 <_fstat_r+0x20>)
 800555c:	2300      	movs	r3, #0
 800555e:	4604      	mov	r4, r0
 8005560:	4608      	mov	r0, r1
 8005562:	4611      	mov	r1, r2
 8005564:	602b      	str	r3, [r5, #0]
 8005566:	f7fb fdc5 	bl	80010f4 <_fstat>
 800556a:	1c43      	adds	r3, r0, #1
 800556c:	d102      	bne.n	8005574 <_fstat_r+0x1c>
 800556e:	682b      	ldr	r3, [r5, #0]
 8005570:	b103      	cbz	r3, 8005574 <_fstat_r+0x1c>
 8005572:	6023      	str	r3, [r4, #0]
 8005574:	bd38      	pop	{r3, r4, r5, pc}
 8005576:	bf00      	nop
 8005578:	20000378 	.word	0x20000378

0800557c <_isatty_r>:
 800557c:	b538      	push	{r3, r4, r5, lr}
 800557e:	4d06      	ldr	r5, [pc, #24]	@ (8005598 <_isatty_r+0x1c>)
 8005580:	2300      	movs	r3, #0
 8005582:	4604      	mov	r4, r0
 8005584:	4608      	mov	r0, r1
 8005586:	602b      	str	r3, [r5, #0]
 8005588:	f7fb fdc4 	bl	8001114 <_isatty>
 800558c:	1c43      	adds	r3, r0, #1
 800558e:	d102      	bne.n	8005596 <_isatty_r+0x1a>
 8005590:	682b      	ldr	r3, [r5, #0]
 8005592:	b103      	cbz	r3, 8005596 <_isatty_r+0x1a>
 8005594:	6023      	str	r3, [r4, #0]
 8005596:	bd38      	pop	{r3, r4, r5, pc}
 8005598:	20000378 	.word	0x20000378

0800559c <_sbrk_r>:
 800559c:	b538      	push	{r3, r4, r5, lr}
 800559e:	4d06      	ldr	r5, [pc, #24]	@ (80055b8 <_sbrk_r+0x1c>)
 80055a0:	2300      	movs	r3, #0
 80055a2:	4604      	mov	r4, r0
 80055a4:	4608      	mov	r0, r1
 80055a6:	602b      	str	r3, [r5, #0]
 80055a8:	f7fb fdcc 	bl	8001144 <_sbrk>
 80055ac:	1c43      	adds	r3, r0, #1
 80055ae:	d102      	bne.n	80055b6 <_sbrk_r+0x1a>
 80055b0:	682b      	ldr	r3, [r5, #0]
 80055b2:	b103      	cbz	r3, 80055b6 <_sbrk_r+0x1a>
 80055b4:	6023      	str	r3, [r4, #0]
 80055b6:	bd38      	pop	{r3, r4, r5, pc}
 80055b8:	20000378 	.word	0x20000378

080055bc <memcpy>:
 80055bc:	440a      	add	r2, r1
 80055be:	4291      	cmp	r1, r2
 80055c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80055c4:	d100      	bne.n	80055c8 <memcpy+0xc>
 80055c6:	4770      	bx	lr
 80055c8:	b510      	push	{r4, lr}
 80055ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055d2:	4291      	cmp	r1, r2
 80055d4:	d1f9      	bne.n	80055ca <memcpy+0xe>
 80055d6:	bd10      	pop	{r4, pc}

080055d8 <abort>:
 80055d8:	b508      	push	{r3, lr}
 80055da:	2006      	movs	r0, #6
 80055dc:	f000 f85a 	bl	8005694 <raise>
 80055e0:	2001      	movs	r0, #1
 80055e2:	f7fb fd37 	bl	8001054 <_exit>

080055e6 <_realloc_r>:
 80055e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055ea:	4680      	mov	r8, r0
 80055ec:	4615      	mov	r5, r2
 80055ee:	460c      	mov	r4, r1
 80055f0:	b921      	cbnz	r1, 80055fc <_realloc_r+0x16>
 80055f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055f6:	4611      	mov	r1, r2
 80055f8:	f7ff b9c0 	b.w	800497c <_malloc_r>
 80055fc:	b92a      	cbnz	r2, 800560a <_realloc_r+0x24>
 80055fe:	f7ff f949 	bl	8004894 <_free_r>
 8005602:	2400      	movs	r4, #0
 8005604:	4620      	mov	r0, r4
 8005606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800560a:	f000 f85f 	bl	80056cc <_malloc_usable_size_r>
 800560e:	4285      	cmp	r5, r0
 8005610:	4606      	mov	r6, r0
 8005612:	d802      	bhi.n	800561a <_realloc_r+0x34>
 8005614:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005618:	d8f4      	bhi.n	8005604 <_realloc_r+0x1e>
 800561a:	4629      	mov	r1, r5
 800561c:	4640      	mov	r0, r8
 800561e:	f7ff f9ad 	bl	800497c <_malloc_r>
 8005622:	4607      	mov	r7, r0
 8005624:	2800      	cmp	r0, #0
 8005626:	d0ec      	beq.n	8005602 <_realloc_r+0x1c>
 8005628:	42b5      	cmp	r5, r6
 800562a:	462a      	mov	r2, r5
 800562c:	4621      	mov	r1, r4
 800562e:	bf28      	it	cs
 8005630:	4632      	movcs	r2, r6
 8005632:	f7ff ffc3 	bl	80055bc <memcpy>
 8005636:	4621      	mov	r1, r4
 8005638:	4640      	mov	r0, r8
 800563a:	f7ff f92b 	bl	8004894 <_free_r>
 800563e:	463c      	mov	r4, r7
 8005640:	e7e0      	b.n	8005604 <_realloc_r+0x1e>

08005642 <_raise_r>:
 8005642:	291f      	cmp	r1, #31
 8005644:	b538      	push	{r3, r4, r5, lr}
 8005646:	4605      	mov	r5, r0
 8005648:	460c      	mov	r4, r1
 800564a:	d904      	bls.n	8005656 <_raise_r+0x14>
 800564c:	2316      	movs	r3, #22
 800564e:	6003      	str	r3, [r0, #0]
 8005650:	f04f 30ff 	mov.w	r0, #4294967295
 8005654:	bd38      	pop	{r3, r4, r5, pc}
 8005656:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005658:	b112      	cbz	r2, 8005660 <_raise_r+0x1e>
 800565a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800565e:	b94b      	cbnz	r3, 8005674 <_raise_r+0x32>
 8005660:	4628      	mov	r0, r5
 8005662:	f000 f831 	bl	80056c8 <_getpid_r>
 8005666:	4622      	mov	r2, r4
 8005668:	4601      	mov	r1, r0
 800566a:	4628      	mov	r0, r5
 800566c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005670:	f000 b818 	b.w	80056a4 <_kill_r>
 8005674:	2b01      	cmp	r3, #1
 8005676:	d00a      	beq.n	800568e <_raise_r+0x4c>
 8005678:	1c59      	adds	r1, r3, #1
 800567a:	d103      	bne.n	8005684 <_raise_r+0x42>
 800567c:	2316      	movs	r3, #22
 800567e:	6003      	str	r3, [r0, #0]
 8005680:	2001      	movs	r0, #1
 8005682:	e7e7      	b.n	8005654 <_raise_r+0x12>
 8005684:	2100      	movs	r1, #0
 8005686:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800568a:	4620      	mov	r0, r4
 800568c:	4798      	blx	r3
 800568e:	2000      	movs	r0, #0
 8005690:	e7e0      	b.n	8005654 <_raise_r+0x12>
	...

08005694 <raise>:
 8005694:	4b02      	ldr	r3, [pc, #8]	@ (80056a0 <raise+0xc>)
 8005696:	4601      	mov	r1, r0
 8005698:	6818      	ldr	r0, [r3, #0]
 800569a:	f7ff bfd2 	b.w	8005642 <_raise_r>
 800569e:	bf00      	nop
 80056a0:	20000018 	.word	0x20000018

080056a4 <_kill_r>:
 80056a4:	b538      	push	{r3, r4, r5, lr}
 80056a6:	4d07      	ldr	r5, [pc, #28]	@ (80056c4 <_kill_r+0x20>)
 80056a8:	2300      	movs	r3, #0
 80056aa:	4604      	mov	r4, r0
 80056ac:	4608      	mov	r0, r1
 80056ae:	4611      	mov	r1, r2
 80056b0:	602b      	str	r3, [r5, #0]
 80056b2:	f7fb fcbf 	bl	8001034 <_kill>
 80056b6:	1c43      	adds	r3, r0, #1
 80056b8:	d102      	bne.n	80056c0 <_kill_r+0x1c>
 80056ba:	682b      	ldr	r3, [r5, #0]
 80056bc:	b103      	cbz	r3, 80056c0 <_kill_r+0x1c>
 80056be:	6023      	str	r3, [r4, #0]
 80056c0:	bd38      	pop	{r3, r4, r5, pc}
 80056c2:	bf00      	nop
 80056c4:	20000378 	.word	0x20000378

080056c8 <_getpid_r>:
 80056c8:	f7fb bcac 	b.w	8001024 <_getpid>

080056cc <_malloc_usable_size_r>:
 80056cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056d0:	1f18      	subs	r0, r3, #4
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	bfbc      	itt	lt
 80056d6:	580b      	ldrlt	r3, [r1, r0]
 80056d8:	18c0      	addlt	r0, r0, r3
 80056da:	4770      	bx	lr

080056dc <_init>:
 80056dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056de:	bf00      	nop
 80056e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056e2:	bc08      	pop	{r3}
 80056e4:	469e      	mov	lr, r3
 80056e6:	4770      	bx	lr

080056e8 <_fini>:
 80056e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ea:	bf00      	nop
 80056ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ee:	bc08      	pop	{r3}
 80056f0:	469e      	mov	lr, r3
 80056f2:	4770      	bx	lr
